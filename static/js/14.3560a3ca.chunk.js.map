{"version":3,"sources":["../../file-laravel/dist/es/index-b1c87b79.js"],"names":["MAX_LENGTH_OF_LONG","long_min_digits","process","arch","numbers","consume_NUM","ch","this","yytext","hasPoint","input","is_HEX","consume_HNUM","unput","consume_BNUM","is_NUM","offset","size","prev","undo","is_NUM_START","consume_LNUM","tok","T_DNUMBER","length","T_LNUMBER","property","matchST_LOOKING_FOR_PROPERTY","T_OBJECT_OPERATOR","is_WHITESPACE","T_WHITESPACE","is_LABEL_START","consume_LABEL","popState","T_STRING","matchST_LOOKING_FOR_VARNAME","begin","T_STRING_VARNAME","matchST_VAR_OFFSET","T_NUM_STRING","T_VARIABLE","Error","T_ENCAPSED_AND_WHITESPACE","is_TOKEN","scripting","matchST_IN_SCRIPTING","T_COMMENT","_input","T_DOC_COMMENT","consume_TOKEN","T_CONSTANT_ENCAPSED_STRING","ST_DOUBLE_QUOTES","aspTagMode","tryMatch","nextCH","conditionStack","T_CLOSE_TAG","yylineno","newline","valid_after_heredoc","valid_after_heredoc_73","concat","strings","is_HEREDOC","revert","is_TABSPACE","tChar","yyoffset","is_LABEL","yylabel","substring","includes","heredoc_label","label","finished","consume","prematch_ENDOFDOC","T_START_HEREDOC","prefix","appendToken","isDOC_MATCH","consumeLeadingSpaces","prev_ch","indentation_uses_spaces","indentation_uses_tabs","indentation","leading_ch","version","first_encaps_node","matchST_NOWDOC","T_END_HEREDOC","matchST_HEREDOC","T_DOLLAR_OPEN_CURLY_BRACES","next","consume_VARIABLE","T_CURLY_OPEN","matchST_BACKQUOTE","matchST_DOUBLE_QUOTES","utils","charCodeAt","indexOf","consume_TABSPACE","lexer","engine","tokens","names","EOF","debug","all_tokens","comment_tokens","mode_eval","asp_tags","short_tags","yyprevcol","keywords","__class__","T_CLASS_C","__trait__","T_TRAIT_C","__function__","T_FUNC_C","__method__","T_METHOD_C","__line__","T_LINE","__file__","T_FILE","__dir__","T_DIR","__namespace__","T_NS_C","exit","T_EXIT","die","T_FUNCTION","T_CONST","T_RETURN","T_TRY","T_CATCH","T_FINALLY","T_THROW","T_IF","elseif","T_ELSEIF","endif","T_ENDIF","T_ELSE","T_WHILE","endwhile","T_ENDWHILE","T_DO","T_FOR","endfor","T_ENDFOR","foreach","T_FOREACH","endforeach","T_ENDFOREACH","declare","T_DECLARE","enddeclare","T_ENDDECLARE","T_INSTANCEOF","as","T_AS","T_SWITCH","endswitch","T_ENDSWITCH","T_CASE","T_DEFAULT","T_BREAK","T_CONTINUE","T_GOTO","echo","T_ECHO","print","T_PRINT","T_CLASS","T_INTERFACE","trait","T_TRAIT","T_EXTENDS","T_IMPLEMENTS","T_NEW","clone","T_CLONE","T_VAR","eval","T_EVAL","include","T_INCLUDE","include_once","T_INCLUDE_ONCE","require","T_REQUIRE","require_once","T_REQUIRE_ONCE","namespace","T_NAMESPACE","use","T_USE","insteadof","T_INSTEADOF","global","T_GLOBAL","isset","T_ISSET","empty","T_EMPTY","__halt_compiler","T_HALT_COMPILER","T_STATIC","T_ABSTRACT","T_FINAL","T_PRIVATE","T_PROTECTED","T_PUBLIC","unset","T_UNSET","list","T_LIST","array","T_ARRAY","callable","T_CALLABLE","or","T_LOGICAL_OR","and","T_LOGICAL_AND","xor","T_LOGICAL_XOR","castKeywords","T_INT_CAST","integer","real","T_DOUBLE_CAST","string","T_STRING_CAST","binary","T_ARRAY_CAST","object","T_OBJECT_CAST","bool","T_BOOL_CAST","T_UNSET_CAST","prototype","setInput","yylloc","first_offset","first_line","first_column","prev_offset","prev_line","prev_column","last_line","last_column","fn","T_FN","done","toString","i","c","text","ahead","tryMatchCaseless","toLowerCase","getState","setState","state","value","push","lex","token","T_OPEN_TAG","T_OPEN_TAG_WITH_ECHO","condition","curCondition","stateCb","pop","shift","_typeof$1","apply","tName","values","e","console","error","stack","nextINITIAL","matchINITIAL","T_INLINE_HTML","id","T_YIELD_FROM","T_YIELD","tokenTerminals","$","nchar","T_DEC","T_MINUS_EQUAL","T_NS_SEPARATOR","T_DIV_EQUAL","T_DOUBLE_COLON","initial","yylen","castToken","castId","T_DOUBLE_ARROW","T_IS_IDENTICAL","T_IS_EQUAL","T_INC","T_PLUS_EQUAL","T_IS_NOT_IDENTICAL","T_IS_NOT_EQUAL","T_COALESCE_EQUAL","T_COALESCE","T_SL_EQUAL","T_SL","T_SPACESHIP","T_IS_SMALLER_OR_EQUAL","T_IS_GREATER_OR_EQUAL","T_SR_EQUAL","T_SR","T_MUL_EQUAL","T_POW_EQUAL","T_POW","T_CONCAT_EQUAL","T_ELLIPSIS","T_MOD_EQUAL","T_AND_EQUAL","T_BOOLEAN_AND","T_OR_EQUAL","T_BOOLEAN_OR","T_XOR_EQUAL","forEach","ext","k","lexer_1","_class","read_class_declaration_statement","result","node","flag","read_class_modifiers","expect","propName","name","propExtends","read_extends_from","propImplements","read_implements_list","read_class_body","read_class_modifier","flags","read_member_flags","read_function","variables","read_variable_list","constants","read_constant_list","read_trait_use_statement","read_doc_comment","read_comment","properties","read_list","_this$read_optional_t","read_optional_type","_this$read_optional_t2","_slicedToArray","nullable","type","read_expr","items","constName","is","asInterface","idx","val","read_type","raiseError","variant","read_interface_declaration_statement","read_interface_extends_list","read_interface_body","method","read_function_declaration","parseFlags","read_trait_declaration_statement","traits","read_namespace_name","adaptations","read_trait_use_alias","methodName","_methodName","read_name_list","alias","specialChar","n","r","t","f","String","fromCharCode","v","scalar","resolve_special_chars","doubleQuote","replace","$match","p1","p2","fromCodePoint","parseInt","substr","remove_heredoc_leading_whitespace_chars","check_heredoc_indentation_level","matchedChar","removementRegExp","RegExp","removementFirstEncapsNodeRegExp","textSize","leadingWhitespaceCharCount","inCoutingState","chToCheck","inCheckState","read_dereferencable_scalar","isDoubleQuote","read_static_getter","read_array","read_scalar","get_magic_constant","start","lastCh","raw","read_encapsed_string","err","read_dereferencable","expr","read_encapsed_string_item","encapsedPart","syntax","curly","varName","destroy","read_variable","read_simple_variable","read_encaps_var_offset","what","isBinary","arguments","undefined","labelStart","ast","encapsed","TYPE_SHELL","TYPE_STRING","TYPE_HEREDOC","kind","expression","_node","toUpperCase","statement","read_top_statements","_statement","read_top_statement","Array","isArray","read_use_statement","read_const_list","expectEndOfStatement","read_namespace","_result","read_statement","read_inner_statements","_statement2","read_inner_statement","read_declare_list","directive","key","read_code_block","read_if","read_switch","read_for","read_foreach","read_while","read_do","read_optional_expr","_result2","level","_result3","current","_result4","_expr","_items","read_variable_declarations","_result5","shortForm","expressions","read_function_list","prevChar","fixFirstLine","_result6","_result7","mode","_result8","body","directives","extractDoc","_docs","_docIndex","MODE_SHORT","MODE_BLOCK","MODE_NONE","read_try","_result9","_expr2","_result10","_current","labelNameText","labelName","_statement3","_expr3","_result11","_labelName","_statement4","_expr4","top","variable","read_only","read_byref","bind","read_reference_variable","literal","recursive_variable_chain_scan","read_what","is_static_lookup","recursive_scan_loop","read_argument_list","isSquareBracket","num","_num","_text","isNumber","isNaN","parseFloat","isFinite","parser","extractTokens","suppressErrors","mapIt","item","entries","IDENTIFIER","Map","map","VARIABLE","SCALAR","T_MAGIC_CONST","T_MEMBER_FLAGS","EOS","EXPR","getTokenName","parse","code","filename","_errors","currentNamespace","_tokens","_lastNode","innerList","innerListForm","program","childs","read_start","errors","checkNodes","position","log","line","column","join","message","msgExpect","SyntaxError","lineNumber","fileName","columnNumber","prepare","msg","symbol","docs","slice","postBuild","self","max","setTrailingComments","includeToken","ignoreStack","showlog","split","trim","found","entry","hasOwnProperty","has","read_array_pair_list","read_array_pair","byRef","unpack","read_expr_item","read_class_name_reference","trueArg","read_expr_cast","read_isset_variable","read_isset_variables","read_internal_functions_in_yacc","stopToken","read_exit_expr","parenthesizedExpression","handleDereferencable","assign","isInner","assignList","hasItem","read_new_expr","useDie","read_inline_function","backup","isConst","read_assignref","loc","left","right","isRef","is_reference","params","read_parameter_list","returnType","args","read_new_class_name","is_variadic","closure","end","isStatic","nodeName","nameNode","read_lexical_vars","read_lexical_var_list","read_lexical_var","read_parameter","parameterName","isVariadic","read_non_empty_argument_list","wasVariadic","argument","read_argument","_type","typereference","types","test","read_if_expr","alternate","read_elseif_short","read_else_short","read_short_form","init","increment","source","read_foreach_variable","isShort","resolution","reference","RELATIVE_NAME","resolveReference","relative","read_use_type","read_use_declaration","read_use_declarations","typed","read_use_alias","aliasName","useitem","TYPE_FUNCTION","TYPE_CONST","read_switch_case_list","read_case_list","always","catches","separator","preserveFirstSeparator","itemResult","cb","byref","swapLocations","parser_1","tokens$2","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","location_1","Node","location","leadingComments","trailingComments","withSource","constructor","Object","create","KIND","KIND$1","array$1","KIND$2","arrowfunc","KIND$3","operator","KIND$4","assignref","KIND$5","operation","bin","KIND$7","statement$1","KIND$8","block","children","filter","Boolean","KIND$9","KIND$a","boolean_1","KIND$b","_break","KIND$c","KIND$d","call","KIND$e","_case","KIND$f","cast","KIND$g","_catch","KIND$h","Declaration","isAbstract","isFinal","visibility","declaration","KIND$i","_class$1","impl","isAnonymous","KIND$j","constantstatement","KIND$k","ClassConstant","classconstant","KIND$l","KIND$m","uses","comment$1","KIND$n","commentblock","KIND$o","commentline","KIND$p","constant","KIND$q","_continue","KIND$r","Declare","KIND$s","declaredirective","_do","KIND$u","KIND$v","expression$1","KIND$w","Encapsed","TYPE_OFFSET","KIND$x","encapsedpart","KIND$y","KIND$z","expected","KIND$A","_eval","KIND$B","KIND$C","expressionstatement","_for","KIND$E","KIND$F","_function$1","KIND$G","KIND$H","goto_1","KIND$I","halt","after","KIND$J","identifier","_if$1","KIND$L","once","target","KIND$M","inline","KIND$N","_interface","KIND$O","KIND$P","KIND$Q","KIND$R","lookup","KIND$S","magic","KIND$T","KIND$U","KIND$V","Name","isRelative","UNQUALIFIED_NAME","QUALIFIED_NAME","FULL_QUALIFIED_NAME","KIND$W","namespace$1","withBrackets","_new","KIND$Y","noop","KIND$Z","nowdoc","KIND$_","nullkeyword","KIND$$","number","KIND$10","offsetlookup","KIND$11","parameter","variadic","KIND$12","parentreference","KIND$13","post","pre","KIND$15","KIND$16","comments","KIND$17","property$1","KIND$18","propertylookup","KIND$19","PropertyStatement","propertystatement","KIND$1a","retif","trueExpr","falseExpr","KIND$1b","_return","KIND$1c","selfreference","KIND$1d","silent","KIND$1e","_static","KIND$1f","staticvariable","defaultValue","KIND$1g","staticlookup","KIND$1h","staticreference","KIND$1i","unicode","KIND$1j","_switch$1","KIND$1k","_throw","KIND$1l","KIND$1m","traitalias","KIND$1n","traitprecedence","instead","KIND$1o","traituse","_try$1","KIND$1q","TypeReference","KIND$1r","unary","KIND$1s","KIND$1t","usegroup","KIND$1u","UseItem","KIND$1v","variable$1","KIND$1w","KIND$1x","_while","KIND$1y","_yield","KIND$1z","yieldfrom","AST","withPositions","precedence","index","isRightAssociative","first","last","resolveLocations","resolvePrecedence","buffer","lLevel","rLevel","src","astNode","instance","stackUid","ctor","combine","to","keys","options","getStringBuffer","write","parseEval","parseCode","tokenGetAll","tokens_1","lexer_1$1","AST_1","parser_1$1","combine_1","default_1","laravel2jsClb","str","php7","returnElem","find","ele","parseArr","parent","laravel2js","Promise","resolve","reject","ret","_typeof","obj","Symbol","iterator","js2laravelClb","resources","stringifyJs","repeat","js2laravel"],"mappings":"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","file":"static/js/14.3560a3ca.chunk.js","sourcesContent":["import { _ as _typeof$1, b as _slicedToArray } from './index-4f0849b4.js';\nimport '@inweso-dev/i18n-utils';\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar comments = {\n  /**\n   * Reads a single line comment\n   */\n  T_COMMENT: function T_COMMENT() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (ch === \"\\n\" || ch === \"\\r\") {\n        return this.tok.T_COMMENT;\n      } else if (ch === \"?\" && !this.aspTagMode && this._input[this.offset] === \">\") {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      } else if (ch === \"%\" && this.aspTagMode && this._input[this.offset] === \">\") {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      }\n    }\n\n    return this.tok.T_COMMENT;\n  },\n\n  /**\n   * Behaviour : https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1927\n   */\n  T_DOC_COMMENT: function T_DOC_COMMENT() {\n    var ch = this.input();\n    var token = this.tok.T_COMMENT;\n\n    if (ch === \"*\") {\n      // started with '/*' , check is next is '*'\n      ch = this.input();\n\n      if (this.is_WHITESPACE()) {\n        // check if next is WHITESPACE\n        token = this.tok.T_DOC_COMMENT;\n      }\n\n      if (ch === \"/\") {\n        return token;\n      } else {\n        this.unput(1); // reset\n      }\n    }\n\n    while (this.offset < this.size) {\n      ch = this.input();\n\n      if (ch === \"*\" && this._input[this.offset] === \"/\") {\n        this.input();\n        break;\n      }\n    }\n\n    return token;\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar initial = {\n  nextINITIAL: function nextINITIAL() {\n    if (this.conditionStack.length > 1 && this.conditionStack[this.conditionStack.length - 1] === \"INITIAL\") {\n      // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n      this.popState();\n    } else {\n      this.begin(\"ST_IN_SCRIPTING\");\n    }\n\n    return this;\n  },\n  matchINITIAL: function matchINITIAL() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (ch == \"<\") {\n        ch = this.ahead(1);\n\n        if (ch == \"?\") {\n          if (this.tryMatch(\"?=\")) {\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3).nextINITIAL();\n            break;\n          } else if (this.tryMatchCaseless(\"?php\")) {\n            ch = this._input[this.offset + 4];\n\n            if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n              this.unput(1).appendToken(this.tok.T_OPEN_TAG, 6).nextINITIAL();\n              break;\n            }\n          }\n\n          if (this.short_tags) {\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        } else if (this.asp_tags && ch == \"%\") {\n          if (this.tryMatch(\"%=\")) {\n            this.aspTagMode = true;\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3).nextINITIAL();\n            break;\n          } else {\n            this.aspTagMode = true;\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.yytext.length > 0) {\n      return this.tok.T_INLINE_HTML;\n    } else {\n      return false;\n    }\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n/* istanbul ignore else  */\n\nvar MAX_LENGTH_OF_LONG = 10;\nvar long_min_digits = \"2147483648\";\n\nif (process.arch == \"x64\") {\n  MAX_LENGTH_OF_LONG = 19;\n  long_min_digits = \"9223372036854775808\";\n}\n\nvar numbers = {\n  consume_NUM: function consume_NUM() {\n    var ch = this.yytext[0];\n    var hasPoint = ch === \".\";\n\n    if (ch === \"0\") {\n      ch = this.input(); // check if hexa\n\n      if (ch === \"x\" || ch === \"X\") {\n        ch = this.input();\n\n        if (ch !== \"_\" && this.is_HEX()) {\n          return this.consume_HNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        } // check binary notation\n\n      } else if (ch === \"b\" || ch === \"B\") {\n        ch = this.input();\n\n        if (ch !== \"_\" && ch === \"0\" || ch === \"1\") {\n          return this.consume_BNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        } // @fixme check octal notation ? not usefull\n\n      } else if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n      }\n    }\n\n    while (this.offset < this.size) {\n      var prev = ch;\n      ch = this.input();\n\n      if (ch === \"_\") {\n        if (prev === \"_\") {\n          // restriction : next to underscore / 1__1;\n          this.unput(2); // keep 1\n\n          break;\n        }\n\n        if (prev === \".\") {\n          // next to decimal point  \"1._0\"\n          this.unput(1); // keep 1.\n\n          break;\n        }\n\n        if (prev === \"e\" || prev === \"E\") {\n          // next to e \"1e_10\"\n          this.unput(2); // keep 1\n\n          break;\n        }\n      } else if (ch === \".\") {\n        if (hasPoint) {\n          // no multiple points \"1.0.5\"\n          this.unput(1); // keep 1.0\n\n          break;\n        }\n\n        if (prev === \"_\") {\n          // next to decimal point  \"1_.0\"\n          this.unput(2); // keep 1\n\n          break;\n        }\n\n        hasPoint = true;\n        continue;\n      } else if (ch === \"e\" || ch === \"E\") {\n        if (prev === \"_\") {\n          // next to e \"1_e10\"\n          this.unput(1);\n          break;\n        }\n\n        var undo = 2;\n        ch = this.input();\n\n        if (ch === \"+\" || ch === \"-\") {\n          // 1e-5\n          undo = 3;\n          ch = this.input();\n        }\n\n        if (this.is_NUM_START()) {\n          this.consume_LNUM();\n          return this.tok.T_DNUMBER;\n        }\n\n        this.unput(ch ? undo : undo - 1); // keep only 1\n\n        break;\n      }\n\n      if (!this.is_NUM()) {\n        // example : 10.0a\n        if (ch) this.unput(1); // keep 10.0\n\n        break;\n      }\n    }\n\n    if (hasPoint) {\n      return this.tok.T_DNUMBER;\n    } else if (this.yytext.length < MAX_LENGTH_OF_LONG - 1) {\n      return this.tok.T_LNUMBER;\n    } else {\n      if (this.yytext.length < MAX_LENGTH_OF_LONG || this.yytext.length == MAX_LENGTH_OF_LONG && this.yytext < long_min_digits) {\n        return this.tok.T_LNUMBER;\n      }\n\n      return this.tok.T_DNUMBER;\n    }\n  },\n  // read hexa\n  consume_HNUM: function consume_HNUM() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (!this.is_HEX()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this.tok.T_LNUMBER;\n  },\n  // read a generic number\n  consume_LNUM: function consume_LNUM() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this.tok.T_LNUMBER;\n  },\n  // read binary\n  consume_BNUM: function consume_BNUM() {\n    var ch;\n\n    while (this.offset < this.size) {\n      ch = this.input();\n\n      if (ch !== \"0\" && ch !== \"1\" && ch !== \"_\") {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this.tok.T_LNUMBER;\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar property = {\n  matchST_LOOKING_FOR_PROPERTY: function matchST_LOOKING_FOR_PROPERTY() {\n    var ch = this.input();\n\n    if (ch === \"-\") {\n      ch = this.input();\n\n      if (ch === \">\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1296\n        return this.tok.T_OBJECT_OPERATOR;\n      }\n\n      if (ch) this.unput(1);\n    } else if (this.is_WHITESPACE()) {\n      return this.tok.T_WHITESPACE;\n    } else if (this.is_LABEL_START()) {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1300\n      this.consume_LABEL();\n      this.popState();\n      return this.tok.T_STRING;\n    } // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1306\n\n\n    this.popState();\n    if (ch) this.unput(1);\n    return false;\n  },\n  matchST_LOOKING_FOR_VARNAME: function matchST_LOOKING_FOR_VARNAME() {\n    var ch = this.input(); // SHIFT STATE\n\n    this.popState();\n    this.begin(\"ST_IN_SCRIPTING\");\n\n    if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      ch = this.input();\n\n      if (ch === \"[\" || ch === \"}\") {\n        this.unput(1);\n        return this.tok.T_STRING_VARNAME;\n      } else {\n        // any char (that's started with a label sequence)\n        this.unput(this.yytext.length);\n      }\n    } else {\n      // any char (thats not a label start sequence)\n      if (ch) this.unput(1);\n    } // stops looking for a varname and starts the scripting mode\n\n\n    return false;\n  },\n  matchST_VAR_OFFSET: function matchST_VAR_OFFSET() {\n    var ch = this.input();\n\n    if (this.is_NUM_START()) {\n      this.consume_NUM();\n      return this.tok.T_NUM_STRING;\n    } else if (ch === \"]\") {\n      this.popState();\n      return \"]\";\n    } else if (ch === \"$\") {\n      this.input();\n\n      if (this.is_LABEL_START()) {\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        throw new Error(\"Unexpected terminal\");\n      }\n    } else if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      return this.tok.T_STRING;\n    } else if (this.is_WHITESPACE() || ch === \"\\\\\" || ch === \"'\" || ch === \"#\") {\n      return this.tok.T_ENCAPSED_AND_WHITESPACE;\n    } else if (ch === \"[\" || ch === \"{\" || ch === \"}\" || ch === '\"' || ch === \"`\" || this.is_TOKEN()) {\n      return ch;\n    } else {\n      throw new Error(\"Unexpected terminal\");\n    }\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar scripting = {\n  matchST_IN_SCRIPTING: function matchST_IN_SCRIPTING() {\n    var ch = this.input();\n\n    switch (ch) {\n      case \" \":\n      case \"\\t\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\r\\n\":\n        return this.T_WHITESPACE();\n\n      case \"#\":\n        return this.T_COMMENT();\n\n      case \"/\":\n        if (this._input[this.offset] === \"/\") {\n          return this.T_COMMENT();\n        } else if (this._input[this.offset] === \"*\") {\n          this.input();\n          return this.T_DOC_COMMENT();\n        }\n\n        return this.consume_TOKEN();\n\n      case \"'\":\n        return this.T_CONSTANT_ENCAPSED_STRING();\n\n      case '\"':\n        return this.ST_DOUBLE_QUOTES();\n\n      case \"`\":\n        this.begin(\"ST_BACKQUOTE\");\n        return \"`\";\n\n      case \"?\":\n        if (!this.aspTagMode && this.tryMatch(\">\")) {\n          this.input();\n          var nextCH = this._input[this.offset];\n          if (nextCH === \"\\n\" || nextCH === \"\\r\") this.input();\n\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n\n          return this.tok.T_CLOSE_TAG;\n        }\n\n        return this.consume_TOKEN();\n\n      case \"%\":\n        if (this.aspTagMode && this._input[this.offset] === \">\") {\n          this.input(); // consume the '>'\n\n          ch = this._input[this.offset]; // read next\n\n          if (ch === \"\\n\" || ch === \"\\r\") {\n            this.input(); // consume the newline\n          }\n\n          this.aspTagMode = false;\n\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n\n          return this.tok.T_CLOSE_TAG;\n        }\n\n        return this.consume_TOKEN();\n\n      case \"{\":\n        this.begin(\"ST_IN_SCRIPTING\");\n        return \"{\";\n\n      case \"}\":\n        if (this.conditionStack.length > 2) {\n          // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n          this.popState();\n        }\n\n        return \"}\";\n\n      default:\n        if (ch === \".\") {\n          ch = this.input();\n\n          if (this.is_NUM_START()) {\n            return this.consume_NUM();\n          } else {\n            if (ch) this.unput(1);\n          }\n        }\n\n        if (this.is_NUM_START()) {\n          return this.consume_NUM();\n        } else if (this.is_LABEL_START()) {\n          return this.consume_LABEL().T_STRING();\n        } else if (this.is_TOKEN()) {\n          return this.consume_TOKEN();\n        }\n\n    }\n\n    throw new Error('Bad terminal sequence \"' + ch + '\" at line ' + this.yylineno + \" (offset \" + this.offset + \")\");\n  },\n  T_WHITESPACE: function T_WHITESPACE() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n        continue;\n      }\n\n      if (ch) this.unput(1);\n      break;\n    }\n\n    return this.tok.T_WHITESPACE;\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar newline = [\"\\n\", \"\\r\"];\nvar valid_after_heredoc = [\"\\n\", \"\\r\", \";\"];\nvar valid_after_heredoc_73 = valid_after_heredoc.concat([\"\\t\", \" \", \",\", \"]\", \")\", \"/\", \"=\", \"!\"]);\nvar strings = {\n  T_CONSTANT_ENCAPSED_STRING: function T_CONSTANT_ENCAPSED_STRING() {\n    var ch;\n\n    while (this.offset < this.size) {\n      ch = this.input();\n\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == \"'\") {\n        break;\n      }\n    }\n\n    return this.tok.T_CONSTANT_ENCAPSED_STRING;\n  },\n  // check if matching a HEREDOC state\n  is_HEREDOC: function is_HEREDOC() {\n    var revert = this.offset;\n\n    if (this._input[this.offset - 1] === \"<\" && this._input[this.offset] === \"<\" && this._input[this.offset + 1] === \"<\") {\n      this.offset += 3; // optional tabs / spaces\n\n      if (this.is_TABSPACE()) {\n        while (this.offset < this.size) {\n          this.offset++;\n\n          if (!this.is_TABSPACE()) {\n            break;\n          }\n        }\n      } // optional quotes\n\n\n      var tChar = this._input[this.offset - 1];\n\n      if (tChar === \"'\" || tChar === '\"') {\n        this.offset++;\n      } else {\n        tChar = null;\n      } // required label\n\n\n      if (this.is_LABEL_START()) {\n        var yyoffset = this.offset - 1;\n\n        while (this.offset < this.size) {\n          this.offset++;\n\n          if (!this.is_LABEL()) {\n            break;\n          }\n        }\n\n        var yylabel = this._input.substring(yyoffset, this.offset - 1);\n\n        if (!tChar || tChar === this._input[this.offset - 1]) {\n          // required ending quote\n          if (tChar) this.offset++; // require newline\n\n          if (newline.includes(this._input[this.offset - 1])) {\n            // go go go\n            this.heredoc_label.label = yylabel;\n            this.heredoc_label.length = yylabel.length;\n            this.heredoc_label.finished = false;\n            yyoffset = this.offset - revert;\n            this.offset = revert;\n            this.consume(yyoffset);\n\n            if (tChar === \"'\") {\n              this.begin(\"ST_NOWDOC\");\n            } else {\n              this.begin(\"ST_HEREDOC\");\n            } // prematch to get the indentation information from end of doc\n\n\n            this.prematch_ENDOFDOC();\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n      }\n    }\n\n    this.offset = revert;\n    return false;\n  },\n  ST_DOUBLE_QUOTES: function ST_DOUBLE_QUOTES() {\n    var ch;\n\n    while (this.offset < this.size) {\n      ch = this.input();\n\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == '\"') {\n        break;\n      } else if (ch == \"$\") {\n        ch = this.input();\n\n        if (ch == \"{\" || this.is_LABEL_START()) {\n          this.unput(2);\n          break;\n        }\n\n        if (ch) this.unput(1);\n      } else if (ch == \"{\") {\n        ch = this.input();\n\n        if (ch == \"$\") {\n          this.unput(2);\n          break;\n        }\n\n        if (ch) this.unput(1);\n      }\n    }\n\n    if (ch == '\"') {\n      return this.tok.T_CONSTANT_ENCAPSED_STRING;\n    } else {\n      var prefix = 1;\n\n      if (this.yytext[0] === \"b\" || this.yytext[0] === \"B\") {\n        prefix = 2;\n      }\n\n      if (this.yytext.length > 2) {\n        this.appendToken(this.tok.T_ENCAPSED_AND_WHITESPACE, this.yytext.length - prefix);\n      }\n\n      this.unput(this.yytext.length - prefix);\n      this.begin(\"ST_DOUBLE_QUOTES\");\n      return this.yytext;\n    }\n  },\n  // check if its a DOC end sequence\n  isDOC_MATCH: function isDOC_MATCH(offset, consumeLeadingSpaces) {\n    // @fixme : check if out of text limits\n    // consumeLeadingSpaces is false happen DOC prematch END HEREDOC stage.\n    // Ensure current state is really after a new line break, not after a such as ${variables}\n    var prev_ch = this._input[offset - 2];\n\n    if (!newline.includes(prev_ch)) {\n      return false;\n    } // skip leading spaces or tabs\n\n\n    var indentation_uses_spaces = false;\n    var indentation_uses_tabs = false; // reset heredoc_label structure\n\n    var indentation = 0;\n    var leading_ch = this._input[offset - 1];\n\n    if (this.version >= 703) {\n      while (leading_ch === \"\\t\" || leading_ch === \" \") {\n        if (leading_ch === \" \") {\n          indentation_uses_spaces = true;\n        } else if (leading_ch === \"\\t\") {\n          indentation_uses_tabs = true;\n        }\n\n        leading_ch = this._input[offset + indentation];\n        indentation++;\n      } // Move offset to skip leading whitespace\n\n\n      offset = offset + indentation; // return out if there was only whitespace on this line\n\n      if (newline.includes(this._input[offset - 1])) {\n        return false;\n      }\n    }\n\n    if (this._input.substring(offset - 1, offset - 1 + this.heredoc_label.length) === this.heredoc_label.label) {\n      var ch = this._input[offset - 1 + this.heredoc_label.length];\n\n      if ((this.version >= 703 ? valid_after_heredoc_73 : valid_after_heredoc).includes(ch)) {\n        if (consumeLeadingSpaces) {\n          this.consume(indentation); // https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes\n\n          if (indentation_uses_spaces && indentation_uses_tabs) {\n            throw new Error(\"Parse error:  mixing spaces and tabs in ending marker at line \" + this.yylineno + \" (offset \" + this.offset + \")\");\n          }\n        } else {\n          // Called in prematch_ENDOFDOC\n          this.heredoc_label.indentation = indentation;\n          this.heredoc_label.indentation_uses_spaces = indentation_uses_spaces;\n          this.heredoc_label.first_encaps_node = true;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Prematch the end of HEREDOC/NOWDOC end tag to preset the\n   * context of this.heredoc_label\n   */\n  prematch_ENDOFDOC: function prematch_ENDOFDOC() {\n    // reset heredoc\n    this.heredoc_label.indentation_uses_spaces = false;\n    this.heredoc_label.indentation = 0;\n    this.heredoc_label.first_encaps_node = true;\n    var offset = this.offset + 1;\n\n    while (offset < this._input.length) {\n      // if match heredoc_label structrue will be set\n      if (this.isDOC_MATCH(offset, false)) {\n        return;\n      }\n\n      if (!newline.includes(this._input[offset - 1])) {\n        // skip one line\n        while (!newline.includes(this._input[offset++]) && offset < this._input.length) {// skip\n        }\n      }\n\n      offset++;\n    }\n  },\n  matchST_NOWDOC: function matchST_NOWDOC() {\n    /** edge case : empty now doc **/\n    if (this.isDOC_MATCH(this.offset, true)) {\n      // @fixme : never reached (may be caused by quotes)\n      this.consume(this.heredoc_label.length);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    /** SCANNING CONTENTS **/\n\n\n    var ch = this._input[this.offset - 1];\n\n    while (this.offset < this.size) {\n      if (newline.includes(ch)) {\n        ch = this.input();\n\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else {\n        ch = this.input();\n      }\n    } // too bad ! reached end of document (will get a parse error)\n\n\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n  matchST_HEREDOC: function matchST_HEREDOC() {\n    /** edge case : empty here doc **/\n    var ch = this.input();\n\n    if (this.isDOC_MATCH(this.offset, true)) {\n      this.consume(this.heredoc_label.length - 1);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    /** SCANNING CONTENTS **/\n\n\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        ch = this.input(); // ignore next\n\n        if (!newline.includes(ch)) {\n          ch = this.input();\n        }\n      }\n\n      if (newline.includes(ch)) {\n        ch = this.input();\n\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else if (ch === \"$\") {\n        ch = this.input();\n\n        if (ch === \"{\") {\n          // start of ${\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          var yyoffset = this.offset;\n          var next = this.consume_VARIABLE();\n\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          } //console.log(this.yytext);\n\n        }\n      } else if (ch === \"{\") {\n        ch = this.input();\n\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n      } else {\n        ch = this.input();\n      }\n    } // too bad ! reached end of document (will get a parse error)\n\n\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n  consume_VARIABLE: function consume_VARIABLE() {\n    this.consume_LABEL();\n    var ch = this.input();\n\n    if (ch == \"[\") {\n      this.unput(1);\n      this.begin(\"ST_VAR_OFFSET\");\n      return this.tok.T_VARIABLE;\n    } else if (ch === \"-\") {\n      if (this.input() === \">\") {\n        this.input();\n\n        if (this.is_LABEL_START()) {\n          this.begin(\"ST_LOOKING_FOR_PROPERTY\");\n        }\n\n        this.unput(3);\n        return this.tok.T_VARIABLE;\n      } else {\n        this.unput(2);\n      }\n    } else {\n      if (ch) this.unput(1);\n    }\n\n    return this.tok.T_VARIABLE;\n  },\n  // HANDLES BACKQUOTES\n  matchST_BACKQUOTE: function matchST_BACKQUOTE() {\n    var ch = this.input();\n\n    if (ch === \"$\") {\n      ch = this.input();\n\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        var tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === \"`\") {\n      this.popState();\n      return \"`\";\n    } // any char\n\n\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === \"`\") {\n        this.unput(1);\n        this.popState();\n        this.appendToken(\"`\", 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          var yyoffset = this.offset;\n          var next = this.consume_VARIABLE();\n\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n\n        continue;\n      } else if (ch === \"{\") {\n        ch = this.input();\n\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n\n        continue;\n      }\n\n      ch = this.input();\n    }\n\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n  matchST_DOUBLE_QUOTES: function matchST_DOUBLE_QUOTES() {\n    var ch = this.input();\n\n    if (ch === \"$\") {\n      ch = this.input();\n\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        var tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === '\"') {\n      this.popState();\n      return '\"';\n    } // any char\n\n\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === '\"') {\n        this.unput(1);\n        this.popState();\n        this.appendToken('\"', 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          var yyoffset = this.offset;\n          var next = this.consume_VARIABLE();\n\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n\n        if (ch) this.unput(1);\n      } else if (ch === \"{\") {\n        ch = this.input();\n\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            // @fixme : yytext = '\"{$' (this.yytext.length > 3)\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n\n        if (ch) this.unput(1);\n      }\n\n      ch = this.input();\n    }\n\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar tokens = {\n  T_STRING: function T_STRING() {\n    var token = this.yytext.toLowerCase();\n    var id = this.keywords[token];\n\n    if (typeof id !== \"number\") {\n      if (token === \"yield\") {\n        if (this.version >= 700 && this.tryMatch(\" from\")) {\n          this.consume(5);\n          id = this.tok.T_YIELD_FROM;\n        } else {\n          id = this.tok.T_YIELD;\n        }\n      } else {\n        id = this.tok.T_STRING;\n\n        if (token === \"b\" || token === \"B\") {\n          var ch = this.input(1);\n\n          if (ch === '\"') {\n            return this.ST_DOUBLE_QUOTES();\n          } else if (ch === \"'\") {\n            return this.T_CONSTANT_ENCAPSED_STRING();\n          } else if (ch) {\n            this.unput(1);\n          }\n        }\n      }\n    }\n\n    return id;\n  },\n  // reads a custom token\n  consume_TOKEN: function consume_TOKEN() {\n    var ch = this._input[this.offset - 1];\n    var fn = this.tokenTerminals[ch];\n\n    if (fn) {\n      return fn.apply(this, []);\n    } else {\n      return this.yytext;\n    }\n  },\n  // list of special char tokens\n  tokenTerminals: {\n    $: function $() {\n      this.offset++;\n\n      if (this.is_LABEL_START()) {\n        this.offset--;\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        this.offset--;\n        return \"$\";\n      }\n    },\n    \"-\": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === \">\") {\n        this.begin(\"ST_LOOKING_FOR_PROPERTY\").input();\n        return this.tok.T_OBJECT_OPERATOR;\n      } else if (nchar === \"-\") {\n        this.input();\n        return this.tok.T_DEC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MINUS_EQUAL;\n      }\n\n      return \"-\";\n    },\n    \"\\\\\": function _() {\n      return this.tok.T_NS_SEPARATOR;\n    },\n    \"/\": function _() {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_DIV_EQUAL;\n      }\n\n      return \"/\";\n    },\n    \":\": function _() {\n      if (this._input[this.offset] === \":\") {\n        this.input();\n        return this.tok.T_DOUBLE_COLON;\n      } else {\n        return \":\";\n      }\n    },\n    \"(\": function _() {\n      var initial = this.offset;\n      this.input();\n\n      if (this.is_TABSPACE()) {\n        this.consume_TABSPACE().input();\n      }\n\n      if (this.is_LABEL_START()) {\n        var yylen = this.yytext.length;\n        this.consume_LABEL();\n        var castToken = this.yytext.substring(yylen - 1).toLowerCase();\n        var castId = this.castKeywords[castToken];\n\n        if (typeof castId === \"number\") {\n          this.input();\n\n          if (this.is_TABSPACE()) {\n            this.consume_TABSPACE().input();\n          }\n\n          if (this._input[this.offset - 1] === \")\") {\n            return castId;\n          }\n        }\n      } // revert the check\n\n\n      this.unput(this.offset - initial);\n      return \"(\";\n    },\n    \"=\": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === \">\") {\n        this.input();\n        return this.tok.T_DOUBLE_ARROW;\n      } else if (nchar === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_EQUAL;\n        }\n      }\n\n      return \"=\";\n    },\n    \"+\": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === \"+\") {\n        this.input();\n        return this.tok.T_INC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_PLUS_EQUAL;\n      }\n\n      return \"+\";\n    },\n    \"!\": function _() {\n      if (this._input[this.offset] === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_NOT_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_NOT_EQUAL;\n        }\n      }\n\n      return \"!\";\n    },\n    \"?\": function _() {\n      if (this.version >= 700 && this._input[this.offset] === \"?\") {\n        if (this.version >= 704 && this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_COALESCE_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_COALESCE;\n        }\n      }\n\n      return \"?\";\n    },\n    \"<\": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === \"<\") {\n        nchar = this._input[this.offset + 1];\n\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SL_EQUAL;\n        } else if (nchar === \"<\") {\n          if (this.is_HEREDOC()) {\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n\n        this.input();\n        return this.tok.T_SL;\n      } else if (nchar === \"=\") {\n        this.input();\n\n        if (this.version >= 700 && this._input[this.offset] === \">\") {\n          this.input();\n          return this.tok.T_SPACESHIP;\n        } else {\n          return this.tok.T_IS_SMALLER_OR_EQUAL;\n        }\n      } else if (nchar === \">\") {\n        this.input();\n        return this.tok.T_IS_NOT_EQUAL;\n      }\n\n      return \"<\";\n    },\n    \">\": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_IS_GREATER_OR_EQUAL;\n      } else if (nchar === \">\") {\n        nchar = this._input[this.offset + 1];\n\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SR_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_SR;\n        }\n      }\n\n      return \">\";\n    },\n    \"*\": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MUL_EQUAL;\n      } else if (nchar === \"*\") {\n        this.input();\n\n        if (this._input[this.offset] === \"=\") {\n          this.input();\n          return this.tok.T_POW_EQUAL;\n        } else {\n          return this.tok.T_POW;\n        }\n      }\n\n      return \"*\";\n    },\n    \".\": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_CONCAT_EQUAL;\n      } else if (nchar === \".\" && this._input[this.offset + 1] === \".\") {\n        this.consume(2);\n        return this.tok.T_ELLIPSIS;\n      }\n\n      return \".\";\n    },\n    \"%\": function _() {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_MOD_EQUAL;\n      }\n\n      return \"%\";\n    },\n    \"&\": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_AND_EQUAL;\n      } else if (nchar === \"&\") {\n        this.input();\n        return this.tok.T_BOOLEAN_AND;\n      }\n\n      return \"&\";\n    },\n    \"|\": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_OR_EQUAL;\n      } else if (nchar === \"|\") {\n        this.input();\n        return this.tok.T_BOOLEAN_OR;\n      }\n\n      return \"|\";\n    },\n    \"^\": function _() {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_XOR_EQUAL;\n      }\n\n      return \"^\";\n    }\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar tokens$1 = \";:,.\\\\[]()|^&+-/*=%!~$<>?@\";\nvar utils = {\n  // check if the char can be a numeric\n  is_NUM: function is_NUM() {\n    var ch = this._input.charCodeAt(this.offset - 1);\n\n    return ch > 47 && ch < 58 || ch === 95;\n  },\n  // check if the char can be a numeric\n  is_NUM_START: function is_NUM_START() {\n    var ch = this._input.charCodeAt(this.offset - 1);\n\n    return ch > 47 && ch < 58;\n  },\n  // check if current char can be a label\n  is_LABEL: function is_LABEL() {\n    var ch = this._input.charCodeAt(this.offset - 1);\n\n    return ch > 96 && ch < 123 || ch > 64 && ch < 91 || ch === 95 || ch > 47 && ch < 58 || ch > 126;\n  },\n  // check if current char can be a label\n  is_LABEL_START: function is_LABEL_START() {\n    var ch = this._input.charCodeAt(this.offset - 1); // A - Z\n\n\n    if (ch > 64 && ch < 91) return true; // a - z\n\n    if (ch > 96 && ch < 123) return true; // _ (95)\n\n    if (ch === 95) return true; // utf8 / extended\n\n    if (ch > 126) return true; // else\n\n    return false;\n  },\n  // reads each char of the label\n  consume_LABEL: function consume_LABEL() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (!this.is_LABEL()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this;\n  },\n  // check if current char is a token char\n  is_TOKEN: function is_TOKEN() {\n    var ch = this._input[this.offset - 1];\n    return tokens$1.indexOf(ch) !== -1;\n  },\n  // check if current char is a whitespace\n  is_WHITESPACE: function is_WHITESPACE() {\n    var ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\";\n  },\n  // check if current char is a whitespace (without newlines)\n  is_TABSPACE: function is_TABSPACE() {\n    var ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\";\n  },\n  // consume all whitespaces (excluding newlines)\n  consume_TABSPACE: function consume_TABSPACE() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (!this.is_TABSPACE()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this;\n  },\n  // check if current char can be a hexadecimal number\n  is_HEX: function is_HEX() {\n    var ch = this._input.charCodeAt(this.offset - 1); // 0 - 9\n\n\n    if (ch > 47 && ch < 58) return true; // A - F\n\n    if (ch > 64 && ch < 71) return true; // a - f\n\n    if (ch > 96 && ch < 103) return true; // _ (code 95)\n\n    if (ch === 95) return true; // else\n\n    return false;\n  }\n};\n\n/**\n * This is the php lexer. It will tokenize the string for helping the\n * parser to build the AST from its grammar.\n *\n * @class\n * @property {Integer} EOF\n * @property {Boolean} all_tokens defines if all tokens must be retrieved (used by token_get_all only)\n * @property {Boolean} comment_tokens extracts comments tokens\n * @property {Boolean} mode_eval enables the evald mode (ignore opening tags)\n * @property {Boolean} asp_tags disables by default asp tags mode\n * @property {Boolean} short_tags enables by default short tags mode\n * @property {Object} keywords List of php keyword\n * @property {Object} castKeywords List of php keywords for type casting\n */\n\n\nvar lexer = function lexer(engine) {\n  this.engine = engine;\n  this.tok = this.engine.tokens.names;\n  this.EOF = 1;\n  this.debug = false;\n  this.all_tokens = true;\n  this.comment_tokens = false;\n  this.mode_eval = false;\n  this.asp_tags = false;\n  this.short_tags = false;\n  this.version = 704;\n  this.yyprevcol = 0;\n  this.keywords = {\n    __class__: this.tok.T_CLASS_C,\n    __trait__: this.tok.T_TRAIT_C,\n    __function__: this.tok.T_FUNC_C,\n    __method__: this.tok.T_METHOD_C,\n    __line__: this.tok.T_LINE,\n    __file__: this.tok.T_FILE,\n    __dir__: this.tok.T_DIR,\n    __namespace__: this.tok.T_NS_C,\n    exit: this.tok.T_EXIT,\n    die: this.tok.T_EXIT,\n    \"function\": this.tok.T_FUNCTION,\n    \"const\": this.tok.T_CONST,\n    \"return\": this.tok.T_RETURN,\n    \"try\": this.tok.T_TRY,\n    \"catch\": this.tok.T_CATCH,\n    \"finally\": this.tok.T_FINALLY,\n    \"throw\": this.tok.T_THROW,\n    \"if\": this.tok.T_IF,\n    elseif: this.tok.T_ELSEIF,\n    endif: this.tok.T_ENDIF,\n    \"else\": this.tok.T_ELSE,\n    \"while\": this.tok.T_WHILE,\n    endwhile: this.tok.T_ENDWHILE,\n    \"do\": this.tok.T_DO,\n    \"for\": this.tok.T_FOR,\n    endfor: this.tok.T_ENDFOR,\n    foreach: this.tok.T_FOREACH,\n    endforeach: this.tok.T_ENDFOREACH,\n    declare: this.tok.T_DECLARE,\n    enddeclare: this.tok.T_ENDDECLARE,\n    \"instanceof\": this.tok.T_INSTANCEOF,\n    as: this.tok.T_AS,\n    \"switch\": this.tok.T_SWITCH,\n    endswitch: this.tok.T_ENDSWITCH,\n    \"case\": this.tok.T_CASE,\n    \"default\": this.tok.T_DEFAULT,\n    \"break\": this.tok.T_BREAK,\n    \"continue\": this.tok.T_CONTINUE,\n    \"goto\": this.tok.T_GOTO,\n    echo: this.tok.T_ECHO,\n    print: this.tok.T_PRINT,\n    \"class\": this.tok.T_CLASS,\n    \"interface\": this.tok.T_INTERFACE,\n    trait: this.tok.T_TRAIT,\n    \"extends\": this.tok.T_EXTENDS,\n    \"implements\": this.tok.T_IMPLEMENTS,\n    \"new\": this.tok.T_NEW,\n    clone: this.tok.T_CLONE,\n    \"var\": this.tok.T_VAR,\n    eval: this.tok.T_EVAL,\n    include: this.tok.T_INCLUDE,\n    include_once: this.tok.T_INCLUDE_ONCE,\n    require: this.tok.T_REQUIRE,\n    require_once: this.tok.T_REQUIRE_ONCE,\n    namespace: this.tok.T_NAMESPACE,\n    use: this.tok.T_USE,\n    insteadof: this.tok.T_INSTEADOF,\n    global: this.tok.T_GLOBAL,\n    isset: this.tok.T_ISSET,\n    empty: this.tok.T_EMPTY,\n    __halt_compiler: this.tok.T_HALT_COMPILER,\n    \"static\": this.tok.T_STATIC,\n    \"abstract\": this.tok.T_ABSTRACT,\n    \"final\": this.tok.T_FINAL,\n    \"private\": this.tok.T_PRIVATE,\n    \"protected\": this.tok.T_PROTECTED,\n    \"public\": this.tok.T_PUBLIC,\n    unset: this.tok.T_UNSET,\n    list: this.tok.T_LIST,\n    array: this.tok.T_ARRAY,\n    callable: this.tok.T_CALLABLE,\n    or: this.tok.T_LOGICAL_OR,\n    and: this.tok.T_LOGICAL_AND,\n    xor: this.tok.T_LOGICAL_XOR\n  };\n  this.castKeywords = {\n    \"int\": this.tok.T_INT_CAST,\n    integer: this.tok.T_INT_CAST,\n    real: this.tok.T_DOUBLE_CAST,\n    \"double\": this.tok.T_DOUBLE_CAST,\n    \"float\": this.tok.T_DOUBLE_CAST,\n    string: this.tok.T_STRING_CAST,\n    binary: this.tok.T_STRING_CAST,\n    array: this.tok.T_ARRAY_CAST,\n    object: this.tok.T_OBJECT_CAST,\n    bool: this.tok.T_BOOL_CAST,\n    \"boolean\": this.tok.T_BOOL_CAST,\n    unset: this.tok.T_UNSET_CAST\n  };\n};\n/**\n * Initialize the lexer with the specified input\n */\n\n\nlexer.prototype.setInput = function (input) {\n  this._input = input;\n  this.size = input.length;\n  this.yylineno = 1;\n  this.offset = 0;\n  this.yyprevcol = 0;\n  this.yytext = \"\";\n  this.yylloc = {\n    first_offset: 0,\n    first_line: 1,\n    first_column: 0,\n    prev_offset: 0,\n    prev_line: 1,\n    prev_column: 0,\n    last_line: 1,\n    last_column: 0\n  };\n  this.tokens = [];\n\n  if (this.version > 703) {\n    this.keywords.fn = this.tok.T_FN;\n  } else {\n    delete this.keywords.fn;\n  }\n\n  this.done = this.offset >= this.size;\n\n  if (!this.all_tokens && this.mode_eval) {\n    this.conditionStack = [\"INITIAL\"];\n    this.begin(\"ST_IN_SCRIPTING\");\n  } else {\n    this.conditionStack = [];\n    this.begin(\"INITIAL\");\n  } // https://github.com/php/php-src/blob/999e32b65a8a4bb59e27e538fa68ffae4b99d863/Zend/zend_language_scanner.h#L59\n  // Used for heredoc and nowdoc\n\n\n  this.heredoc_label = {\n    label: \"\",\n    length: 0,\n    indentation: 0,\n    indentation_uses_spaces: false,\n    finished: false,\n\n    /**\n     * this used for parser to detemine the if current node segment is first encaps node.\n     * if ture, the indentation will remove from the begining. and if false, the prev node\n     * might be a variable '}' ,and the leading spaces should not be removed util meet the\n     * first \\n\n     */\n    first_encaps_node: false,\n    // for backward compatible\n    toString: function toString() {\n      this.label;\n    }\n  };\n  return this;\n};\n/**\n * consumes and returns one char from the input\n */\n\n\nlexer.prototype.input = function () {\n  var ch = this._input[this.offset];\n  if (!ch) return \"\";\n  this.yytext += ch;\n  this.offset++;\n\n  if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n    this.yytext += \"\\n\";\n    this.offset++;\n  }\n\n  if (ch === \"\\n\" || ch === \"\\r\") {\n    this.yylloc.last_line = ++this.yylineno;\n    this.yyprevcol = this.yylloc.last_column;\n    this.yylloc.last_column = 0;\n  } else {\n    this.yylloc.last_column++;\n  }\n\n  return ch;\n};\n/**\n * revert eating specified size\n */\n\n\nlexer.prototype.unput = function (size) {\n  if (size === 1) {\n    // 1 char unput (most cases)\n    this.offset--;\n\n    if (this._input[this.offset] === \"\\n\" && this._input[this.offset - 1] === \"\\r\") {\n      this.offset--;\n      size++;\n    }\n\n    if (this._input[this.offset] === \"\\r\" || this._input[this.offset] === \"\\n\") {\n      this.yylloc.last_line--;\n      this.yylineno--;\n      this.yylloc.last_column = this.yyprevcol;\n    } else {\n      this.yylloc.last_column--;\n    }\n\n    this.yytext = this.yytext.substring(0, this.yytext.length - size);\n  } else if (size > 0) {\n    this.offset -= size;\n\n    if (size < this.yytext.length) {\n      this.yytext = this.yytext.substring(0, this.yytext.length - size); // re-calculate position\n\n      this.yylloc.last_line = this.yylloc.first_line;\n      this.yylloc.last_column = this.yyprevcol = this.yylloc.first_column;\n\n      for (var i = 0; i < this.yytext.length; i++) {\n        var c = this.yytext[i];\n\n        if (c === \"\\r\") {\n          c = this.yytext[++i];\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n\n          if (c !== \"\\n\") {\n            if (c === \"\\r\") {\n              this.yylloc.last_line++;\n            } else {\n              this.yylloc.last_column++;\n            }\n          }\n        } else if (c === \"\\n\") {\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n        } else {\n          this.yylloc.last_column++;\n        }\n      }\n\n      this.yylineno = this.yylloc.last_line;\n    } else {\n      // reset full text\n      this.yytext = \"\";\n      this.yylloc.last_line = this.yylineno = this.yylloc.first_line;\n      this.yylloc.last_column = this.yylloc.first_column;\n    }\n  }\n\n  return this;\n}; // check if the text matches\n\n\nlexer.prototype.tryMatch = function (text) {\n  return text === this.ahead(text.length);\n}; // check if the text matches\n\n\nlexer.prototype.tryMatchCaseless = function (text) {\n  return text === this.ahead(text.length).toLowerCase();\n}; // look ahead\n\n\nlexer.prototype.ahead = function (size) {\n  var text = this._input.substring(this.offset, this.offset + size);\n\n  if (text[text.length - 1] === \"\\r\" && this._input[this.offset + size + 1] === \"\\n\") {\n    text += \"\\n\";\n  }\n\n  return text;\n}; // consume the specified size\n\n\nlexer.prototype.consume = function (size) {\n  for (var i = 0; i < size; i++) {\n    var ch = this._input[this.offset];\n    if (!ch) break;\n    this.yytext += ch;\n    this.offset++;\n\n    if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n      this.yytext += \"\\n\";\n      this.offset++;\n      i++;\n    }\n\n    if (ch === \"\\n\" || ch === \"\\r\") {\n      this.yylloc.last_line = ++this.yylineno;\n      this.yyprevcol = this.yylloc.last_column;\n      this.yylloc.last_column = 0;\n    } else {\n      this.yylloc.last_column++;\n    }\n  }\n\n  return this;\n};\n/**\n * Gets the current state\n */\n\n\nlexer.prototype.getState = function () {\n  return {\n    yytext: this.yytext,\n    offset: this.offset,\n    yylineno: this.yylineno,\n    yyprevcol: this.yyprevcol,\n    yylloc: {\n      first_offset: this.yylloc.first_offset,\n      first_line: this.yylloc.first_line,\n      first_column: this.yylloc.first_column,\n      last_line: this.yylloc.last_line,\n      last_column: this.yylloc.last_column\n    },\n    heredoc_label: this.heredoc_label\n  };\n};\n/**\n * Sets the current lexer state\n */\n\n\nlexer.prototype.setState = function (state) {\n  this.yytext = state.yytext;\n  this.offset = state.offset;\n  this.yylineno = state.yylineno;\n  this.yyprevcol = state.yyprevcol;\n  this.yylloc = state.yylloc;\n\n  if (state.heredoc_label) {\n    this.heredoc_label = state.heredoc_label;\n  }\n\n  return this;\n}; // prepend next token\n\n\nlexer.prototype.appendToken = function (value, ahead) {\n  this.tokens.push([value, ahead]);\n  return this;\n}; // return next match that has a token\n\n\nlexer.prototype.lex = function () {\n  this.yylloc.prev_offset = this.offset;\n  this.yylloc.prev_line = this.yylloc.last_line;\n  this.yylloc.prev_column = this.yylloc.last_column;\n  var token = this.next() || this.lex();\n\n  if (!this.all_tokens) {\n    while (token === this.tok.T_WHITESPACE || // ignore white space\n    !this.comment_tokens && (token === this.tok.T_COMMENT || // ignore single lines comments\n    token === this.tok.T_DOC_COMMENT) || // ignore doc comments\n    // ignore open tags\n    token === this.tok.T_OPEN_TAG) {\n      token = this.next() || this.lex();\n    }\n\n    if (token == this.tok.T_OPEN_TAG_WITH_ECHO) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1683\n      // open tag with echo statement\n      return this.tok.T_ECHO;\n    } else if (token === this.tok.T_CLOSE_TAG) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n      return \";\";\n      /* implicit ; */\n    }\n  }\n\n  if (!this.yylloc.prev_offset) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n  }\n  /*else if (this.yylloc.prev_offset === this.offset && this.offset !== this.size) {\n    throw new Error('Infinite loop @ ' + this.offset + ' / ' + this.size);\n  }*/\n\n\n  return token;\n}; // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n\n\nlexer.prototype.begin = function (condition) {\n  this.conditionStack.push(condition);\n  this.curCondition = condition;\n  this.stateCb = this[\"match\" + condition];\n\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + condition + '\"');\n  }\n\n  return this;\n}; // pop the previously active lexer condition state off the condition stack\n\n\nlexer.prototype.popState = function () {\n  var n = this.conditionStack.length - 1;\n  var condition = n > 0 ? this.conditionStack.pop() : this.conditionStack[0];\n  this.curCondition = this.conditionStack[this.conditionStack.length - 1];\n  this.stateCb = this[\"match\" + this.curCondition];\n\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + this.curCondition + '\"');\n  }\n\n  return condition;\n}; // return next match in input\n\n\nlexer.prototype.next = function () {\n  var token;\n\n  if (!this._input) {\n    this.done = true;\n  }\n\n  this.yylloc.first_offset = this.offset;\n  this.yylloc.first_line = this.yylloc.last_line;\n  this.yylloc.first_column = this.yylloc.last_column;\n  this.yytext = \"\";\n\n  if (this.done) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n    return this.EOF;\n  }\n\n  if (this.tokens.length > 0) {\n    token = this.tokens.shift();\n\n    if (_typeof$1(token[1]) === \"object\") {\n      this.setState(token[1]);\n    } else {\n      this.consume(token[1]);\n    }\n\n    token = token[0];\n  } else {\n    token = this.stateCb.apply(this, []);\n  }\n\n  if (this.offset >= this.size && this.tokens.length === 0) {\n    this.done = true;\n  }\n\n  if (this.debug) {\n    var tName = token;\n\n    if (typeof tName === \"number\") {\n      tName = this.engine.tokens.values[tName];\n    } else {\n      tName = '\"' + tName + '\"';\n    }\n\n    var e = new Error(tName + \"\\tfrom \" + this.yylloc.first_line + \",\" + this.yylloc.first_column + \"\\t - to \" + this.yylloc.last_line + \",\" + this.yylloc.last_column + '\\t\"' + this.yytext + '\"'); // eslint-disable-next-line no-console\n\n    console.error(e.stack);\n  }\n\n  return token;\n}; // extends the lexer with states\n\n\n[comments, initial, numbers, property, scripting, strings, tokens, utils].forEach(function (ext) {\n  for (var k in ext) {\n    lexer.prototype[k] = ext[k];\n  }\n});\nvar lexer_1 = lexer;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar array = {\n  /**\n   * Parse an array\n   * ```ebnf\n   * array ::= T_ARRAY '(' array_pair_list ')' |\n   *   '[' array_pair_list ']'\n   * ```\n   */\n  read_array: function read_array() {\n    var expect = null;\n    var shortForm = false;\n    var result = this.node(\"array\");\n\n    if (this.token === this.tok.T_ARRAY) {\n      this.next().expect(\"(\");\n      expect = \")\";\n    } else {\n      shortForm = true;\n      expect = \"]\";\n    }\n\n    var items = [];\n\n    if (this.next().token !== expect) {\n      items = this.read_array_pair_list(shortForm);\n    }\n\n    this.expect(expect);\n    this.next();\n    return result(shortForm, items);\n  },\n\n  /**\n   * Reads an array of items\n   * ```ebnf\n   * array_pair_list ::= array_pair (',' array_pair?)*\n   * ```\n   */\n  read_array_pair_list: function read_array_pair_list(shortForm) {\n    var self = this;\n    return this.read_list(function () {\n      return self.read_array_pair(shortForm);\n    }, \",\", true);\n  },\n\n  /**\n   * Reads an entry\n   * array_pair:\n   *  expr T_DOUBLE_ARROW expr\n   *  | expr\n   *  | expr T_DOUBLE_ARROW '&' variable\n   *  | '&' variable\n   *  | expr T_DOUBLE_ARROW T_LIST '(' array_pair_list ')'\n   *  | T_LIST '(' array_pair_list ')'\n   */\n  read_array_pair: function read_array_pair(shortForm) {\n    if (!shortForm && this.token === \")\" || shortForm && this.token === \"]\") {\n      return;\n    }\n\n    if (this.token === \",\") {\n      return this.node(\"noop\")();\n    }\n\n    var entry = this.node(\"entry\");\n    var key = null;\n    var value = null;\n    var byRef = false;\n    var unpack = false;\n\n    if (this.token === \"&\") {\n      this.next();\n      byRef = true;\n      value = this.read_variable(true, false);\n    } else if (this.token === this.tok.T_ELLIPSIS && this.version >= 704) {\n      this.next();\n\n      if (this.token === \"&\") {\n        this.error();\n      }\n\n      unpack = true;\n      value = this.read_expr();\n    } else {\n      var expr = this.read_expr();\n\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        this.next();\n        key = expr;\n\n        if (this.token === \"&\") {\n          this.next();\n          byRef = true;\n          value = this.read_variable(true, false);\n        } else {\n          value = this.read_expr();\n        }\n      } else {\n        value = expr;\n      }\n    }\n\n    return entry(key, value, byRef, unpack);\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\nvar _class = {\n  /**\n   * reading a class\n   * ```ebnf\n   * class ::= class_scope? T_CLASS T_STRING (T_EXTENDS NAMESPACE_NAME)? (T_IMPLEMENTS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' CLASS_BODY '}'\n   * ```\n   */\n  read_class_declaration_statement: function read_class_declaration_statement() {\n    var result = this.node(\"class\");\n    var flag = this.read_class_modifiers(); // graceful mode : ignore token & go next\n\n    if (this.token !== this.tok.T_CLASS) {\n      this.error(this.tok.T_CLASS);\n      this.next();\n      return null;\n    }\n\n    this.next().expect(this.tok.T_STRING);\n    var propName = this.node(\"identifier\");\n    var name = this.text();\n    this.next();\n    propName = propName(name);\n    var propExtends = this.read_extends_from();\n    var propImplements = this.read_implements_list();\n    this.expect(\"{\");\n    var body = this.next().read_class_body();\n    return result(propName, propExtends, propImplements, body, flag);\n  },\n  read_class_modifiers: function read_class_modifiers() {\n    return [0, 0, this.read_class_modifier()];\n  },\n  read_class_modifier: function read_class_modifier() {\n    var result = 0;\n\n    if (this.token === this.tok.T_ABSTRACT) {\n      this.next();\n      return 1;\n    } else if (this.token === this.tok.T_FINAL) {\n      this.next();\n      return 2;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a class body\n   * ```ebnf\n   *   class_body ::= (member_flags? (T_VAR | T_STRING | T_FUNCTION))*\n   * ```\n   */\n  read_class_body: function read_class_body() {\n    var result = [];\n\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      } // check T_USE trait\n\n\n      if (this.token === this.tok.T_USE) {\n        result = result.concat(this.read_trait_use_statement());\n        continue;\n      } // read member flags\n\n\n      var flags = this.read_member_flags(false); // check constant\n\n      if (this.token === this.tok.T_CONST) {\n        var constants = this.read_constant_list(flags);\n\n        if (this.expect(\";\")) {\n          this.next();\n        }\n\n        result = result.concat(constants);\n        continue;\n      } // jump over T_VAR then land on T_VARIABLE\n\n\n      if (this.token === this.tok.T_VAR) {\n        this.next().expect(this.tok.T_VARIABLE);\n        flags[0] = null; // public (as null)\n\n        flags[1] = 0; // non static var\n      }\n\n      if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        result.push(this.read_function(false, flags));\n      } else if (this.token === this.tok.T_VARIABLE || // support https://wiki.php.net/rfc/typed_properties_v2\n      this.version >= 704 && (this.token === \"?\" || this.token === this.tok.T_CALLABLE || this.token === this.tok.T_ARRAY || this.token === this.tok.T_NS_SEPARATOR || this.token === this.tok.T_STRING || this.token === this.tok.T_NAMESPACE)) {\n        // reads a variable\n        var variables = this.read_variable_list(flags);\n        this.expect(\";\");\n        this.next();\n        result = result.concat(variables);\n      } else {\n        // raise an error\n        this.error([this.tok.T_CONST, this.tok.T_VARIABLE, this.tok.T_FUNCTION]); // ignore token\n\n        this.next();\n      }\n    }\n\n    this.expect(\"}\");\n    this.next();\n    return result;\n  },\n\n  /**\n   * Reads variable list\n   * ```ebnf\n   *  variable_list ::= (variable_declaration ',')* variable_declaration\n   * ```\n   */\n  read_variable_list: function read_variable_list(flags) {\n    var result = this.node(\"propertystatement\");\n    var properties = this.read_list(\n    /**\n     * Reads a variable declaration\n     *\n     * ```ebnf\n     *  variable_declaration ::= T_VARIABLE '=' scalar\n     * ```\n     */\n    function read_variable_declaration() {\n      var result = this.node(\"property\");\n\n      var _this$read_optional_t = this.read_optional_type(),\n          _this$read_optional_t2 = _slicedToArray(_this$read_optional_t, 2),\n          nullable = _this$read_optional_t2[0],\n          type = _this$read_optional_t2[1];\n\n      this.expect(this.tok.T_VARIABLE);\n      var propName = this.node(\"identifier\");\n      var name = this.text().substring(1); // ignore $\n\n      this.next();\n      propName = propName(name);\n\n      if (this.token === \";\" || this.token === \",\") {\n        return result(propName, null, nullable, type);\n      } else if (this.token === \"=\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L815\n        return result(propName, this.next().read_expr(), nullable, type);\n      } else {\n        this.expect([\",\", \";\", \"=\"]);\n        return result(propName, null, nullable, type);\n      }\n    }, \",\");\n    return result(null, properties, flags);\n  },\n\n  /**\n   * Reads constant list\n   * ```ebnf\n   *  constant_list ::= T_CONST (constant_declaration ',')* constant_declaration\n   * ```\n   */\n  read_constant_list: function read_constant_list(flags) {\n    if (this.expect(this.tok.T_CONST)) {\n      this.next();\n    }\n\n    var result = this.node(\"classconstant\");\n    var items = this.read_list(\n    /**\n     * Reads a constant declaration\n     *\n     * ```ebnf\n     *  constant_declaration ::= (T_STRING | IDENTIFIER) '=' expr\n     * ```\n     * @return {Constant} [:link:](AST.md#constant)\n     */\n    function read_constant_declaration() {\n      var result = this.node(\"constant\");\n      var constName = null;\n      var value = null;\n\n      if (this.token === this.tok.T_STRING || this.version >= 700 && this.is(\"IDENTIFIER\")) {\n        constName = this.node(\"identifier\");\n        var name = this.text();\n        this.next();\n        constName = constName(name);\n      } else {\n        this.expect(\"IDENTIFIER\");\n      }\n\n      if (this.expect(\"=\")) {\n        value = this.next().read_expr();\n      }\n\n      return result(constName, value);\n    }, \",\");\n    return result(null, items, flags);\n  },\n\n  /**\n   * Read member flags\n   * @return array\n   *  1st index : 0 => public, 1 => protected, 2 => private\n   *  2nd index : 0 => instance member, 1 => static member\n   *  3rd index : 0 => normal, 1 => abstract member, 2 => final member\n   */\n  read_member_flags: function read_member_flags(asInterface) {\n    var result = [-1, -1, -1];\n\n    if (this.is(\"T_MEMBER_FLAGS\")) {\n      var idx = 0,\n          val = 0;\n\n      do {\n        switch (this.token) {\n          case this.tok.T_PUBLIC:\n            idx = 0;\n            val = 0;\n            break;\n\n          case this.tok.T_PROTECTED:\n            idx = 0;\n            val = 1;\n            break;\n\n          case this.tok.T_PRIVATE:\n            idx = 0;\n            val = 2;\n            break;\n\n          case this.tok.T_STATIC:\n            idx = 1;\n            val = 1;\n            break;\n\n          case this.tok.T_ABSTRACT:\n            idx = 2;\n            val = 1;\n            break;\n\n          case this.tok.T_FINAL:\n            idx = 2;\n            val = 2;\n            break;\n        }\n\n        if (asInterface) {\n          if (idx == 0 && val == 2) {\n            // an interface can't be private\n            this.expect([this.tok.T_PUBLIC, this.tok.T_PROTECTED]);\n            val = -1;\n          } else if (idx == 2 && val == 1) {\n            // an interface cant be abstract\n            this.error();\n            val = -1;\n          }\n        }\n\n        if (result[idx] !== -1) {\n          // already defined flag\n          this.error();\n        } else if (val !== -1) {\n          result[idx] = val;\n        }\n      } while (this.next().is(\"T_MEMBER_FLAGS\"));\n    }\n\n    if (result[1] == -1) result[1] = 0;\n    if (result[2] == -1) result[2] = 0;\n    return result;\n  },\n\n  /**\n   * optional_type:\n   *\t  /- empty -/\t{ $$ = NULL; }\n   *   |\ttype_expr\t{ $$ = $1; }\n   * ;\n   *\n   * type_expr:\n   *\t\ttype\t\t{ $$ = $1; }\n   *\t|\t'?' type\t{ $$ = $2; $$->attr |= ZEND_TYPE_NULLABLE; }\n   *\t|\tunion_type\t{ $$ = $1; }\n   * ;\n   *\n   * type:\n   * \t\tT_ARRAY\t\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_ARRAY); }\n   * \t|\tT_CALLABLE\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_CALLABLE); }\n   * \t|\tname\t\t{ $$ = $1; }\n   * ;\n   *\n   * union_type:\n   * \t\ttype '|' type       { $$ = zend_ast_create_list(2, ZEND_AST_TYPE_UNION, $1, $3); }\n   * \t|\tunion_type '|' type { $$ = zend_ast_list_add($1, $3); }\n   * ;\n   */\n  read_optional_type: function read_optional_type() {\n    var nullable = false;\n\n    if (this.token === \"?\") {\n      nullable = true;\n      this.next();\n    }\n\n    var type = this.read_type();\n\n    if (nullable && !type) {\n      this.raiseError(\"Expecting a type definition combined with nullable operator\");\n    }\n\n    if (!nullable && !type) {\n      return [false, null];\n    }\n\n    if (this.token === \"|\") {\n      type = [type];\n\n      do {\n        this.next();\n        var variant = this.read_type();\n\n        if (!variant) {\n          this.raiseError(\"Expecting a type definition\");\n          break;\n        }\n\n        type.push(variant);\n      } while (this.token === \"|\");\n    }\n\n    return [nullable, type];\n  },\n\n  /**\n   * reading an interface\n   * ```ebnf\n   * interface ::= T_INTERFACE T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' INTERFACE_BODY '}'\n   * ```\n   */\n  read_interface_declaration_statement: function read_interface_declaration_statement() {\n    var result = this.node(\"interface\");\n\n    if (this.token !== this.tok.T_INTERFACE) {\n      this.error(this.tok.T_INTERFACE);\n      this.next();\n      return null;\n    }\n\n    this.next().expect(this.tok.T_STRING);\n    var propName = this.node(\"identifier\");\n    var name = this.text();\n    this.next();\n    propName = propName(name);\n    var propExtends = this.read_interface_extends_list();\n    this.expect(\"{\");\n    var body = this.next().read_interface_body();\n    return result(propName, propExtends, body);\n  },\n\n  /**\n   * Reads an interface body\n   * ```ebnf\n   *   interface_body ::= (member_flags? (T_CONST | T_FUNCTION))*\n   * ```\n   */\n  read_interface_body: function read_interface_body() {\n    var result = [];\n\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      } // read member flags\n\n\n      var flags = this.read_member_flags(true); // check constant\n\n      if (this.token == this.tok.T_CONST) {\n        var constants = this.read_constant_list(flags);\n\n        if (this.expect(\";\")) {\n          this.next();\n        }\n\n        result = result.concat(constants);\n      } else if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        var method = this.read_function_declaration(2, flags);\n        method.parseFlags(flags);\n        result.push(method);\n\n        if (this.expect(\";\")) {\n          this.next();\n        }\n      } else {\n        // raise an error\n        this.error([this.tok.T_CONST, this.tok.T_FUNCTION]);\n        this.next();\n      }\n    }\n\n    if (this.expect(\"}\")) {\n      this.next();\n    }\n\n    return result;\n  },\n\n  /**\n   * reading a trait\n   * ```ebnf\n   * trait ::= T_TRAIT T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' FUNCTION* '}'\n   * ```\n   */\n  read_trait_declaration_statement: function read_trait_declaration_statement() {\n    var result = this.node(\"trait\"); // graceful mode : ignore token & go next\n\n    if (this.token !== this.tok.T_TRAIT) {\n      this.error(this.tok.T_TRAIT);\n      this.next();\n      return null;\n    }\n\n    this.next().expect(this.tok.T_STRING);\n    var propName = this.node(\"identifier\");\n    var name = this.text();\n    this.next();\n    propName = propName(name);\n    this.expect(\"{\");\n    var body = this.next().read_class_body();\n    return result(propName, body);\n  },\n\n  /**\n   * reading a use statement\n   * ```ebnf\n   * trait_use_statement ::= namespace_name (',' namespace_name)* ('{' trait_use_alias '}')?\n   * ```\n   */\n  read_trait_use_statement: function read_trait_use_statement() {\n    // defines use statements\n    var node = this.node(\"traituse\");\n    this.expect(this.tok.T_USE) && this.next();\n    var traits = [this.read_namespace_name()];\n    var adaptations = null;\n\n    while (this.token === \",\") {\n      traits.push(this.next().read_namespace_name());\n    }\n\n    if (this.token === \"{\") {\n      adaptations = []; // defines alias statements\n\n      while (this.next().token !== this.EOF) {\n        if (this.token === \"}\") break;\n        adaptations.push(this.read_trait_use_alias());\n        this.expect(\";\");\n      }\n\n      if (this.expect(\"}\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    }\n\n    return node(traits, adaptations);\n  },\n\n  /**\n   * Reading trait alias\n   * ```ebnf\n   * trait_use_alias ::= namespace_name ( T_DOUBLE_COLON T_STRING )? (T_INSTEADOF namespace_name) | (T_AS member_flags? T_STRING)\n   * ```\n   * name list : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L303\n   * trait adaptation : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L742\n   */\n  read_trait_use_alias: function read_trait_use_alias() {\n    var node = this.node();\n    var trait = null;\n    var method;\n\n    if (this.is(\"IDENTIFIER\")) {\n      method = this.node(\"identifier\");\n      var methodName = this.text();\n      this.next();\n      method = method(methodName);\n    } else {\n      method = this.read_namespace_name();\n\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        this.next();\n\n        if (this.token === this.tok.T_STRING || this.version >= 700 && this.is(\"IDENTIFIER\")) {\n          trait = method;\n          method = this.node(\"identifier\");\n\n          var _methodName = this.text();\n\n          this.next();\n          method = method(_methodName);\n        } else {\n          this.expect(this.tok.T_STRING);\n        }\n      } else {\n        // convert identifier as string\n        method = method.name;\n      }\n    } // handle trait precedence\n\n\n    if (this.token === this.tok.T_INSTEADOF) {\n      return node(\"traitprecedence\", trait, method, this.next().read_name_list());\n    } else if (this.token === this.tok.T_AS) {\n      // handle trait alias\n      var flags = null;\n      var alias = null;\n\n      if (this.next().is(\"T_MEMBER_FLAGS\")) {\n        flags = this.read_member_flags();\n      }\n\n      if (this.token === this.tok.T_STRING || this.version >= 700 && this.is(\"IDENTIFIER\")) {\n        alias = this.node(\"identifier\");\n        var name = this.text();\n        this.next();\n        alias = alias(name);\n      } else if (flags === false) {\n        // no visibility flags and no name => too bad\n        this.expect(this.tok.T_STRING);\n      }\n\n      return node(\"traitalias\", trait, method, alias, flags);\n    } // handle errors\n\n\n    this.expect([this.tok.T_AS, this.tok.T_INSTEADOF]);\n    return node(\"traitalias\", trait, method, null, null);\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar comment = {\n  /**\n   *  Comments with // or # or / * ... * /\n   */\n  read_comment: function read_comment() {\n    var text = this.text();\n    var result = this.ast.prepare(text.substring(0, 2) === \"/*\" ? \"commentblock\" : \"commentline\", null, this);\n    var offset = this.lexer.yylloc.first_offset; // handle location on comment\n\n    var prev = this.prev;\n    this.prev = [this.lexer.yylloc.last_line, this.lexer.yylloc.last_column, this.lexer.offset];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n\n  /**\n   * Comments with / ** ... * /\n   */\n  read_doc_comment: function read_doc_comment() {\n    var result = this.ast.prepare(\"commentblock\", null, this);\n    var offset = this.lexer.yylloc.first_offset;\n    var text = this.text();\n    var prev = this.prev;\n    this.prev = [this.lexer.yylloc.last_line, this.lexer.yylloc.last_column, this.lexer.offset];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar expr = {\n  read_expr: function read_expr(expr) {\n    var result = this.node();\n\n    if (this.token === \"@\") {\n      if (!expr) {\n        expr = this.next().read_expr();\n      }\n\n      return result(\"silent\", expr);\n    }\n\n    if (!expr) {\n      expr = this.read_expr_item();\n    } // binary operations\n\n\n    if (this.token === \"|\") return result(\"bin\", \"|\", expr, this.next().read_expr());\n    if (this.token === \"&\") return result(\"bin\", \"&\", expr, this.next().read_expr());\n    if (this.token === \"^\") return result(\"bin\", \"^\", expr, this.next().read_expr());\n    if (this.token === \".\") return result(\"bin\", \".\", expr, this.next().read_expr());\n    if (this.token === \"+\") return result(\"bin\", \"+\", expr, this.next().read_expr());\n    if (this.token === \"-\") return result(\"bin\", \"-\", expr, this.next().read_expr());\n    if (this.token === \"*\") return result(\"bin\", \"*\", expr, this.next().read_expr());\n    if (this.token === \"/\") return result(\"bin\", \"/\", expr, this.next().read_expr());\n    if (this.token === \"%\") return result(\"bin\", \"%\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_POW) return result(\"bin\", \"**\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SL) return result(\"bin\", \"<<\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SR) return result(\"bin\", \">>\", expr, this.next().read_expr()); // more binary operations (formerly bool)\n\n    if (this.token === this.tok.T_BOOLEAN_OR) return result(\"bin\", \"||\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_OR) return result(\"bin\", \"or\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_BOOLEAN_AND) return result(\"bin\", \"&&\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_AND) return result(\"bin\", \"and\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_XOR) return result(\"bin\", \"xor\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_IDENTICAL) return result(\"bin\", \"===\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_NOT_IDENTICAL) return result(\"bin\", \"!==\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_EQUAL) return result(\"bin\", \"==\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_NOT_EQUAL) return result(\"bin\", \"!=\", expr, this.next().read_expr());\n    if (this.token === \"<\") return result(\"bin\", \"<\", expr, this.next().read_expr());\n    if (this.token === \">\") return result(\"bin\", \">\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_SMALLER_OR_EQUAL) return result(\"bin\", \"<=\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_GREATER_OR_EQUAL) return result(\"bin\", \">=\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SPACESHIP) return result(\"bin\", \"<=>\", expr, this.next().read_expr());\n\n    if (this.token === this.tok.T_INSTANCEOF) {\n      expr = result(\"bin\", \"instanceof\", expr, this.next().read_class_name_reference());\n\n      if (this.token !== \";\" && this.token !== this.tok.T_INLINE_HTML && this.token !== this.EOF) {\n        expr = this.read_expr(expr);\n      }\n    } // extra operations :\n    // $username = $_GET['user'] ?? 'nobody';\n\n\n    if (this.token === this.tok.T_COALESCE) return result(\"bin\", \"??\", expr, this.next().read_expr()); // extra operations :\n    // $username = $_GET['user'] ? true : false;\n\n    if (this.token === \"?\") {\n      var trueArg = null;\n\n      if (this.next().token !== \":\") {\n        trueArg = this.read_expr();\n      }\n\n      this.expect(\":\") && this.next();\n      return result(\"retif\", expr, trueArg, this.read_expr());\n    } else {\n      // see #193\n      result.destroy(expr);\n    }\n\n    return expr;\n  },\n\n  /**\n   * Reads a cast expression\n   */\n  read_expr_cast: function read_expr_cast(type) {\n    return this.node(\"cast\")(type, this.text(), this.next().read_expr());\n  },\n\n  /**\n   * Read a isset variable\n   */\n  read_isset_variable: function read_isset_variable() {\n    return this.read_expr();\n  },\n\n  /**\n   * Reads isset variables\n   */\n  read_isset_variables: function read_isset_variables() {\n    return this.read_function_list(this.read_isset_variable, \",\");\n  },\n\n  /*\n   * Reads internal PHP functions\n   */\n  read_internal_functions_in_yacc: function read_internal_functions_in_yacc() {\n    var result = null;\n\n    switch (this.token) {\n      case this.tok.T_ISSET:\n        {\n          result = this.node(\"isset\");\n\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n\n          var variables = this.read_isset_variables();\n\n          if (this.expect(\")\")) {\n            this.next();\n          }\n\n          result = result(variables);\n        }\n        break;\n\n      case this.tok.T_EMPTY:\n        {\n          result = this.node(\"empty\");\n\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n\n          var expression = this.read_expr();\n\n          if (this.expect(\")\")) {\n            this.next();\n          }\n\n          result = result(expression);\n        }\n        break;\n\n      case this.tok.T_INCLUDE:\n        result = this.node(\"include\")(false, false, this.next().read_expr());\n        break;\n\n      case this.tok.T_INCLUDE_ONCE:\n        result = this.node(\"include\")(true, false, this.next().read_expr());\n        break;\n\n      case this.tok.T_EVAL:\n        {\n          result = this.node(\"eval\");\n\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n\n          var _expr = this.read_expr();\n\n          if (this.expect(\")\")) {\n            this.next();\n          }\n\n          result = result(_expr);\n        }\n        break;\n\n      case this.tok.T_REQUIRE:\n        result = this.node(\"include\")(false, true, this.next().read_expr());\n        break;\n\n      case this.tok.T_REQUIRE_ONCE:\n        result = this.node(\"include\")(true, true, this.next().read_expr());\n        break;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads optional expression\n   */\n  read_optional_expr: function read_optional_expr(stopToken) {\n    if (this.token !== stopToken) {\n      return this.read_expr();\n    }\n\n    return null;\n  },\n\n  /**\n   * Reads exit expression\n   */\n  read_exit_expr: function read_exit_expr() {\n    var expression = null;\n\n    if (this.token === \"(\") {\n      this.next();\n      expression = this.read_optional_expr(\")\");\n      this.expect(\")\") && this.next();\n    }\n\n    return expression;\n  },\n\n  /**\n   * ```ebnf\n   * Reads an expression\n   *  expr ::= @todo\n   * ```\n   */\n  read_expr_item: function read_expr_item() {\n    var result, expr;\n    if (this.token === \"+\") return this.node(\"unary\")(\"+\", this.next().read_expr());\n    if (this.token === \"-\") return this.node(\"unary\")(\"-\", this.next().read_expr());\n    if (this.token === \"!\") return this.node(\"unary\")(\"!\", this.next().read_expr());\n    if (this.token === \"~\") return this.node(\"unary\")(\"~\", this.next().read_expr());\n\n    if (this.token === \"(\") {\n      expr = this.next().read_expr();\n      expr.parenthesizedExpression = true;\n      this.expect(\")\") && this.next();\n      return this.handleDereferencable(expr);\n    }\n\n    if (this.token === \"`\") {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1048\n      return this.read_encapsed_string(\"`\");\n    }\n\n    if (this.token === this.tok.T_LIST) {\n      var assign = null;\n      var isInner = this.innerList;\n      result = this.node(\"list\");\n\n      if (!isInner) {\n        assign = this.node(\"assign\");\n      }\n\n      if (this.next().expect(\"(\")) {\n        this.next();\n      }\n\n      if (!this.innerList) this.innerList = true; // reads inner items\n\n      var assignList = this.read_array_pair_list(false);\n\n      if (this.expect(\")\")) {\n        this.next();\n      } // check if contains at least one assignment statement\n\n\n      var hasItem = false;\n\n      for (var i = 0; i < assignList.length; i++) {\n        if (assignList[i] !== null && assignList[i].kind !== \"noop\") {\n          hasItem = true;\n          break;\n        }\n      }\n\n      if (!hasItem) {\n        this.raiseError(\"Fatal Error :  Cannot use empty list on line \" + this.lexer.yylloc.first_line);\n      } // handles the node resolution\n\n\n      if (!isInner) {\n        this.innerList = false;\n\n        if (this.expect(\"=\")) {\n          return assign(result(assignList, false), this.next().read_expr(), \"=\");\n        } else {\n          // error fallback : list($a, $b);\n          return result(assignList, false);\n        }\n      } else {\n        return result(assignList, false);\n      }\n    }\n\n    if (this.token === this.tok.T_CLONE) return this.node(\"clone\")(this.next().read_expr());\n\n    switch (this.token) {\n      case this.tok.T_INC:\n        return this.node(\"pre\")(\"+\", this.next().read_variable(false, false));\n\n      case this.tok.T_DEC:\n        return this.node(\"pre\")(\"-\", this.next().read_variable(false, false));\n\n      case this.tok.T_NEW:\n        return this.read_new_expr();\n\n      case this.tok.T_ISSET:\n      case this.tok.T_EMPTY:\n      case this.tok.T_INCLUDE:\n      case this.tok.T_INCLUDE_ONCE:\n      case this.tok.T_EVAL:\n      case this.tok.T_REQUIRE:\n      case this.tok.T_REQUIRE_ONCE:\n        return this.read_internal_functions_in_yacc();\n\n      case this.tok.T_INT_CAST:\n        return this.read_expr_cast(\"int\");\n\n      case this.tok.T_DOUBLE_CAST:\n        return this.read_expr_cast(\"float\");\n\n      case this.tok.T_STRING_CAST:\n        return this.read_expr_cast(this.text().indexOf(\"binary\") !== -1 ? \"binary\" : \"string\");\n\n      case this.tok.T_ARRAY_CAST:\n        return this.read_expr_cast(\"array\");\n\n      case this.tok.T_OBJECT_CAST:\n        return this.read_expr_cast(\"object\");\n\n      case this.tok.T_BOOL_CAST:\n        return this.read_expr_cast(\"bool\");\n\n      case this.tok.T_UNSET_CAST:\n        return this.read_expr_cast(\"unset\");\n\n      case this.tok.T_EXIT:\n        {\n          var useDie = this.lexer.yytext.toLowerCase() === \"die\";\n          result = this.node(\"exit\");\n          this.next();\n          var expression = this.read_exit_expr();\n          return result(expression, useDie);\n        }\n\n      case this.tok.T_PRINT:\n        return this.node(\"print\")(this.next().read_expr());\n      // T_YIELD (expr (T_DOUBLE_ARROW expr)?)?\n\n      case this.tok.T_YIELD:\n        {\n          var value = null;\n          var key = null;\n          result = this.node(\"yield\");\n\n          if (this.next().is(\"EXPR\")) {\n            // reads the yield return value\n            value = this.read_expr();\n\n            if (this.token === this.tok.T_DOUBLE_ARROW) {\n              // reads the yield returned key\n              key = value;\n              value = this.next().read_expr();\n            }\n          }\n\n          return result(value, key);\n        }\n      // T_YIELD_FROM expr\n\n      case this.tok.T_YIELD_FROM:\n        result = this.node(\"yieldfrom\");\n        expr = this.next().read_expr();\n        return result(expr);\n\n      case this.tok.T_FN:\n      case this.tok.T_FUNCTION:\n        return this.read_inline_function();\n\n      case this.tok.T_STATIC:\n        {\n          var backup = [this.token, this.lexer.getState()];\n          this.next();\n\n          if (this.token === this.tok.T_FUNCTION || this.version >= 704 && this.token === this.tok.T_FN) {\n            // handles static function\n            return this.read_inline_function([0, 1, 0]);\n          } else {\n            // rollback\n            this.lexer.tokens.push(backup);\n            this.next();\n          }\n        }\n    } // SCALAR | VARIABLE\n\n\n    if (this.is(\"VARIABLE\")) {\n      result = this.node();\n      expr = this.read_variable(false, false); // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L877\n      // should accept only a variable\n\n      var isConst = expr.kind === \"identifier\" || expr.kind === \"staticlookup\" && expr.offset.kind === \"identifier\"; // VARIABLES SPECIFIC OPERATIONS\n\n      switch (this.token) {\n        case \"=\":\n          {\n            if (isConst) this.error(\"VARIABLE\");\n\n            if (this.next().token == \"&\") {\n              return this.read_assignref(result, expr);\n            }\n\n            return result(\"assign\", expr, this.read_expr(), \"=\");\n          }\n        // operations :\n\n        case this.tok.T_PLUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"+=\");\n\n        case this.tok.T_MINUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"-=\");\n\n        case this.tok.T_MUL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"*=\");\n\n        case this.tok.T_POW_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"**=\");\n\n        case this.tok.T_DIV_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"/=\");\n\n        case this.tok.T_CONCAT_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \".=\");\n\n        case this.tok.T_MOD_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"%=\");\n\n        case this.tok.T_AND_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"&=\");\n\n        case this.tok.T_OR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"|=\");\n\n        case this.tok.T_XOR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"^=\");\n\n        case this.tok.T_SL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"<<=\");\n\n        case this.tok.T_SR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \">>=\");\n\n        case this.tok.T_COALESCE_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"??=\");\n\n        case this.tok.T_INC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"+\", expr);\n\n        case this.tok.T_DEC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"-\", expr);\n\n        default:\n          // see #193\n          result.destroy(expr);\n      }\n    } else if (this.is(\"SCALAR\")) {\n      result = this.node();\n      expr = this.read_scalar();\n\n      if (expr.kind === \"array\" && expr.shortForm && this.token === \"=\") {\n        // list assign\n        var list = this.node(\"list\")(expr.items, true);\n        if (expr.loc) list.loc = expr.loc;\n        var right = this.next().read_expr();\n        return result(\"assign\", list, right, \"=\");\n      } else {\n        // see #189 - swap docs on nodes\n        result.destroy(expr);\n      } // classic array\n\n\n      return this.handleDereferencable(expr);\n    } else {\n      this.error(\"EXPR\");\n      this.next();\n    } // returns variable | scalar\n\n\n    return expr;\n  },\n\n  /**\n   * Reads assignment\n   * @param {*} left\n   */\n  read_assignref: function read_assignref(result, left) {\n    this.next();\n    var right;\n\n    if (this.token === this.tok.T_NEW) {\n      if (this.version >= 700) {\n        this.error();\n      }\n\n      right = this.read_new_expr();\n    } else {\n      right = this.read_variable(false, false);\n    }\n\n    return result(\"assignref\", left, right);\n  },\n\n  /**\n   *\n   * inline_function:\n   * \t\tfunction returns_ref backup_doc_comment '(' parameter_list ')' lexical_vars return_type\n   * \t\tbackup_fn_flags '{' inner_statement_list '}' backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_CLOSURE, $2 | $13, $1, $3,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0),\n   * \t\t\t\t  $5, $7, $11, $8); CG(extra_fn_flags) = $9; }\n   * \t|\tfn returns_ref '(' parameter_list ')' return_type backup_doc_comment T_DOUBLE_ARROW backup_fn_flags backup_lex_pos expr backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_ARROW_FUNC, $2 | $12, $1, $7,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0), $4, NULL,\n   * \t\t\t\t  zend_ast_create(ZEND_AST_RETURN, $11), $6);\n   * \t\t\t\t  ((zend_ast_decl *) $$)->lex_pos = $10;\n   * \t\t\t\t  CG(extra_fn_flags) = $9; }   *\n   */\n  read_inline_function: function read_inline_function(flags) {\n    if (this.token === this.tok.T_FUNCTION) {\n      return this.read_function(true, flags);\n    } // introduced in PHP 7.4\n\n\n    if (!this.version >= 704) {\n      this.raiseError(\"Arrow Functions are not allowed\");\n    } // as an arrowfunc\n\n\n    var node = this.node(\"arrowfunc\"); // eat T_FN\n\n    if (this.expect(this.tok.T_FN)) this.next(); // check the &\n\n    var isRef = this.is_reference(); // ...\n\n    if (this.expect(\"(\")) this.next();\n    var params = this.read_parameter_list();\n    if (this.expect(\")\")) this.next();\n    var nullable = false;\n    var returnType = null;\n\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n\n      returnType = this.read_type();\n    }\n\n    if (this.expect(this.tok.T_DOUBLE_ARROW)) this.next();\n    var body = this.read_expr();\n    return node(params, isRef, body, returnType, nullable, flags ? true : false);\n  },\n\n  /**\n   * ```ebnf\n   *    new_expr ::= T_NEW (namespace_name function_argument_list) | (T_CLASS ... class declaration)\n   * ```\n   * https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L850\n   */\n  read_new_expr: function read_new_expr() {\n    var result = this.node(\"new\");\n    this.expect(this.tok.T_NEW) && this.next();\n    var args = [];\n\n    if (this.token === this.tok.T_CLASS) {\n      var what = this.node(\"class\"); // Annonymous class declaration\n\n      if (this.next().token === \"(\") {\n        args = this.read_argument_list();\n      }\n\n      var propExtends = this.read_extends_from();\n      var propImplements = this.read_implements_list();\n      var body = null;\n\n      if (this.expect(\"{\")) {\n        body = this.next().read_class_body();\n      }\n\n      return result(what(null, propExtends, propImplements, body, [0, 0, 0]), args);\n    } // Already existing class\n\n\n    var name = this.read_new_class_name();\n\n    if (this.token === \"(\") {\n      args = this.read_argument_list();\n    }\n\n    return result(name, args);\n  },\n\n  /**\n   * Reads a class name\n   * ```ebnf\n   * read_new_class_name ::= namespace_name | variable\n   * ```\n   */\n  read_new_class_name: function read_new_class_name() {\n    if (this.token === this.tok.T_NS_SEPARATOR || this.token === this.tok.T_STRING || this.token === this.tok.T_NAMESPACE) {\n      var result = this.read_namespace_name(true);\n\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        result = this.read_static_getter(result);\n      }\n\n      return result;\n    } else if (this.is(\"VARIABLE\")) {\n      return this.read_variable(true, false);\n    } else {\n      this.expect([this.tok.T_STRING, \"VARIABLE\"]);\n    }\n  },\n  handleDereferencable: function handleDereferencable(expr) {\n    while (this.token !== this.EOF) {\n      if (this.token === this.tok.T_OBJECT_OPERATOR || this.token === this.tok.T_DOUBLE_COLON) {\n        expr = this.recursive_variable_chain_scan(expr, false, false, true);\n      } else if (this.token === this.tok.T_CURLY_OPEN || this.token === \"[\") {\n        expr = this.read_dereferencable(expr);\n      } else if (this.token === \"(\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1118\n        expr = this.node(\"call\")(expr, this.read_argument_list());\n      } else {\n        return expr;\n      }\n    }\n\n    return expr;\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _function = {\n  /**\n   * checks if current token is a reference keyword\n   */\n  is_reference: function is_reference() {\n    if (this.token == \"&\") {\n      this.next();\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * checks if current token is a variadic keyword\n   */\n  is_variadic: function is_variadic() {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * reading a function\n   * ```ebnf\n   * function ::= function_declaration code_block\n   * ```\n   */\n  read_function: function read_function(closure, flag) {\n    var result = this.read_function_declaration(closure ? 1 : flag ? 2 : 0, flag && flag[1] === 1);\n\n    if (flag && flag[2] == 1) {\n      // abstract function :\n      result.parseFlags(flag);\n\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\"{\")) {\n        result.body = this.read_code_block(false);\n\n        if (result.loc && result.body.loc) {\n          result.loc.end = result.body.loc.end;\n        }\n      }\n\n      if (!closure && flag) {\n        result.parseFlags(flag);\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * reads a function declaration (without his body)\n   * ```ebnf\n   * function_declaration ::= T_FUNCTION '&'?  T_STRING '(' parameter_list ')'\n   * ```\n   */\n  read_function_declaration: function read_function_declaration(type, isStatic) {\n    var nodeName = \"function\";\n\n    if (type === 1) {\n      nodeName = \"closure\";\n    } else if (type === 2) {\n      nodeName = \"method\";\n    }\n\n    var result = this.node(nodeName);\n\n    if (this.expect(this.tok.T_FUNCTION)) {\n      this.next();\n    }\n\n    var isRef = this.is_reference();\n    var name = false,\n        use = [],\n        returnType = null,\n        nullable = false;\n\n    if (type !== 1) {\n      var nameNode = this.node(\"identifier\");\n\n      if (type === 2) {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING || this.is(\"IDENTIFIER\")) {\n            name = this.text();\n            this.next();\n          } else if (this.version < 704) {\n            this.error(\"IDENTIFIER\");\n          }\n        } else if (this.token === this.tok.T_STRING) {\n          name = this.text();\n          this.next();\n        } else {\n          this.error(\"IDENTIFIER\");\n        }\n      } else {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING) {\n            name = this.text();\n            this.next();\n          } else if (this.version >= 704) {\n            if (!this.expect(\"(\")) {\n              this.next();\n            }\n          } else {\n            this.error(this.tok.T_STRING);\n            this.next();\n          }\n        } else {\n          if (this.expect(this.tok.T_STRING)) {\n            name = this.text();\n          }\n\n          this.next();\n        }\n      }\n\n      name = nameNode(name);\n    }\n\n    if (this.expect(\"(\")) this.next();\n    var params = this.read_parameter_list();\n    if (this.expect(\")\")) this.next();\n\n    if (type === 1) {\n      use = this.read_lexical_vars();\n    }\n\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n\n      returnType = this.read_type();\n    }\n\n    if (type === 1) {\n      // closure\n      return result(params, isRef, use, returnType, nullable, isStatic);\n    }\n\n    return result(name, params, isRef, returnType, nullable);\n  },\n  read_lexical_vars: function read_lexical_vars() {\n    var result = [];\n\n    if (this.token === this.tok.T_USE) {\n      this.next();\n      this.expect(\"(\") && this.next();\n      result = this.read_lexical_var_list();\n      this.expect(\")\") && this.next();\n    }\n\n    return result;\n  },\n  read_lexical_var_list: function read_lexical_var_list() {\n    return this.read_list(this.read_lexical_var, \",\");\n  },\n\n  /**\n   * ```ebnf\n   * lexical_var ::= '&'? T_VARIABLE\n   * ```\n   */\n  read_lexical_var: function read_lexical_var() {\n    if (this.token === \"&\") {\n      return this.read_byref(this.read_lexical_var.bind(this));\n    }\n\n    var result = this.node(\"variable\");\n    this.expect(this.tok.T_VARIABLE);\n    var name = this.text().substring(1);\n    this.next();\n    return result(name, false);\n  },\n\n  /**\n   * reads a list of parameters\n   * ```ebnf\n   *  parameter_list ::= (parameter ',')* parameter?\n   * ```\n   */\n  read_parameter_list: function read_parameter_list() {\n    var result = [];\n\n    if (this.token != \")\") {\n      while (this.token != this.EOF) {\n        result.push(this.read_parameter());\n\n        if (this.token == \",\") {\n          this.next();\n        } else if (this.token == \")\") {\n          break;\n        } else {\n          this.error([\",\", \")\"]);\n          break;\n        }\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * ```ebnf\n   *  parameter ::= type? '&'? T_ELLIPSIS? T_VARIABLE ('=' expr)?\n   * ```\n   * @see https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L640\n   */\n  read_parameter: function read_parameter() {\n    var node = this.node(\"parameter\");\n    var parameterName = null;\n    var value = null;\n    var type = null;\n    var nullable = false;\n\n    if (this.token === \"?\") {\n      this.next();\n      nullable = true;\n    }\n\n    type = this.read_type();\n\n    if (nullable && !type) {\n      this.raiseError(\"Expecting a type definition combined with nullable operator\");\n    }\n\n    var isRef = this.is_reference();\n    var isVariadic = this.is_variadic();\n\n    if (this.expect(this.tok.T_VARIABLE)) {\n      parameterName = this.node(\"identifier\");\n      var name = this.text().substring(1);\n      this.next();\n      parameterName = parameterName(name);\n    }\n\n    if (this.token == \"=\") {\n      value = this.next().read_expr();\n    }\n\n    return node(parameterName, type, value, isRef, isVariadic, nullable);\n  },\n\n  /**\n   * Reads a list of arguments\n   * ```ebnf\n   *  function_argument_list ::= '(' (argument_list (',' argument_list)*)? ')'\n   * ```\n   */\n  read_argument_list: function read_argument_list() {\n    var result = [];\n    this.expect(\"(\") && this.next();\n\n    if (this.token !== \")\") {\n      result = this.read_non_empty_argument_list();\n    }\n\n    this.expect(\")\") && this.next();\n    return result;\n  },\n\n  /**\n   * Reads non empty argument list\n   */\n  read_non_empty_argument_list: function read_non_empty_argument_list() {\n    var wasVariadic = false;\n    return this.read_function_list(function () {\n      var argument = this.read_argument();\n\n      if (argument) {\n        if (wasVariadic) {\n          this.raiseError(\"Unexpected argument after a variadic argument\");\n        }\n\n        if (argument.kind === \"variadic\") {\n          wasVariadic = true;\n        }\n      }\n\n      return argument;\n    }.bind(this), \",\");\n  },\n\n  /**\n   * ```ebnf\n   *    argument_list ::= T_ELLIPSIS? expr\n   * ```\n   */\n  read_argument: function read_argument() {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      return this.node(\"variadic\")(this.next().read_expr());\n    }\n\n    return this.read_expr();\n  },\n\n  /**\n   * read type hinting\n   * ```ebnf\n   *  type ::= T_ARRAY | T_CALLABLE | namespace_name\n   * ```\n   */\n  read_type: function read_type() {\n    var result = this.node();\n\n    if (this.token === this.tok.T_ARRAY || this.token === this.tok.T_CALLABLE) {\n      var type = this.text();\n      this.next();\n      return result(\"typereference\", type.toLowerCase(), type);\n    } else if (this.token === this.tok.T_STRING) {\n      var _type = this.text();\n\n      var backup = [this.token, this.lexer.getState()];\n      this.next();\n\n      if (this.token !== this.tok.T_NS_SEPARATOR && this.ast.typereference.types.indexOf(_type.toLowerCase()) > -1) {\n        return result(\"typereference\", _type.toLowerCase(), _type);\n      } else {\n        // rollback a classic namespace\n        this.lexer.tokens.push(backup);\n        this.next(); // fix : destroy not consumed node (release comments)\n\n        result.destroy();\n        return this.read_namespace_name();\n      }\n    } else if (this.token === this.tok.T_NAMESPACE || this.token === this.tok.T_NS_SEPARATOR) {\n      // fix : destroy not consumed node (release comments)\n      result.destroy();\n      return this.read_namespace_name();\n    } // fix : destroy not consumed node (release comments)\n\n\n    result.destroy();\n    return null;\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _if = {\n  /**\n   * Reads an IF statement\n   *\n   * ```ebnf\n   *  if ::= T_IF '(' expr ')' ':' ...\n   * ```\n   */\n  read_if: function read_if() {\n    var result = this.node(\"if\");\n    var test = this.next().read_if_expr();\n    var body = null;\n    var alternate = null;\n    var shortForm = false;\n\n    if (this.token === \":\") {\n      shortForm = true;\n      this.next();\n      body = this.node(\"block\");\n      var items = [];\n\n      while (this.token !== this.EOF && this.token !== this.tok.T_ENDIF) {\n        if (this.token === this.tok.T_ELSEIF) {\n          alternate = this.read_elseif_short();\n          break;\n        } else if (this.token === this.tok.T_ELSE) {\n          alternate = this.read_else_short();\n          break;\n        }\n\n        items.push(this.read_inner_statement());\n      }\n\n      body = body(null, items);\n      this.expect(this.tok.T_ENDIF) && this.next();\n      this.expectEndOfStatement();\n    } else {\n      body = this.read_statement();\n\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_if();\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.next().read_statement();\n      }\n    }\n\n    return result(test, body, alternate, shortForm);\n  },\n\n  /**\n   * reads an if expression : '(' expr ')'\n   */\n  read_if_expr: function read_if_expr() {\n    this.expect(\"(\") && this.next();\n    var result = this.read_expr();\n    this.expect(\")\") && this.next();\n    return result;\n  },\n\n  /**\n   * reads an elseif (expr): statements\n   */\n  read_elseif_short: function read_elseif_short() {\n    var alternate = null;\n    var result = this.node(\"if\");\n    var test = this.next().read_if_expr();\n    if (this.expect(\":\")) this.next();\n    var body = this.node(\"block\");\n    var items = [];\n\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_elseif_short();\n        break;\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.read_else_short();\n        break;\n      }\n\n      items.push(this.read_inner_statement());\n    }\n\n    return result(test, body(null, items), alternate, true);\n  },\n\n  /**\n   *\n   */\n  read_else_short: function read_else_short() {\n    if (this.next().expect(\":\")) this.next();\n    var body = this.node(\"block\");\n    var items = [];\n\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      items.push(this.read_inner_statement());\n    }\n\n    return body(null, items);\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar loops = {\n  /**\n   * Reads a while statement\n   * ```ebnf\n   * while ::= T_WHILE (statement | ':' inner_statement_list T_ENDWHILE ';')\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L587\n   * @return {While}\n   */\n  read_while: function read_while() {\n    var result = this.node(\"while\");\n    this.expect(this.tok.T_WHILE) && this.next();\n    var test = null;\n    var body = null;\n    var shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    test = this.read_expr();\n    if (this.expect(\")\")) this.next();\n\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDWHILE);\n    } else {\n      body = this.read_statement();\n    }\n\n    return result(test, body, shortForm);\n  },\n\n  /**\n   * Reads a do / while loop\n   * ```ebnf\n   * do ::= T_DO statement T_WHILE '(' expr ')' ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L423\n   * @return {Do}\n   */\n  read_do: function read_do() {\n    var result = this.node(\"do\");\n    this.expect(this.tok.T_DO) && this.next();\n    var test = null;\n    var body = null;\n    body = this.read_statement();\n\n    if (this.expect(this.tok.T_WHILE)) {\n      if (this.next().expect(\"(\")) this.next();\n      test = this.read_expr();\n      if (this.expect(\")\")) this.next();\n      if (this.expect(\";\")) this.next();\n    }\n\n    return result(test, body);\n  },\n\n  /**\n   * Read a for incremental loop\n   * ```ebnf\n   * for ::= T_FOR '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement\n   * for_statement ::= statement | ':' inner_statement_list T_ENDFOR ';'\n   * for_exprs ::= expr? (',' expr)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L425\n   * @return {For}\n   */\n  read_for: function read_for() {\n    var result = this.node(\"for\");\n    this.expect(this.tok.T_FOR) && this.next();\n    var init = [];\n    var test = [];\n    var increment = [];\n    var body = null;\n    var shortForm = false;\n    if (this.expect(\"(\")) this.next();\n\n    if (this.token !== \";\") {\n      init = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n\n    if (this.token !== \";\") {\n      test = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n\n    if (this.token !== \")\") {\n      increment = this.read_list(this.read_expr, \",\");\n      if (this.expect(\")\")) this.next();\n    } else {\n      this.next();\n    }\n\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOR);\n    } else {\n      body = this.read_statement();\n    }\n\n    return result(init, test, increment, body, shortForm);\n  },\n\n  /**\n   * Reads a foreach loop\n   * ```ebnf\n   * foreach ::= '(' expr T_AS foreach_variable (T_DOUBLE_ARROW foreach_variable)? ')' statement\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L438\n   * @return {Foreach}\n   */\n  read_foreach: function read_foreach() {\n    var result = this.node(\"foreach\");\n    this.expect(this.tok.T_FOREACH) && this.next();\n    var source = null;\n    var key = null;\n    var value = null;\n    var body = null;\n    var shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    source = this.read_expr();\n\n    if (this.expect(this.tok.T_AS)) {\n      this.next();\n      value = this.read_foreach_variable();\n\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        key = value;\n        value = this.next().read_foreach_variable();\n      }\n    } // grammatically correct but not supported by PHP\n\n\n    if (key && key.kind === \"list\") {\n      this.raiseError(\"Fatal Error : Cannot use list as key element\");\n    }\n\n    if (this.expect(\")\")) this.next();\n\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOREACH);\n    } else {\n      body = this.read_statement();\n    }\n\n    return result(source, key, value, body, shortForm);\n  },\n\n  /**\n   * Reads a foreach variable statement\n   * ```ebnf\n   * foreach_variable =\n   *    variable |\n   *    '&' variable |\n   *    T_LIST '(' assignment_list ')' |\n   *    '[' assignment_list ']'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L544\n   * @return {Expression}\n   */\n  read_foreach_variable: function read_foreach_variable() {\n    if (this.token === this.tok.T_LIST || this.token === \"[\") {\n      var isShort = this.token === \"[\";\n      var result = this.node(\"list\");\n      this.next();\n      if (!isShort && this.expect(\"(\")) this.next();\n      var assignList = this.read_array_pair_list(isShort);\n      if (this.expect(isShort ? \"]\" : \")\")) this.next();\n      return result(assignList, isShort);\n    } else {\n      return this.read_variable(false, false);\n    }\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar main = {\n  /**\n   * ```ebnf\n   * start ::= (namespace | top_statement)*\n   * ```\n   */\n  read_start: function read_start() {\n    if (this.token == this.tok.T_NAMESPACE) {\n      return this.read_namespace();\n    } else {\n      return this.read_top_statement();\n    }\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar namespace = {\n  /**\n   * Reads a namespace declaration block\n   * ```ebnf\n   * namespace ::= T_NAMESPACE namespace_name? '{'\n   *    top_statements\n   * '}'\n   * | T_NAMESPACE namespace_name ';' top_statements\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.php\n   * @return {Namespace}\n   */\n  read_namespace: function read_namespace() {\n    var result = this.node(\"namespace\");\n    var body;\n    this.expect(this.tok.T_NAMESPACE) && this.next();\n    var name;\n\n    if (this.token == \"{\") {\n      name = {\n        name: [\"\"]\n      };\n    } else {\n      name = this.read_namespace_name();\n    }\n\n    this.currentNamespace = name;\n\n    if (this.token == \";\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(this.EOF);\n      return result(name.name, body, false);\n    } else if (this.token == \"{\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(\"}\") && this.next();\n\n      if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n        body.push(this.node(\"noop\")());\n      }\n\n      return result(name.name, body, true);\n    } else if (this.token === \"(\") {\n      // @fixme after merging #478\n      name.resolution = this.ast.reference.RELATIVE_NAME;\n      name.name = name.name.substring(1);\n      result.destroy();\n      return this.node(\"call\")(name, this.read_argument_list());\n    } else {\n      this.error([\"{\", \";\"]); // graceful mode :\n\n      this.currentNamespace = name;\n      body = this.read_top_statements();\n      this.expect(this.EOF);\n      return result(name, body, false);\n    }\n  },\n\n  /**\n   * Reads a namespace name\n   * ```ebnf\n   *  namespace_name ::= T_NS_SEPARATOR? (T_STRING T_NS_SEPARATOR)* T_STRING\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.rules.php\n   * @return {Reference}\n   */\n  read_namespace_name: function read_namespace_name(resolveReference) {\n    var result = this.node();\n    var relative = false;\n\n    if (this.token === this.tok.T_NAMESPACE) {\n      this.next().expect(this.tok.T_NS_SEPARATOR) && this.next();\n      relative = true;\n    }\n\n    var names = this.read_list(this.tok.T_STRING, this.tok.T_NS_SEPARATOR, true);\n\n    if (!relative && names.length === 1 && (resolveReference || this.token !== \"(\")) {\n      if (names[0].toLowerCase() === \"parent\") {\n        return result(\"parentreference\", names[0]);\n      } else if (names[0].toLowerCase() === \"self\") {\n        return result(\"selfreference\", names[0]);\n      }\n    }\n\n    return result(\"name\", names, relative);\n  },\n\n  /**\n   * Reads a use statement\n   * ```ebnf\n   * use_statement ::= T_USE\n   *   use_type? use_declarations |\n   *   use_type use_statement '{' use_declarations '}' |\n   *   use_statement '{' use_declarations(=>typed) '}'\n   * ';'\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.importing.php\n   * @return {UseGroup}\n   */\n  read_use_statement: function read_use_statement() {\n    var result = this.node(\"usegroup\");\n    var items = [];\n    var name = null;\n    this.expect(this.tok.T_USE) && this.next();\n    var type = this.read_use_type();\n    items.push(this.read_use_declaration(false));\n\n    if (this.token === \",\") {\n      items = items.concat(this.next().read_use_declarations(false));\n    } else if (this.token === \"{\") {\n      name = items[0].name;\n      items = this.next().read_use_declarations(type === null);\n      this.expect(\"}\") && this.next();\n    }\n\n    result = result(name, type, items);\n    this.expect(\";\") && this.next();\n    return result;\n  },\n\n  /**\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1045\n   */\n  read_class_name_reference: function read_class_name_reference() {\n    // resolved as the same\n    return this.read_variable(true, false);\n  },\n\n  /**\n   * Reads a use declaration\n   * ```ebnf\n   * use_declaration ::= use_type? namespace_name use_alias\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem}\n   */\n  read_use_declaration: function read_use_declaration(typed) {\n    var result = this.node(\"useitem\");\n    var type = null;\n    if (typed) type = this.read_use_type();\n    var name = this.read_namespace_name();\n    var alias = this.read_use_alias();\n    return result(name.name, alias, type);\n  },\n\n  /**\n   * Reads a list of use declarations\n   * ```ebnf\n   * use_declarations ::= use_declaration (',' use_declaration)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem[]}\n   */\n  read_use_declarations: function read_use_declarations(typed) {\n    var result = [this.read_use_declaration(typed)];\n\n    while (this.token === \",\") {\n      this.next();\n\n      if (typed) {\n        if (this.token !== this.tok.T_FUNCTION && this.token !== this.tok.T_CONST && this.token !== this.tok.T_STRING) {\n          break;\n        }\n      } else if (this.token !== this.tok.T_STRING && this.token !== this.tok.T_NS_SEPARATOR) {\n        break;\n      }\n\n      result.push(this.read_use_declaration(typed));\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a use statement\n   * ```ebnf\n   * use_alias ::= (T_AS T_STRING)?\n   * ```\n   * @return {String|null}\n   */\n  read_use_alias: function read_use_alias() {\n    var result = null;\n\n    if (this.token === this.tok.T_AS) {\n      if (this.next().expect(this.tok.T_STRING)) {\n        var aliasName = this.node(\"identifier\");\n        var name = this.text();\n        this.next();\n        result = aliasName(name);\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads the namespace type declaration\n   * ```ebnf\n   * use_type ::= (T_FUNCTION | T_CONST)?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L335\n   * @return {String|null} Possible values : function, const\n   */\n  read_use_type: function read_use_type() {\n    if (this.token === this.tok.T_FUNCTION) {\n      this.next();\n      return this.ast.useitem.TYPE_FUNCTION;\n    } else if (this.token === this.tok.T_CONST) {\n      this.next();\n      return this.ast.useitem.TYPE_CONST;\n    }\n\n    return null;\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar specialChar = {\n  \"\\\\\": \"\\\\\",\n  $: \"$\",\n  n: \"\\n\",\n  r: \"\\r\",\n  t: \"\\t\",\n  f: String.fromCharCode(12),\n  v: String.fromCharCode(11),\n  e: String.fromCharCode(27)\n};\nvar scalar = {\n  /**\n   * Unescape special chars\n   */\n  resolve_special_chars: function resolve_special_chars(text, doubleQuote) {\n    if (!doubleQuote) {\n      // single quote fix\n      return text.replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\'/g, \"'\");\n    }\n\n    return text.replace(/\\\\\"/, '\"').replace(/\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3}|u{([0-9a-fA-F]+)})/g, function ($match, p1, p2) {\n      if (specialChar[p1]) {\n        return specialChar[p1];\n      } else if (\"x\" === p1[0] || \"X\" === p1[0]) {\n        return String.fromCodePoint(parseInt(p1.substr(1), 16));\n      } else if (\"u\" === p1[0]) {\n        return String.fromCodePoint(parseInt(p2, 16));\n      } else {\n        return String.fromCodePoint(parseInt(p1, 8));\n      }\n    });\n  },\n\n  /**\n   * Remove all leading spaces each line for heredoc text if there is a indentation\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  remove_heredoc_leading_whitespace_chars: function remove_heredoc_leading_whitespace_chars(text, indentation, indentation_uses_spaces, first_encaps_node) {\n    if (indentation === 0) {\n      return text;\n    }\n\n    this.check_heredoc_indentation_level(text, indentation, indentation_uses_spaces, first_encaps_node);\n    var matchedChar = indentation_uses_spaces ? \" \" : \"\\t\";\n    var removementRegExp = new RegExp(\"\\\\n\".concat(matchedChar, \"{\").concat(indentation, \"}\"), \"g\");\n    var removementFirstEncapsNodeRegExp = new RegExp(\"^\".concat(matchedChar, \"{\").concat(indentation, \"}\")); // Rough replace, need more check\n\n    if (first_encaps_node) {\n      // Remove text leading whitespace\n      text = text.replace(removementFirstEncapsNodeRegExp, \"\");\n    } // Remove leading whitespace after \\n\n\n\n    return text.replace(removementRegExp, \"\\n\");\n  },\n\n  /**\n   * Check indentation level of heredoc in text, if mismatch, raiseError\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  check_heredoc_indentation_level: function check_heredoc_indentation_level(text, indentation, indentation_uses_spaces, first_encaps_node) {\n    var textSize = text.length;\n    var offset = 0;\n    var leadingWhitespaceCharCount = 0;\n    /**\n     * @var inCoutingState {boolean} reset to true after a new line\n     */\n\n    var inCoutingState = true;\n    var chToCheck = indentation_uses_spaces ? \" \" : \"\\t\";\n    var inCheckState = false;\n\n    if (!first_encaps_node) {\n      // start from first \\n\n      offset = text.indexOf(\"\\n\"); // if no \\n, just return\n\n      if (offset === -1) {\n        return;\n      }\n\n      offset++;\n    }\n\n    while (offset < textSize) {\n      if (inCoutingState) {\n        if (text[offset] === chToCheck) {\n          leadingWhitespaceCharCount++;\n        } else {\n          inCheckState = true;\n        }\n      } else {\n        inCoutingState = false;\n      }\n\n      if (text[offset] !== \"\\n\" && inCheckState && leadingWhitespaceCharCount < indentation) {\n        this.raiseError(\"Invalid body indentation level (expecting an indentation at least \".concat(indentation, \")\"));\n      } else {\n        inCheckState = false;\n      }\n\n      if (text[offset] === \"\\n\") {\n        // Reset counting state\n        inCoutingState = true;\n        leadingWhitespaceCharCount = 0;\n      }\n\n      offset++;\n    }\n  },\n\n  /**\n   * Reads dereferencable scalar\n   */\n  read_dereferencable_scalar: function read_dereferencable_scalar() {\n    var result = null;\n\n    switch (this.token) {\n      case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        {\n          var value = this.node(\"string\");\n          var text = this.text();\n          var offset = 0;\n\n          if (text[0] === \"b\" || text[0] === \"B\") {\n            offset = 1;\n          }\n\n          var isDoubleQuote = text[offset] === '\"';\n          this.next();\n          var textValue = this.resolve_special_chars(text.substring(offset + 1, text.length - 1), isDoubleQuote);\n          value = value(isDoubleQuote, textValue, offset === 1, // unicode flag\n          text);\n\n          if (this.token === this.tok.T_DOUBLE_COLON) {\n            // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1151\n            result = this.read_static_getter(value);\n          } else {\n            // dirrect string\n            result = value;\n          }\n        }\n        break;\n\n      case this.tok.T_ARRAY:\n        // array parser\n        result = this.read_array();\n        break;\n\n      case \"[\":\n        // short array format\n        result = this.read_array();\n        break;\n    }\n\n    return result;\n  },\n\n  /**\n   * ```ebnf\n   *  scalar ::= T_MAGIC_CONST\n   *       | T_LNUMBER | T_DNUMBER\n   *       | T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE? T_END_HEREDOC\n   *       | '\"' encaps_list '\"'\n   *       | T_START_HEREDOC encaps_list T_END_HEREDOC\n   *       | namespace_name (T_DOUBLE_COLON T_STRING)?\n   * ```\n   */\n  read_scalar: function read_scalar() {\n    if (this.is(\"T_MAGIC_CONST\")) {\n      return this.get_magic_constant();\n    } else {\n      var value, node;\n\n      switch (this.token) {\n        // NUMERIC\n        case this.tok.T_LNUMBER: // long\n\n        case this.tok.T_DNUMBER:\n          {\n            // double\n            var result = this.node(\"number\");\n            value = this.text();\n            this.next();\n            return result(value, null);\n          }\n\n        case this.tok.T_START_HEREDOC:\n          if (this.lexer.curCondition === \"ST_NOWDOC\") {\n            var start = this.lexer.yylloc.first_offset;\n            node = this.node(\"nowdoc\");\n            value = this.next().text(); // strip the last line return char\n\n            if (this.lexer.heredoc_label.indentation > 0) {\n              value = value.substring(0, value.length - this.lexer.heredoc_label.indentation);\n            }\n\n            var lastCh = value[value.length - 1];\n\n            if (lastCh === \"\\n\") {\n              if (value[value.length - 2] === \"\\r\") {\n                // windows style\n                value = value.substring(0, value.length - 2);\n              } else {\n                // linux style\n                value = value.substring(0, value.length - 1);\n              }\n            } else if (lastCh === \"\\r\") {\n              // mac style\n              value = value.substring(0, value.length - 1);\n            }\n\n            this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE) && this.next();\n            this.expect(this.tok.T_END_HEREDOC) && this.next();\n\n            var raw = this.lexer._input.substring(start, this.lexer.yylloc.first_offset);\n\n            node = node(this.remove_heredoc_leading_whitespace_chars(value, this.lexer.heredoc_label.indentation, this.lexer.heredoc_label.indentation_uses_spaces, this.lexer.heredoc_label.first_encaps_node), raw, this.lexer.heredoc_label.label);\n            return node;\n          } else {\n            return this.read_encapsed_string(this.tok.T_END_HEREDOC);\n          }\n\n        case '\"':\n          return this.read_encapsed_string('\"');\n\n        case 'b\"':\n        case 'B\"':\n          {\n            return this.read_encapsed_string('\"', true);\n          }\n        // TEXTS\n\n        case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        case this.tok.T_ARRAY: // array parser\n\n        case \"[\":\n          // short array format\n          return this.read_dereferencable_scalar();\n\n        default:\n          {\n            var err = this.error(\"SCALAR\"); // graceful mode : ignore token & return error node\n\n            this.next();\n            return err;\n          }\n      }\n    }\n  },\n\n  /**\n   * Handles the dereferencing\n   */\n  read_dereferencable: function read_dereferencable(expr) {\n    var result, offset;\n    var node = this.node(\"offsetlookup\");\n\n    if (this.token === \"[\") {\n      offset = this.next().read_expr();\n      if (this.expect(\"]\")) this.next();\n      result = node(expr, offset);\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      offset = this.read_encapsed_string_item(false);\n      result = node(expr, offset);\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads and extracts an encapsed item\n   * ```ebnf\n   * encapsed_string_item ::= T_ENCAPSED_AND_WHITESPACE\n   *  | T_DOLLAR_OPEN_CURLY_BRACES expr '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'\n   *  | T_CURLY_OPEN variable '}'\n   *  | variable\n   *  | variable '[' expr ']'\n   *  | variable T_OBJECT_OPERATOR T_STRING\n   * ```\n   * @return {String|Variable|Expr|Lookup}\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1219\n   */\n  read_encapsed_string_item: function read_encapsed_string_item(isDoubleQuote) {\n    var encapsedPart = this.node(\"encapsedpart\");\n    var syntax = null;\n    var curly = false;\n    var result = this.node(),\n        offset,\n        node,\n        name; // plain text\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1222\n\n    if (this.token === this.tok.T_ENCAPSED_AND_WHITESPACE) {\n      var text = this.text();\n      this.next(); // if this.lexer.heredoc_label.first_encaps_node -> remove first indents\n\n      result = result(\"string\", false, this.version >= 703 && !this.lexer.heredoc_label.finished ? this.remove_heredoc_leading_whitespace_chars(this.resolve_special_chars(text, isDoubleQuote), this.lexer.heredoc_label.indentation, this.lexer.heredoc_label.indentation_uses_spaces, this.lexer.heredoc_label.first_encaps_node) : text, false, text);\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      syntax = \"simple\";\n      curly = true; // dynamic variable name\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1239\n\n      name = null;\n\n      if (this.next().token === this.tok.T_STRING_VARNAME) {\n        name = this.node(\"variable\");\n        var varName = this.text();\n        this.next(); // check if lookup an offset\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1243\n\n        if (this.token === \"[\") {\n          name = name(varName, false);\n          node = this.node(\"offsetlookup\");\n          offset = this.next().read_expr();\n          this.expect(\"]\") && this.next();\n          result = node(name, offset);\n        } else {\n          result = name(varName, false);\n        }\n      } else {\n        result = result(\"variable\", this.read_expr(), false);\n      }\n\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_CURLY_OPEN) {\n      // expression\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1246\n      syntax = \"complex\";\n      result.destroy();\n      result = this.next().read_variable(false, false);\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_VARIABLE) {\n      syntax = \"simple\"; // plain variable\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1231\n\n      result.destroy();\n      result = this.read_simple_variable(); // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1233\n\n      if (this.token === \"[\") {\n        node = this.node(\"offsetlookup\");\n        offset = this.next().read_encaps_var_offset();\n        this.expect(\"]\") && this.next();\n        result = node(result, offset);\n      } // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1236\n\n\n      if (this.token === this.tok.T_OBJECT_OPERATOR) {\n        node = this.node(\"propertylookup\");\n        this.next().expect(this.tok.T_STRING);\n        var what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        result = node(result, what(name));\n      } // error / fallback\n\n    } else {\n      this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE);\n      var value = this.text();\n      this.next(); // consider it as string\n\n      result.destroy();\n      result = result(\"string\", false, value, false, value);\n    } // reset first_encaps_node to false after access any node\n\n\n    this.lexer.heredoc_label.first_encaps_node = false;\n    return encapsedPart(result, syntax, curly);\n  },\n\n  /**\n   * Reads an encapsed string\n   */\n  read_encapsed_string: function read_encapsed_string(expect) {\n    var isBinary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var labelStart = this.lexer.yylloc.first_offset;\n    var node = this.node(\"encapsed\");\n    this.next();\n    var start = this.lexer.yylloc.prev_offset - (isBinary ? 1 : 0);\n    var value = [];\n    var type = null;\n\n    if (expect === \"`\") {\n      type = this.ast.encapsed.TYPE_SHELL;\n    } else if (expect === '\"') {\n      type = this.ast.encapsed.TYPE_STRING;\n    } else {\n      type = this.ast.encapsed.TYPE_HEREDOC;\n    } // reading encapsed parts\n\n\n    while (this.token !== expect && this.token !== this.EOF) {\n      value.push(this.read_encapsed_string_item(true));\n    }\n\n    if (value.length > 0 && value[value.length - 1].kind === \"encapsedpart\" && value[value.length - 1].expression.kind === \"string\") {\n      var _node = value[value.length - 1].expression;\n      var lastCh = _node.value[_node.value.length - 1];\n\n      if (lastCh === \"\\n\") {\n        if (_node.value[_node.value.length - 2] === \"\\r\") {\n          // windows style\n          _node.value = _node.value.substring(0, _node.value.length - 2);\n        } else {\n          // linux style\n          _node.value = _node.value.substring(0, _node.value.length - 1);\n        }\n      } else if (lastCh === \"\\r\") {\n        // mac style\n        _node.value = _node.value.substring(0, _node.value.length - 1);\n      }\n    }\n\n    this.expect(expect) && this.next();\n\n    var raw = this.lexer._input.substring(type === \"heredoc\" ? labelStart : start - 1, this.lexer.yylloc.first_offset);\n\n    node = node(value, raw, type);\n\n    if (expect === this.tok.T_END_HEREDOC) {\n      node.label = this.lexer.heredoc_label.label;\n      this.lexer.heredoc_label.finished = true;\n    }\n\n    return node;\n  },\n\n  /**\n   * Constant token\n   */\n  get_magic_constant: function get_magic_constant() {\n    var result = this.node(\"magic\");\n    var name = this.text();\n    this.next();\n    return result(name.toUpperCase(), name);\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar statement = {\n  /**\n   * reading a list of top statements (helper for top_statement*)\n   * ```ebnf\n   *  top_statements ::= top_statement*\n   * ```\n   */\n  read_top_statements: function read_top_statements() {\n    var result = [];\n\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      var _statement = this.read_top_statement();\n\n      if (_statement) {\n        if (Array.isArray(_statement)) {\n          result = result.concat(_statement);\n        } else {\n          result.push(_statement);\n        }\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * reading a top statement\n   * ```ebnf\n   *  top_statement ::=\n   *       namespace | function | class\n   *       | interface | trait\n   *       | use_statements | const_list\n   *       | statement\n   * ```\n   */\n  read_top_statement: function read_top_statement() {\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false);\n      // optional flags\n\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n\n      case this.tok.T_USE:\n        return this.read_use_statement();\n\n      case this.tok.T_CONST:\n        {\n          var result = this.node(\"constantstatement\");\n          var items = this.next().read_const_list();\n          this.expectEndOfStatement();\n          return result(null, items);\n        }\n\n      case this.tok.T_NAMESPACE:\n        return this.read_namespace();\n\n      case this.tok.T_HALT_COMPILER:\n        {\n          var _result = this.node(\"halt\");\n\n          if (this.next().expect(\"(\")) this.next();\n          if (this.expect(\")\")) this.next();\n          this.expect(\";\");\n          this.lexer.done = true;\n          return _result(this.lexer._input.substring(this.lexer.offset));\n        }\n\n      default:\n        return this.read_statement();\n    }\n  },\n\n  /**\n   * reads a list of simple inner statements (helper for inner_statement*)\n   * ```ebnf\n   *  inner_statements ::= inner_statement*\n   * ```\n   */\n  read_inner_statements: function read_inner_statements() {\n    var result = [];\n\n    while (this.token != this.EOF && this.token !== \"}\") {\n      var _statement2 = this.read_inner_statement();\n\n      if (_statement2) {\n        if (Array.isArray(_statement2)) {\n          result = result.concat(_statement2);\n        } else {\n          result.push(_statement2);\n        }\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   const_list ::= T_CONST T_STRING '=' expr (',' T_STRING '=' expr)* ';'\n   * ```\n   */\n  read_const_list: function read_const_list() {\n    return this.read_list(function () {\n      this.expect(this.tok.T_STRING);\n      var result = this.node(\"constant\");\n      var constName = this.node(\"identifier\");\n      var name = this.text();\n      this.next();\n      constName = constName(name);\n\n      if (this.expect(\"=\")) {\n        return result(constName, this.next().read_expr());\n      } else {\n        // fallback\n        return result(constName, null);\n      }\n    }, \",\", false);\n  },\n\n  /**\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   declare_list ::= IDENTIFIER '=' expr (',' IDENTIFIER '=' expr)*\n   * ```\n   * @retrurn {Array}\n   */\n  read_declare_list: function read_declare_list() {\n    var result = [];\n\n    while (this.token != this.EOF && this.token !== \")\") {\n      this.expect(this.tok.T_STRING);\n      var directive = this.node(\"declaredirective\");\n      var key = this.node(\"identifier\");\n      var name = this.text();\n      this.next();\n      key = key(name);\n      var value = null;\n\n      if (this.expect(\"=\")) {\n        value = this.next().read_expr();\n      }\n\n      result.push(directive(key, value));\n      if (this.token !== \",\") break;\n      this.next();\n    }\n\n    return result;\n  },\n\n  /**\n   * reads a simple inner statement\n   * ```ebnf\n   *  inner_statement ::= '{' inner_statements '}' | token\n   * ```\n   */\n  read_inner_statement: function read_inner_statement() {\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false);\n      // optional flags\n\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n\n      case this.tok.T_HALT_COMPILER:\n        {\n          this.raiseError(\"__HALT_COMPILER() can only be used from the outermost scope\"); // fallback : returns a node but does not stop the parsing\n\n          var node = this.node(\"halt\");\n          this.next().expect(\"(\") && this.next();\n          this.expect(\")\") && this.next();\n          node = node(this.lexer._input.substring(this.lexer.offset));\n          this.expect(\";\") && this.next();\n          return node;\n        }\n\n      default:\n        return this.read_statement();\n    }\n  },\n\n  /**\n   * Reads statements\n   */\n  read_statement: function read_statement() {\n    switch (this.token) {\n      case \"{\":\n        return this.read_code_block(false);\n\n      case this.tok.T_IF:\n        return this.read_if();\n\n      case this.tok.T_SWITCH:\n        return this.read_switch();\n\n      case this.tok.T_FOR:\n        return this.read_for();\n\n      case this.tok.T_FOREACH:\n        return this.read_foreach();\n\n      case this.tok.T_WHILE:\n        return this.read_while();\n\n      case this.tok.T_DO:\n        return this.read_do();\n\n      case this.tok.T_COMMENT:\n        return this.read_comment();\n\n      case this.tok.T_DOC_COMMENT:\n        return this.read_doc_comment();\n\n      case this.tok.T_RETURN:\n        {\n          var result = this.node(\"return\");\n          this.next();\n          var expr = this.read_optional_expr(\";\");\n          this.expectEndOfStatement();\n          return result(expr);\n        }\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L429\n\n      case this.tok.T_BREAK:\n      case this.tok.T_CONTINUE:\n        {\n          var _result2 = this.node(this.token === this.tok.T_CONTINUE ? \"continue\" : \"break\");\n\n          this.next();\n          var level = this.read_optional_expr(\";\");\n          this.expectEndOfStatement();\n          return _result2(level);\n        }\n\n      case this.tok.T_GLOBAL:\n        {\n          var _result3 = this.node(\"global\");\n\n          var items = this.next().read_list(this.read_simple_variable, \",\");\n          this.expectEndOfStatement();\n          return _result3(items);\n        }\n\n      case this.tok.T_STATIC:\n        {\n          var current = [this.token, this.lexer.getState()];\n\n          var _result4 = this.node();\n\n          if (this.next().token === this.tok.T_DOUBLE_COLON) {\n            // static keyword for a class\n            this.lexer.tokens.push(current);\n\n            var _expr = this.next().read_expr();\n\n            this.expectEndOfStatement(_expr);\n            return _result4(\"expressionstatement\", _expr);\n          }\n\n          if (this.token === this.tok.T_FUNCTION) {\n            return this.read_function(true, [0, 1, 0]);\n          }\n\n          var _items = this.read_variable_declarations();\n\n          this.expectEndOfStatement();\n          return _result4(\"static\", _items);\n        }\n\n      case this.tok.T_ECHO:\n        {\n          var _result5 = this.node(\"echo\");\n\n          var text = this.text();\n          var shortForm = text === \"<?=\" || text === \"<%=\";\n          var expressions = this.next().read_function_list(this.read_expr, \",\");\n          this.expectEndOfStatement();\n          return _result5(expressions, shortForm);\n        }\n\n      case this.tok.T_INLINE_HTML:\n        {\n          var value = this.text();\n          var prevChar = this.lexer.yylloc.first_offset > 0 ? this.lexer._input[this.lexer.yylloc.first_offset - 1] : null;\n          var fixFirstLine = prevChar === \"\\r\" || prevChar === \"\\n\"; // revert back the first stripped line\n\n          if (fixFirstLine) {\n            if (prevChar === \"\\n\" && this.lexer.yylloc.first_offset > 1 && this.lexer._input[this.lexer.yylloc.first_offset - 2] === \"\\r\") {\n              prevChar = \"\\r\\n\";\n            }\n          }\n\n          var _result6 = this.node(\"inline\");\n\n          this.next();\n          return _result6(value, fixFirstLine ? prevChar + value : value);\n        }\n\n      case this.tok.T_UNSET:\n        {\n          var _result7 = this.node(\"unset\");\n\n          this.next().expect(\"(\") && this.next();\n          var variables = this.read_function_list(this.read_variable, \",\");\n          this.expect(\")\") && this.next();\n          this.expect(\";\") && this.next();\n          return _result7(variables);\n        }\n\n      case this.tok.T_DECLARE:\n        {\n          var _result8 = this.node(\"declare\");\n\n          var body = [];\n          var mode;\n          this.next().expect(\"(\") && this.next();\n          var directives = this.read_declare_list();\n          this.expect(\")\") && this.next();\n\n          if (this.token === \":\") {\n            this.next();\n\n            while (this.token != this.EOF && this.token !== this.tok.T_ENDDECLARE) {\n              // @todo : check declare_statement from php / not valid\n              body.push(this.read_top_statement());\n            }\n\n            if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n              body.push(this.node(\"noop\")());\n            }\n\n            this.expect(this.tok.T_ENDDECLARE) && this.next();\n            this.expectEndOfStatement();\n            mode = this.ast.declare.MODE_SHORT;\n          } else if (this.token === \"{\") {\n            this.next();\n\n            while (this.token != this.EOF && this.token !== \"}\") {\n              // @todo : check declare_statement from php / not valid\n              body.push(this.read_top_statement());\n            }\n\n            if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n              body.push(this.node(\"noop\")());\n            }\n\n            this.expect(\"}\") && this.next();\n            mode = this.ast.declare.MODE_BLOCK;\n          } else {\n            this.expect(\";\") && this.next();\n            mode = this.ast.declare.MODE_NONE;\n          }\n\n          return _result8(directives, body, mode);\n        }\n\n      case this.tok.T_TRY:\n        return this.read_try();\n\n      case this.tok.T_THROW:\n        {\n          var _result9 = this.node(\"throw\");\n\n          var _expr2 = this.next().read_expr();\n\n          this.expectEndOfStatement();\n          return _result9(_expr2);\n        }\n      // ignore this (extra ponctuation)\n\n      case \";\":\n        {\n          this.next();\n          return null;\n        }\n\n      case this.tok.T_STRING:\n        {\n          var _result10 = this.node();\n\n          var _current = [this.token, this.lexer.getState()];\n          var labelNameText = this.text();\n          var labelName = this.node(\"identifier\"); // AST : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L457\n\n          if (this.next().token === \":\") {\n            labelName = labelName(labelNameText);\n            this.next();\n            return _result10(\"label\", labelName);\n          } else {\n            labelName.destroy();\n          } // default fallback expr / T_STRING '::' (etc...)\n\n\n          _result10.destroy();\n\n          this.lexer.tokens.push(_current);\n\n          var _statement3 = this.node(\"expressionstatement\");\n\n          var _expr3 = this.next().read_expr();\n\n          this.expectEndOfStatement(_expr3);\n          return _statement3(_expr3);\n        }\n\n      case this.tok.T_GOTO:\n        {\n          var _result11 = this.node(\"goto\");\n\n          var _labelName = null;\n\n          if (this.next().expect(this.tok.T_STRING)) {\n            _labelName = this.node(\"identifier\");\n            var name = this.text();\n            this.next();\n            _labelName = _labelName(name);\n            this.expectEndOfStatement();\n          }\n\n          return _result11(_labelName);\n        }\n\n      default:\n        {\n          // default fallback expr\n          var _statement4 = this.node(\"expressionstatement\");\n\n          var _expr4 = this.read_expr();\n\n          this.expectEndOfStatement(_expr4);\n          return _statement4(_expr4);\n        }\n    }\n  },\n\n  /**\n   * ```ebnf\n   *  code_block ::= '{' (inner_statements | top_statements) '}'\n   * ```\n   */\n  read_code_block: function read_code_block(top) {\n    var result = this.node(\"block\");\n    this.expect(\"{\") && this.next();\n    var body = top ? this.read_top_statements() : this.read_inner_statements();\n\n    if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n      body.push(this.node(\"noop\")());\n    }\n\n    this.expect(\"}\") && this.next();\n    return result(null, body);\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _switch = {\n  /**\n   * Reads a switch statement\n   * ```ebnf\n   *  switch ::= T_SWITCH '(' expr ')' switch_case_list\n   * ```\n   * @return {Switch}\n   * @see http://php.net/manual/en/control-structures.switch.php\n   */\n  read_switch: function read_switch() {\n    var result = this.node(\"switch\");\n    this.expect(this.tok.T_SWITCH) && this.next();\n    this.expect(\"(\") && this.next();\n    var test = this.read_expr();\n    this.expect(\")\") && this.next();\n    var shortForm = this.token === \":\";\n    var body = this.read_switch_case_list();\n    return result(test, body, shortForm);\n  },\n\n  /**\n   * ```ebnf\n   *  switch_case_list ::= '{' ';'? case_list* '}' | ':' ';'? case_list* T_ENDSWITCH ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L566\n   */\n  read_switch_case_list: function read_switch_case_list() {\n    // DETECT SWITCH MODE\n    var expect = null;\n    var result = this.node(\"block\");\n    var items = [];\n\n    if (this.token === \"{\") {\n      expect = \"}\";\n    } else if (this.token === \":\") {\n      expect = this.tok.T_ENDSWITCH;\n    } else {\n      this.expect([\"{\", \":\"]);\n    }\n\n    this.next(); // OPTIONNAL ';'\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L570\n\n    if (this.token === \";\") {\n      this.next();\n    } // EXTRACTING CASES\n\n\n    while (this.token !== this.EOF && this.token !== expect) {\n      items.push(this.read_case_list(expect));\n    }\n\n    if (items.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n      items.push(this.node(\"noop\")());\n    } // CHECK END TOKEN\n\n\n    this.expect(expect) && this.next();\n\n    if (expect === this.tok.T_ENDSWITCH) {\n      this.expectEndOfStatement();\n    }\n\n    return result(null, items);\n  },\n\n  /**\n   * ```ebnf\n   *   case_list ::= ((T_CASE expr) | T_DEFAULT) (':' | ';') inner_statement*\n   * ```\n   */\n  read_case_list: function read_case_list(stopToken) {\n    var result = this.node(\"case\");\n    var test = null;\n\n    if (this.token === this.tok.T_CASE) {\n      test = this.next().read_expr();\n    } else if (this.token === this.tok.T_DEFAULT) {\n      // the default entry - no condition\n      this.next();\n    } else {\n      this.expect([this.tok.T_CASE, this.tok.T_DEFAULT]);\n    } // case_separator\n\n\n    this.expect([\":\", \";\"]) && this.next();\n    var body = this.node(\"block\");\n    var items = [];\n\n    while (this.token !== this.EOF && this.token !== stopToken && this.token !== this.tok.T_CASE && this.token !== this.tok.T_DEFAULT) {\n      items.push(this.read_inner_statement());\n    }\n\n    return result(test, body(null, items));\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _try = {\n  /**\n   * ```ebnf\n   *  try ::= T_TRY '{' inner_statement* '}'\n   *          (\n   *              T_CATCH '(' namespace_name variable ')' '{'  inner_statement* '}'\n   *          )*\n   *          (T_FINALLY '{' inner_statement* '}')?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L448\n   * @return {Try}\n   */\n  read_try: function read_try() {\n    this.expect(this.tok.T_TRY);\n    var result = this.node(\"try\");\n    var always = null;\n    var catches = [];\n    var body = this.next().read_statement(); // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L455\n\n    while (this.token === this.tok.T_CATCH) {\n      var item = this.node(\"catch\");\n      this.next().expect(\"(\") && this.next();\n      var what = this.read_list(this.read_namespace_name, \"|\", false);\n      var variable = this.read_variable(true, false);\n      this.expect(\")\");\n      catches.push(item(this.next().read_statement(), what, variable));\n    }\n\n    if (this.token === this.tok.T_FINALLY) {\n      always = this.next().read_statement();\n    }\n\n    return result(body, catches, always);\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar utils$1 = {\n  /**\n   * Reads a short form of tokens\n   * @param {Number} token - The ending token\n   * @return {Block}\n   */\n  read_short_form: function read_short_form(token) {\n    var body = this.node(\"block\");\n    var items = [];\n    if (this.expect(\":\")) this.next();\n\n    while (this.token != this.EOF && this.token !== token) {\n      items.push(this.read_inner_statement());\n    }\n\n    if (items.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n      items.push(this.node(\"noop\")());\n    }\n\n    if (this.expect(token)) this.next();\n    this.expectEndOfStatement();\n    return body(null, items);\n  },\n\n  /**\n   * https://wiki.php.net/rfc/trailing-comma-function-calls\n   * @param {*} item\n   * @param {*} separator\n   */\n  read_function_list: function read_function_list(item, separator) {\n    var result = [];\n\n    do {\n      if (this.token == separator && this.version >= 703 && result.length > 0) {\n        result.push(this.node(\"noop\")());\n        break;\n      }\n\n      result.push(item.apply(this, []));\n\n      if (this.token != separator) {\n        break;\n      }\n\n      if (this.next().token == \")\" && this.version >= 703) {\n        break;\n      }\n    } while (this.token != this.EOF);\n\n    return result;\n  },\n\n  /**\n   * Helper : reads a list of tokens / sample : T_STRING ',' T_STRING ...\n   * ```ebnf\n   * list ::= separator? ( item separator )* item\n   * ```\n   */\n  read_list: function read_list(item, separator, preserveFirstSeparator) {\n    var result = [];\n\n    if (this.token == separator) {\n      if (preserveFirstSeparator) {\n        result.push(typeof item === \"function\" ? this.node(\"noop\")() : null);\n      }\n\n      this.next();\n    }\n\n    if (typeof item === \"function\") {\n      do {\n        var itemResult = item.apply(this, []);\n\n        if (itemResult) {\n          result.push(itemResult);\n        }\n\n        if (this.token != separator) {\n          break;\n        }\n      } while (this.next().token != this.EOF);\n    } else {\n      if (this.expect(item)) {\n        result.push(this.text());\n      } else {\n        return [];\n      }\n\n      while (this.next().token != this.EOF) {\n        if (this.token != separator) break; // trim current separator & check item\n\n        if (this.next().token != item) break;\n        result.push(this.text());\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a list of names separated by a comma\n   *\n   * ```ebnf\n   * name_list ::= namespace (',' namespace)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php class foo extends bar, baz { }\n   * ```\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L726\n   * @return {Reference[]}\n   */\n  read_name_list: function read_name_list() {\n    return this.read_list(this.read_namespace_name, \",\", false);\n  },\n\n  /**\n   * Reads the byref token and assign it to the specified node\n   * @param {*} cb\n   */\n  read_byref: function read_byref(cb) {\n    var byref = this.node(\"byref\");\n    this.next();\n    byref = byref(null);\n    var result = cb();\n\n    if (result) {\n      this.ast.swapLocations(result, byref, result, this);\n      result.byref = true;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a list of variables declarations\n   *\n   * ```ebnf\n   * variable_declaration ::= T_VARIABLE ('=' expr)?*\n   * variable_declarations ::= variable_declaration (',' variable_declaration)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php static $a = 'hello', $b = 'world';\n   * ```\n   * @return {StaticVariable[]} Returns an array composed by a list of variables, or\n   * assign values\n   */\n  read_variable_declarations: function read_variable_declarations() {\n    return this.read_list(function () {\n      var node = this.node(\"staticvariable\");\n      var variable = this.node(\"variable\"); // plain variable name\n\n      if (this.expect(this.tok.T_VARIABLE)) {\n        var name = this.text().substring(1);\n        this.next();\n        variable = variable(name, false);\n      } else {\n        variable = variable(\"#ERR\", false);\n      }\n\n      if (this.token === \"=\") {\n        return node(variable, this.next().read_expr());\n      } else {\n        return variable;\n      }\n    }, \",\");\n  },\n\n  /*\n   * Reads class extends\n   */\n  read_extends_from: function read_extends_from() {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_namespace_name();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads interface extends list\n   */\n  read_interface_extends_list: function read_interface_extends_list() {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads implements list\n   */\n  read_implements_list: function read_implements_list() {\n    if (this.token === this.tok.T_IMPLEMENTS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar variable = {\n  /**\n   * Reads a variable\n   *\n   * ```ebnf\n   *   variable ::= &? ...complex @todo\n   * ```\n   *\n   * Some samples of parsed code :\n   * ```php\n   *  &$var                      // simple var\n   *  $var                      // simple var\n   *  classname::CONST_NAME     // dynamic class name with const retrieval\n   *  foo()                     // function call\n   *  $var->func()->property    // chained calls\n   * ```\n   */\n  read_variable: function read_variable(read_only, encapsed) {\n    var result; // check the byref flag\n\n    if (this.token === \"&\") {\n      return this.read_byref(this.read_variable.bind(this, read_only, encapsed));\n    } // reads the entry point\n\n\n    if (this.is([this.tok.T_VARIABLE, \"$\"])) {\n      result = this.read_reference_variable(encapsed);\n    } else if (this.is([this.tok.T_NS_SEPARATOR, this.tok.T_STRING, this.tok.T_NAMESPACE])) {\n      result = this.node();\n      var name = this.read_namespace_name();\n\n      if (this.token != this.tok.T_DOUBLE_COLON && this.token != \"(\" && [\"parentreference\", \"selfreference\"].indexOf(name.kind) === -1) {\n        // @see parser.js line 130 : resolves a conflict with scalar\n        var literal = name.name.toLowerCase();\n\n        if (literal === \"true\") {\n          result = name.destroy(result(\"boolean\", true, name.name));\n        } else if (literal === \"false\") {\n          result = name.destroy(result(\"boolean\", false, name.name));\n        } else if (literal === \"null\") {\n          result = name.destroy(result(\"nullkeyword\", name.name));\n        } else {\n          result.destroy(name);\n          result = name;\n        }\n      } else {\n        // @fixme possible #193 bug\n        result.destroy(name);\n        result = name;\n      }\n    } else if (this.token === this.tok.T_STATIC) {\n      result = this.node(\"staticreference\");\n      var raw = this.text();\n      this.next();\n      result = result(raw);\n    } else {\n      this.expect(\"VARIABLE\");\n    } // static mode\n\n\n    if (this.token === this.tok.T_DOUBLE_COLON) {\n      result = this.read_static_getter(result, encapsed);\n    }\n\n    return this.recursive_variable_chain_scan(result, read_only, encapsed);\n  },\n  // resolves a static call\n  read_static_getter: function read_static_getter(what, encapsed) {\n    var result = this.node(\"staticlookup\");\n    var offset, name;\n\n    if (this.next().is([this.tok.T_VARIABLE, \"$\"])) {\n      offset = this.read_reference_variable(encapsed);\n    } else if (this.token === this.tok.T_STRING || this.token === this.tok.T_CLASS || this.version >= 700 && this.is(\"IDENTIFIER\")) {\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    } else if (this.token === \"{\") {\n      offset = this.node(\"literal\");\n      name = this.next().read_expr();\n      this.expect(\"}\") && this.next();\n      offset = offset(\"literal\", name, null);\n      this.expect(\"(\");\n    } else {\n      this.error([this.tok.T_VARIABLE, this.tok.T_STRING]); // graceful mode : set getter as error node and continue\n\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    }\n\n    return result(what, offset);\n  },\n  read_what: function read_what() {\n    var is_static_lookup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var what = null;\n    var name = null;\n\n    switch (this.next().token) {\n      case this.tok.T_STRING:\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n\n        if (is_static_lookup && this.token === this.tok.T_OBJECT_OPERATOR) {\n          this.error();\n        }\n\n        break;\n\n      case this.tok.T_VARIABLE:\n        what = this.node(\"variable\");\n        name = this.text().substring(1);\n        this.next();\n        what = what(name, false);\n        break;\n\n      case \"$\":\n        what = this.node();\n        this.next().expect([\"$\", \"{\", this.tok.T_VARIABLE]);\n\n        if (this.token === \"{\") {\n          // $obj->${$varname}\n          name = this.next().read_expr();\n          this.expect(\"}\") && this.next();\n          what = what(\"variable\", name, true);\n        } else {\n          // $obj->$$varname\n          name = this.read_expr();\n          what = what(\"variable\", name, false);\n        }\n\n        break;\n\n      case \"{\":\n        what = this.node(\"encapsedpart\");\n        name = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        what = what(name, \"complex\", false);\n        break;\n\n      default:\n        this.error([this.tok.T_STRING, this.tok.T_VARIABLE, \"$\", \"{\"]); // graceful mode : set what as error mode & continue\n\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n        break;\n    }\n\n    return what;\n  },\n  recursive_variable_chain_scan: function recursive_variable_chain_scan(result, read_only, encapsed) {\n    var node, offset;\n\n    recursive_scan_loop: while (this.token != this.EOF) {\n      switch (this.token) {\n        case \"(\":\n          if (read_only) {\n            // @fixme : add more informations & test\n            return result;\n          } else {\n            result = this.node(\"call\")(result, this.read_argument_list());\n          }\n\n          break;\n\n        case \"[\":\n        case \"{\":\n          {\n            var backet = this.token;\n            var isSquareBracket = backet === \"[\";\n            node = this.node(\"offsetlookup\");\n            this.next();\n            offset = false;\n\n            if (encapsed) {\n              offset = this.read_encaps_var_offset();\n              this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n            } else {\n              var isCallableVariable = isSquareBracket ? this.token !== \"]\" : this.token !== \"}\"; // callable_variable : https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1122\n\n              if (isCallableVariable) {\n                offset = this.read_expr();\n                this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n              } else {\n                this.next();\n              }\n            }\n\n            result = node(result, offset);\n            break;\n          }\n\n        case this.tok.T_DOUBLE_COLON:\n          // @see https://github.com/glayzzle/php-parser/issues/107#issuecomment-354104574\n          if (result.kind === \"staticlookup\" && result.offset.kind === \"identifier\") {\n            this.error();\n          }\n\n          node = this.node(\"staticlookup\");\n          result = node(result, this.read_what(true)); // fix 185\n          // static lookup dereferencables are limited to staticlookup over functions\n\n          /*if (dereferencable && this.token !== \"(\") {\n            this.error(\"(\");\n          }*/\n\n          break;\n\n        case this.tok.T_OBJECT_OPERATOR:\n          {\n            node = this.node(\"propertylookup\");\n            result = node(result, this.read_what());\n            break;\n          }\n\n        default:\n          break recursive_scan_loop;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1231\n   */\n  read_encaps_var_offset: function read_encaps_var_offset() {\n    var offset = this.node();\n\n    if (this.token === this.tok.T_STRING) {\n      var text = this.text();\n      this.next();\n      offset = offset(\"identifier\", text);\n    } else if (this.token === this.tok.T_NUM_STRING) {\n      var num = this.text();\n      this.next();\n      offset = offset(\"number\", num, null);\n    } else if (this.token === \"-\") {\n      this.next();\n\n      var _num = -1 * this.text();\n\n      this.expect(this.tok.T_NUM_STRING) && this.next();\n      offset = offset(\"number\", _num, null);\n    } else if (this.token === this.tok.T_VARIABLE) {\n      var name = this.text().substring(1);\n      this.next();\n      offset = offset(\"variable\", name, false);\n    } else {\n      this.expect([this.tok.T_STRING, this.tok.T_NUM_STRING, \"-\", this.tok.T_VARIABLE]); // fallback : consider as identifier\n\n      var _text = this.text();\n\n      this.next();\n      offset = offset(\"identifier\", _text);\n    }\n\n    return offset;\n  },\n\n  /**\n   * ```ebnf\n   *  reference_variable ::=  simple_variable ('[' OFFSET ']')* | '{' EXPR '}'\n   * ```\n   * <code>\n   *  $foo[123];      // foo is an array ==> gets its entry\n   *  $foo{1};        // foo is a string ==> get the 2nd char offset\n   *  ${'foo'}[123];  // get the dynamic var $foo\n   *  $foo[123]{1};   // gets the 2nd char from the 123 array entry\n   * </code>\n   */\n  read_reference_variable: function read_reference_variable(encapsed) {\n    var result = this.read_simple_variable();\n    var offset;\n\n    while (this.token != this.EOF) {\n      var node = this.node();\n\n      if (this.token == \"{\" && !encapsed) {\n        // @fixme check coverage, not sure thats working\n        offset = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        result = node(\"offsetlookup\", result, offset);\n      } else {\n        node.destroy();\n        break;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * ```ebnf\n   *  simple_variable ::= T_VARIABLE | '$' '{' expr '}' | '$' simple_variable\n   * ```\n   */\n  read_simple_variable: function read_simple_variable() {\n    var result = this.node(\"variable\");\n    var name;\n\n    if (this.expect([this.tok.T_VARIABLE, \"$\"]) && this.token === this.tok.T_VARIABLE) {\n      // plain variable name\n      name = this.text().substring(1);\n      this.next();\n      result = result(name, false);\n    } else {\n      if (this.token === \"$\") this.next(); // dynamic variable name\n\n      switch (this.token) {\n        case \"{\":\n          {\n            var expr = this.next().read_expr();\n            this.expect(\"}\") && this.next();\n            result = result(expr, true);\n            break;\n          }\n\n        case \"$\":\n          // $$$var\n          result = result(this.read_simple_variable(), false);\n          break;\n\n        case this.tok.T_VARIABLE:\n          {\n            // $$var\n            name = this.text().substring(1);\n            var node = this.node(\"variable\");\n            this.next();\n            result = result(node(name, false), false);\n            break;\n          }\n\n        default:\n          this.error([\"{\", \"$\", this.tok.T_VARIABLE]); // graceful mode\n\n          name = this.text();\n          this.next();\n          result = result(name, false);\n      }\n    }\n\n    return result;\n  }\n};\n\n/**\n * @private\n */\n\n\nfunction isNumber(n) {\n  return n != \".\" && n != \",\" && !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\n * The PHP Parser class that build the AST tree from the lexer\n *\n * @class\n * @tutorial Parser\n * @property {Lexer} lexer - current lexer instance\n * @property {AST} ast - the AST factory instance\n * @property {Integer|String} token - current token\n * @property {Boolean} extractDoc - should extract documentation as AST node\n * @property {Boolean} extractTokens - should extract each token\n * @property {Boolean} suppressErrors - should ignore parsing errors and continue\n * @property {Boolean} debug - should output debug informations\n */\n\n\nvar parser = function parser(lexer, ast) {\n  this.lexer = lexer;\n  this.ast = ast;\n  this.tok = lexer.tok;\n  this.EOF = lexer.EOF;\n  this.token = null;\n  this.prev = null;\n  this.debug = false;\n  this.version = 704;\n  this.extractDoc = false;\n  this.extractTokens = false;\n  this.suppressErrors = false;\n\n  var mapIt = function mapIt(item) {\n    return [item, null];\n  };\n\n  this.entries = {\n    // reserved_non_modifiers\n    IDENTIFIER: new Map([this.tok.T_ABSTRACT, this.tok.T_ARRAY, this.tok.T_AS, this.tok.T_BREAK, this.tok.T_CALLABLE, this.tok.T_CASE, this.tok.T_CATCH, this.tok.T_CLASS, this.tok.T_CLASS_C, this.tok.T_CLONE, this.tok.T_CONST, this.tok.T_CONTINUE, this.tok.T_DECLARE, this.tok.T_DEFAULT, this.tok.T_DIR, this.tok.T_DO, this.tok.T_ECHO, this.tok.T_ELSE, this.tok.T_ELSEIF, this.tok.T_EMPTY, this.tok.T_ENDDECLARE, this.tok.T_ENDFOR, this.tok.T_ENDFOREACH, this.tok.T_ENDIF, this.tok.T_ENDSWITCH, this.tok.T_ENDWHILE, this.tok.T_EVAL, this.tok.T_EXIT, this.tok.T_EXTENDS, this.tok.T_FILE, this.tok.T_FINAL, this.tok.T_FINALLY, this.tok.T_FN, this.tok.T_FOR, this.tok.T_FOREACH, this.tok.T_FUNC_C, this.tok.T_FUNCTION, this.tok.T_GLOBAL, this.tok.T_GOTO, this.tok.T_IF, this.tok.T_IMPLEMENTS, this.tok.T_INCLUDE, this.tok.T_INCLUDE_ONCE, this.tok.T_INSTANCEOF, this.tok.T_INSTEADOF, this.tok.T_INTERFACE, this.tok.T_ISSET, this.tok.T_LINE, this.tok.T_LIST, this.tok.T_LOGICAL_AND, this.tok.T_LOGICAL_OR, this.tok.T_LOGICAL_XOR, this.tok.T_METHOD_C, this.tok.T_NAMESPACE, this.tok.T_NEW, this.tok.T_NS_C, this.tok.T_PRINT, this.tok.T_PRIVATE, this.tok.T_PROTECTED, this.tok.T_PUBLIC, this.tok.T_REQUIRE, this.tok.T_REQUIRE_ONCE, this.tok.T_RETURN, this.tok.T_STATIC, this.tok.T_SWITCH, this.tok.T_THROW, this.tok.T_TRAIT, this.tok.T_TRY, this.tok.T_UNSET, this.tok.T_USE, this.tok.T_VAR, this.tok.T_WHILE, this.tok.T_YIELD].map(mapIt)),\n    VARIABLE: new Map([this.tok.T_VARIABLE, \"$\", \"&\", this.tok.T_NS_SEPARATOR, this.tok.T_STRING, this.tok.T_NAMESPACE, this.tok.T_STATIC].map(mapIt)),\n    SCALAR: new Map([this.tok.T_CONSTANT_ENCAPSED_STRING, this.tok.T_START_HEREDOC, this.tok.T_LNUMBER, this.tok.T_DNUMBER, this.tok.T_ARRAY, \"[\", this.tok.T_CLASS_C, this.tok.T_TRAIT_C, this.tok.T_FUNC_C, this.tok.T_METHOD_C, this.tok.T_LINE, this.tok.T_FILE, this.tok.T_DIR, this.tok.T_NS_C, '\"', 'b\"', 'B\"', \"-\", this.tok.T_NS_SEPARATOR].map(mapIt)),\n    T_MAGIC_CONST: new Map([this.tok.T_CLASS_C, this.tok.T_TRAIT_C, this.tok.T_FUNC_C, this.tok.T_METHOD_C, this.tok.T_LINE, this.tok.T_FILE, this.tok.T_DIR, this.tok.T_NS_C].map(mapIt)),\n    T_MEMBER_FLAGS: new Map([this.tok.T_PUBLIC, this.tok.T_PRIVATE, this.tok.T_PROTECTED, this.tok.T_STATIC, this.tok.T_ABSTRACT, this.tok.T_FINAL].map(mapIt)),\n    EOS: new Map([\";\", this.EOF, this.tok.T_INLINE_HTML].map(mapIt)),\n    EXPR: new Map([\"@\", \"-\", \"+\", \"!\", \"~\", \"(\", \"`\", this.tok.T_LIST, this.tok.T_CLONE, this.tok.T_INC, this.tok.T_DEC, this.tok.T_NEW, this.tok.T_ISSET, this.tok.T_EMPTY, this.tok.T_INCLUDE, this.tok.T_INCLUDE_ONCE, this.tok.T_REQUIRE, this.tok.T_REQUIRE_ONCE, this.tok.T_EVAL, this.tok.T_INT_CAST, this.tok.T_DOUBLE_CAST, this.tok.T_STRING_CAST, this.tok.T_ARRAY_CAST, this.tok.T_OBJECT_CAST, this.tok.T_BOOL_CAST, this.tok.T_UNSET_CAST, this.tok.T_EXIT, this.tok.T_PRINT, this.tok.T_YIELD, this.tok.T_STATIC, this.tok.T_FUNCTION, this.tok.T_FN, // using VARIABLES :\n    this.tok.T_VARIABLE, \"$\", this.tok.T_NS_SEPARATOR, this.tok.T_STRING, // using SCALAR :\n    this.tok.T_STRING, // @see variable.js line 45 > conflict with variable = shift/reduce :)\n    this.tok.T_CONSTANT_ENCAPSED_STRING, this.tok.T_START_HEREDOC, this.tok.T_LNUMBER, this.tok.T_DNUMBER, this.tok.T_ARRAY, \"[\", this.tok.T_CLASS_C, this.tok.T_TRAIT_C, this.tok.T_FUNC_C, this.tok.T_METHOD_C, this.tok.T_LINE, this.tok.T_FILE, this.tok.T_DIR, this.tok.T_NS_C, '\"', 'b\"', 'B\"', \"-\", this.tok.T_NS_SEPARATOR].map(mapIt))\n  };\n};\n/**\n * helper : gets a token name\n */\n\n\nparser.prototype.getTokenName = function (token) {\n  if (!isNumber(token)) {\n    return \"'\" + token + \"'\";\n  } else {\n    if (token == this.EOF) return \"the end of file (EOF)\";\n    return this.lexer.engine.tokens.values[token];\n  }\n};\n/**\n * main entry point : converts a source code to AST\n */\n\n\nparser.prototype.parse = function (code, filename) {\n  this._errors = [];\n  this.filename = filename || \"eval\";\n  this.currentNamespace = [\"\"];\n\n  if (this.extractDoc) {\n    this._docs = [];\n  } else {\n    this._docs = null;\n  }\n\n  if (this.extractTokens) {\n    this._tokens = [];\n  } else {\n    this._tokens = null;\n  }\n\n  this._docIndex = 0;\n  this._lastNode = null;\n  this.lexer.setInput(code);\n  this.lexer.all_tokens = this.extractTokens;\n  this.lexer.comment_tokens = this.extractDoc;\n  this.length = this.lexer._input.length;\n  this.innerList = false;\n  this.innerListForm = false;\n  var program = this.node(\"program\");\n  var childs = [];\n  this.next();\n\n  while (this.token != this.EOF) {\n    childs.push(this.read_start());\n  } // append last comment\n\n\n  if (childs.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n    childs.push(this.node(\"noop\")());\n  } // #176 : register latest position\n\n\n  this.prev = [this.lexer.yylloc.last_line, this.lexer.yylloc.last_column, this.lexer.offset];\n  var result = program(childs, this._errors, this._docs, this._tokens);\n\n  if (this.debug) {\n    var errors = this.ast.checkNodes();\n\n    if (errors.length > 0) {\n      errors.forEach(function (error) {\n        if (error.position) {\n          // eslint-disable-next-line no-console\n          console.log(\"Node at line \" + error.position.line + \", column \" + error.position.column);\n        } // eslint-disable-next-line no-console\n\n\n        console.log(error.stack.join(\"\\n\"));\n      });\n      throw new Error(\"Some nodes are not closed\");\n    }\n  }\n\n  return result;\n};\n/**\n * Raise an error\n */\n\n\nparser.prototype.raiseError = function (message, msgExpect, expect, token) {\n  message += \" on line \" + this.lexer.yylloc.first_line;\n\n  if (!this.suppressErrors) {\n    var err = new SyntaxError(message, this.filename, this.lexer.yylloc.first_line);\n    err.lineNumber = this.lexer.yylloc.first_line;\n    err.fileName = this.filename;\n    err.columnNumber = this.lexer.yylloc.first_column;\n    throw err;\n  } // Error node :\n\n\n  var node = this.ast.prepare(\"error\", null, this)(message, token, this.lexer.yylloc.first_line, expect);\n\n  this._errors.push(node);\n\n  return node;\n};\n/**\n * handling errors\n */\n\n\nparser.prototype.error = function (expect) {\n  var msg = \"Parse Error : syntax error\";\n  var token = this.getTokenName(this.token);\n  var msgExpect = \"\";\n\n  if (this.token !== this.EOF) {\n    if (isNumber(this.token)) {\n      var symbol = this.text();\n\n      if (symbol.length > 10) {\n        symbol = symbol.substring(0, 7) + \"...\";\n      }\n\n      token = \"'\" + symbol + \"' (\" + token + \")\";\n    }\n\n    msg += \", unexpected \" + token;\n  }\n\n  if (expect && !Array.isArray(expect)) {\n    if (isNumber(expect) || expect.length === 1) {\n      msgExpect = \", expecting \" + this.getTokenName(expect);\n    }\n\n    msg += msgExpect;\n  }\n\n  return this.raiseError(msg, msgExpect, expect, token);\n};\n/**\n * Creates a new AST node\n */\n\n\nparser.prototype.node = function (name) {\n  if (this.extractDoc) {\n    var docs = null;\n\n    if (this._docIndex < this._docs.length) {\n      docs = this._docs.slice(this._docIndex);\n      this._docIndex = this._docs.length;\n\n      if (this.debug) {\n        // eslint-disable-next-line no-console\n        console.log(new Error(\"Append docs on \" + name)); // eslint-disable-next-line no-console\n\n        console.log(docs);\n      }\n    }\n\n    var node = this.ast.prepare(name, docs, this);\n    /**\n     * TOKENS :\n     * node1 commentA token commmentB node2 commentC token commentD node3 commentE token\n     *\n     * AST :\n     * structure:S1 [\n     *    left: node1 ( trail: commentA ),\n     *    right: structure:S2 [\n     *       node2 (lead: commentB, trail: commentC),\n     *       node3 (lead: commentD)\n     *    ],\n     *    trail: commentE\n     * ]\n     *\n     * Algorithm :\n     *\n     * Attach the last comments on parent of current node\n     * If a new node is started and the parent has a trailing comment\n     * the move it on previous node\n     *\n     * start S2\n     * start node1\n     * consume node1 & set commentA as trailingComment on S2\n     * start S2\n     * S1 has a trailingComment, attach it on node1\n     * ...\n     * NOTE : As the trailingComment Behavior depends on AST, it will be build on\n     * the AST layer - last child node will keep it's trailingComment nodes\n     */\n\n    node.postBuild = function (self) {\n      if (this._docIndex < this._docs.length) {\n        if (this._lastNode) {\n          var offset = this.prev[2];\n          var max = this._docIndex;\n\n          for (; max < this._docs.length; max++) {\n            if (this._docs[max].offset > offset) {\n              break;\n            }\n          }\n\n          if (max > this._docIndex) {\n            // inject trailing comment on child node\n            this._lastNode.setTrailingComments(this._docs.slice(this._docIndex, max));\n\n            this._docIndex = max;\n          }\n        } else if (this.token === this.EOF) {\n          // end of content\n          self.setTrailingComments(this._docs.slice(this._docIndex));\n          this._docIndex = this._docs.length;\n        }\n      }\n\n      this._lastNode = self;\n    }.bind(this);\n\n    return node;\n  }\n\n  return this.ast.prepare(name, null, this);\n};\n/**\n * expects an end of statement or end of file\n * @return {boolean}\n */\n\n\nparser.prototype.expectEndOfStatement = function (node) {\n  if (this.token === \";\") {\n    // include only real ';' statements\n    // https://github.com/glayzzle/php-parser/issues/164\n    if (node && this.lexer.yytext === \";\") {\n      node.includeToken(this);\n    }\n  } else if (this.token !== this.tok.T_INLINE_HTML && this.token !== this.EOF) {\n    this.error(\";\");\n    return false;\n  }\n\n  this.next();\n  return true;\n};\n/** outputs some debug information on current token **/\n\n\nvar ignoreStack = [\"parser.next\", \"parser.node\", \"parser.showlog\"];\n\nparser.prototype.showlog = function () {\n  var stack = new Error().stack.split(\"\\n\");\n  var line;\n\n  for (var offset = 2; offset < stack.length; offset++) {\n    line = stack[offset].trim();\n    var found = false;\n\n    for (var i = 0; i < ignoreStack.length; i++) {\n      if (line.substring(3, 3 + ignoreStack[i].length) === ignoreStack[i]) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      break;\n    }\n  } // eslint-disable-next-line no-console\n\n\n  console.log(\"Line \" + this.lexer.yylloc.first_line + \" : \" + this.getTokenName(this.token) + \">\" + this.lexer.yytext + \"<\" + \" @-->\" + line);\n  return this;\n};\n/**\n * Force the parser to check the current token.\n *\n * If the current token does not match to expected token,\n * the an error will be raised.\n *\n * If the suppressError mode is activated, then the error will\n * be added to the program error stack and this function will return `false`.\n *\n * @param {String|Number} token\n * @return {boolean}\n * @throws Error\n */\n\n\nparser.prototype.expect = function (token) {\n  if (Array.isArray(token)) {\n    if (token.indexOf(this.token) === -1) {\n      this.error(token);\n      return false;\n    }\n  } else if (this.token != token) {\n    this.error(token);\n    return false;\n  }\n\n  return true;\n};\n/**\n * Returns the current token contents\n * @return {String}\n */\n\n\nparser.prototype.text = function () {\n  return this.lexer.yytext;\n};\n/** consume the next token **/\n\n\nparser.prototype.next = function () {\n  // prepare the back command\n  if (this.token !== \";\" || this.lexer.yytext === \";\") {\n    // ignore '?>' from automated resolution\n    // https://github.com/glayzzle/php-parser/issues/168\n    this.prev = [this.lexer.yylloc.last_line, this.lexer.yylloc.last_column, this.lexer.offset];\n  } // eating the token\n\n\n  this.lex(); // showing the debug\n\n  if (this.debug) {\n    this.showlog();\n  } // handling comments\n\n\n  if (this.extractDoc) {\n    while (this.token === this.tok.T_COMMENT || this.token === this.tok.T_DOC_COMMENT) {\n      // APPEND COMMENTS\n      if (this.token === this.tok.T_COMMENT) {\n        this._docs.push(this.read_comment());\n      } else {\n        this._docs.push(this.read_doc_comment());\n      }\n    }\n  }\n\n  return this;\n};\n/**\n * Eating a token\n */\n\n\nparser.prototype.lex = function () {\n  // append on token stack\n  if (this.extractTokens) {\n    do {\n      // the token\n      this.token = this.lexer.lex() || this.EOF;\n      if (this.token === this.EOF) return this;\n      var entry = this.lexer.yytext;\n\n      if (this.lexer.engine.tokens.values.hasOwnProperty(this.token)) {\n        entry = [this.lexer.engine.tokens.values[this.token], entry, this.lexer.yylloc.first_line, this.lexer.yylloc.first_offset, this.lexer.offset];\n      } else {\n        entry = [null, entry, this.lexer.yylloc.first_line, this.lexer.yylloc.first_offset, this.lexer.offset];\n      }\n\n      this._tokens.push(entry);\n\n      if (this.token === this.tok.T_CLOSE_TAG) {\n        // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n        this.token = \";\";\n        return this;\n      } else if (this.token === this.tok.T_OPEN_TAG_WITH_ECHO) {\n        this.token = this.tok.T_ECHO;\n        return this;\n      }\n    } while (this.token === this.tok.T_WHITESPACE || // ignore white space\n    !this.extractDoc && (this.token === this.tok.T_COMMENT || // ignore single lines comments\n    this.token === this.tok.T_DOC_COMMENT) || // ignore doc comments\n    // ignore open tags\n    this.token === this.tok.T_OPEN_TAG);\n  } else {\n    this.token = this.lexer.lex() || this.EOF;\n  }\n\n  return this;\n};\n/**\n * Check if token is of specified type\n */\n\n\nparser.prototype.is = function (type) {\n  if (Array.isArray(type)) {\n    return type.indexOf(this.token) !== -1;\n  }\n\n  return this.entries[type].has(this.token);\n}; // extends the parser with syntax files\n\n\n[array, _class, comment, expr, _function, _if, loops, main, namespace, scalar, statement, _switch, _try, utils$1, variable].forEach(function (ext) {\n  for (var k in ext) {\n    if (parser.prototype.hasOwnProperty(k)) {\n      // @see https://github.com/glayzzle/php-parser/issues/234\n      throw new Error(\"Function \" + k + \" is already defined - collision\");\n    }\n\n    parser.prototype[k] = ext[k];\n  }\n});\nvar parser_1 = parser;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n/**\n * PHP AST Tokens\n * @type {Object}\n */\n\nvar tokens$2 = {\n  values: {\n    101: \"T_HALT_COMPILER\",\n    102: \"T_USE\",\n    103: \"T_ENCAPSED_AND_WHITESPACE\",\n    104: \"T_OBJECT_OPERATOR\",\n    105: \"T_STRING\",\n    106: \"T_DOLLAR_OPEN_CURLY_BRACES\",\n    107: \"T_STRING_VARNAME\",\n    108: \"T_CURLY_OPEN\",\n    109: \"T_NUM_STRING\",\n    110: \"T_ISSET\",\n    111: \"T_EMPTY\",\n    112: \"T_INCLUDE\",\n    113: \"T_INCLUDE_ONCE\",\n    114: \"T_EVAL\",\n    115: \"T_REQUIRE\",\n    116: \"T_REQUIRE_ONCE\",\n    117: \"T_NAMESPACE\",\n    118: \"T_NS_SEPARATOR\",\n    119: \"T_AS\",\n    120: \"T_IF\",\n    121: \"T_ENDIF\",\n    122: \"T_WHILE\",\n    123: \"T_DO\",\n    124: \"T_FOR\",\n    125: \"T_SWITCH\",\n    126: \"T_BREAK\",\n    127: \"T_CONTINUE\",\n    128: \"T_RETURN\",\n    129: \"T_GLOBAL\",\n    130: \"T_STATIC\",\n    131: \"T_ECHO\",\n    132: \"T_INLINE_HTML\",\n    133: \"T_UNSET\",\n    134: \"T_FOREACH\",\n    135: \"T_DECLARE\",\n    136: \"T_TRY\",\n    137: \"T_THROW\",\n    138: \"T_GOTO\",\n    139: \"T_FINALLY\",\n    140: \"T_CATCH\",\n    141: \"T_ENDDECLARE\",\n    142: \"T_LIST\",\n    143: \"T_CLONE\",\n    144: \"T_PLUS_EQUAL\",\n    145: \"T_MINUS_EQUAL\",\n    146: \"T_MUL_EQUAL\",\n    147: \"T_DIV_EQUAL\",\n    148: \"T_CONCAT_EQUAL\",\n    149: \"T_MOD_EQUAL\",\n    150: \"T_AND_EQUAL\",\n    151: \"T_OR_EQUAL\",\n    152: \"T_XOR_EQUAL\",\n    153: \"T_SL_EQUAL\",\n    154: \"T_SR_EQUAL\",\n    155: \"T_INC\",\n    156: \"T_DEC\",\n    157: \"T_BOOLEAN_OR\",\n    158: \"T_BOOLEAN_AND\",\n    159: \"T_LOGICAL_OR\",\n    160: \"T_LOGICAL_AND\",\n    161: \"T_LOGICAL_XOR\",\n    162: \"T_SL\",\n    163: \"T_SR\",\n    164: \"T_IS_IDENTICAL\",\n    165: \"T_IS_NOT_IDENTICAL\",\n    166: \"T_IS_EQUAL\",\n    167: \"T_IS_NOT_EQUAL\",\n    168: \"T_IS_SMALLER_OR_EQUAL\",\n    169: \"T_IS_GREATER_OR_EQUAL\",\n    170: \"T_INSTANCEOF\",\n    171: \"T_INT_CAST\",\n    172: \"T_DOUBLE_CAST\",\n    173: \"T_STRING_CAST\",\n    174: \"T_ARRAY_CAST\",\n    175: \"T_OBJECT_CAST\",\n    176: \"T_BOOL_CAST\",\n    177: \"T_UNSET_CAST\",\n    178: \"T_EXIT\",\n    179: \"T_PRINT\",\n    180: \"T_YIELD\",\n    181: \"T_YIELD_FROM\",\n    182: \"T_FUNCTION\",\n    183: \"T_DOUBLE_ARROW\",\n    184: \"T_DOUBLE_COLON\",\n    185: \"T_ARRAY\",\n    186: \"T_CALLABLE\",\n    187: \"T_CLASS\",\n    188: \"T_ABSTRACT\",\n    189: \"T_TRAIT\",\n    190: \"T_FINAL\",\n    191: \"T_EXTENDS\",\n    192: \"T_INTERFACE\",\n    193: \"T_IMPLEMENTS\",\n    194: \"T_VAR\",\n    195: \"T_PUBLIC\",\n    196: \"T_PROTECTED\",\n    197: \"T_PRIVATE\",\n    198: \"T_CONST\",\n    199: \"T_NEW\",\n    200: \"T_INSTEADOF\",\n    201: \"T_ELSEIF\",\n    202: \"T_ELSE\",\n    203: \"T_ENDSWITCH\",\n    204: \"T_CASE\",\n    205: \"T_DEFAULT\",\n    206: \"T_ENDFOR\",\n    207: \"T_ENDFOREACH\",\n    208: \"T_ENDWHILE\",\n    209: \"T_CONSTANT_ENCAPSED_STRING\",\n    210: \"T_LNUMBER\",\n    211: \"T_DNUMBER\",\n    212: \"T_LINE\",\n    213: \"T_FILE\",\n    214: \"T_DIR\",\n    215: \"T_TRAIT_C\",\n    216: \"T_METHOD_C\",\n    217: \"T_FUNC_C\",\n    218: \"T_NS_C\",\n    219: \"T_START_HEREDOC\",\n    220: \"T_END_HEREDOC\",\n    221: \"T_CLASS_C\",\n    222: \"T_VARIABLE\",\n    223: \"T_OPEN_TAG\",\n    224: \"T_OPEN_TAG_WITH_ECHO\",\n    225: \"T_CLOSE_TAG\",\n    226: \"T_WHITESPACE\",\n    227: \"T_COMMENT\",\n    228: \"T_DOC_COMMENT\",\n    229: \"T_ELLIPSIS\",\n    230: \"T_COALESCE\",\n    231: \"T_POW\",\n    232: \"T_POW_EQUAL\",\n    233: \"T_SPACESHIP\",\n    234: \"T_COALESCE_EQUAL\",\n    235: \"T_FN\"\n  },\n  names: {\n    T_HALT_COMPILER: 101,\n    T_USE: 102,\n    T_ENCAPSED_AND_WHITESPACE: 103,\n    T_OBJECT_OPERATOR: 104,\n    T_STRING: 105,\n    T_DOLLAR_OPEN_CURLY_BRACES: 106,\n    T_STRING_VARNAME: 107,\n    T_CURLY_OPEN: 108,\n    T_NUM_STRING: 109,\n    T_ISSET: 110,\n    T_EMPTY: 111,\n    T_INCLUDE: 112,\n    T_INCLUDE_ONCE: 113,\n    T_EVAL: 114,\n    T_REQUIRE: 115,\n    T_REQUIRE_ONCE: 116,\n    T_NAMESPACE: 117,\n    T_NS_SEPARATOR: 118,\n    T_AS: 119,\n    T_IF: 120,\n    T_ENDIF: 121,\n    T_WHILE: 122,\n    T_DO: 123,\n    T_FOR: 124,\n    T_SWITCH: 125,\n    T_BREAK: 126,\n    T_CONTINUE: 127,\n    T_RETURN: 128,\n    T_GLOBAL: 129,\n    T_STATIC: 130,\n    T_ECHO: 131,\n    T_INLINE_HTML: 132,\n    T_UNSET: 133,\n    T_FOREACH: 134,\n    T_DECLARE: 135,\n    T_TRY: 136,\n    T_THROW: 137,\n    T_GOTO: 138,\n    T_FINALLY: 139,\n    T_CATCH: 140,\n    T_ENDDECLARE: 141,\n    T_LIST: 142,\n    T_CLONE: 143,\n    T_PLUS_EQUAL: 144,\n    T_MINUS_EQUAL: 145,\n    T_MUL_EQUAL: 146,\n    T_DIV_EQUAL: 147,\n    T_CONCAT_EQUAL: 148,\n    T_MOD_EQUAL: 149,\n    T_AND_EQUAL: 150,\n    T_OR_EQUAL: 151,\n    T_XOR_EQUAL: 152,\n    T_SL_EQUAL: 153,\n    T_SR_EQUAL: 154,\n    T_INC: 155,\n    T_DEC: 156,\n    T_BOOLEAN_OR: 157,\n    T_BOOLEAN_AND: 158,\n    T_LOGICAL_OR: 159,\n    T_LOGICAL_AND: 160,\n    T_LOGICAL_XOR: 161,\n    T_SL: 162,\n    T_SR: 163,\n    T_IS_IDENTICAL: 164,\n    T_IS_NOT_IDENTICAL: 165,\n    T_IS_EQUAL: 166,\n    T_IS_NOT_EQUAL: 167,\n    T_IS_SMALLER_OR_EQUAL: 168,\n    T_IS_GREATER_OR_EQUAL: 169,\n    T_INSTANCEOF: 170,\n    T_INT_CAST: 171,\n    T_DOUBLE_CAST: 172,\n    T_STRING_CAST: 173,\n    T_ARRAY_CAST: 174,\n    T_OBJECT_CAST: 175,\n    T_BOOL_CAST: 176,\n    T_UNSET_CAST: 177,\n    T_EXIT: 178,\n    T_PRINT: 179,\n    T_YIELD: 180,\n    T_YIELD_FROM: 181,\n    T_FUNCTION: 182,\n    T_DOUBLE_ARROW: 183,\n    T_DOUBLE_COLON: 184,\n    T_ARRAY: 185,\n    T_CALLABLE: 186,\n    T_CLASS: 187,\n    T_ABSTRACT: 188,\n    T_TRAIT: 189,\n    T_FINAL: 190,\n    T_EXTENDS: 191,\n    T_INTERFACE: 192,\n    T_IMPLEMENTS: 193,\n    T_VAR: 194,\n    T_PUBLIC: 195,\n    T_PROTECTED: 196,\n    T_PRIVATE: 197,\n    T_CONST: 198,\n    T_NEW: 199,\n    T_INSTEADOF: 200,\n    T_ELSEIF: 201,\n    T_ELSE: 202,\n    T_ENDSWITCH: 203,\n    T_CASE: 204,\n    T_DEFAULT: 205,\n    T_ENDFOR: 206,\n    T_ENDFOREACH: 207,\n    T_ENDWHILE: 208,\n    T_CONSTANT_ENCAPSED_STRING: 209,\n    T_LNUMBER: 210,\n    T_DNUMBER: 211,\n    T_LINE: 212,\n    T_FILE: 213,\n    T_DIR: 214,\n    T_TRAIT_C: 215,\n    T_METHOD_C: 216,\n    T_FUNC_C: 217,\n    T_NS_C: 218,\n    T_START_HEREDOC: 219,\n    T_END_HEREDOC: 220,\n    T_CLASS_C: 221,\n    T_VARIABLE: 222,\n    T_OPEN_TAG: 223,\n    T_OPEN_TAG_WITH_ECHO: 224,\n    T_CLOSE_TAG: 225,\n    T_WHITESPACE: 226,\n    T_COMMENT: 227,\n    T_DOC_COMMENT: 228,\n    T_ELLIPSIS: 229,\n    T_COALESCE: 230,\n    T_POW: 231,\n    T_POW_EQUAL: 232,\n    T_SPACESHIP: 233,\n    T_COALESCE_EQUAL: 234,\n    T_FN: 235\n  }\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n/**\n * Defines the location of the node (with it's source contents as string)\n * @constructor Location\n * @property {String|null} source\n * @property {Position} start\n * @property {Position} end\n */\n\nvar Location = function Location(source, start, end) {\n  this.source = source;\n  this.start = start;\n  this.end = end;\n};\n\nvar location_1 = Location;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n/**\n * Each Position object consists of a line number (1-indexed) and a column number (0-indexed):\n * @constructor Position\n * @property {Number} line\n * @property {Number} column\n * @property {Number} offset\n */\n\nvar Position = function Position(line, column, offset) {\n  this.line = line;\n  this.column = column;\n  this.offset = offset;\n};\n\nvar position = Position;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n/**\n * A generic AST node\n * @constructor Node\n * @property {Location|null} loc\n * @property {Comment[]} leadingComments\n * @property {Comment[]?} trailingComments\n * @property {String} kind\n */\n\nvar Node = function Node(kind, docs, location) {\n  this.kind = kind;\n\n  if (docs) {\n    this.leadingComments = docs;\n  }\n\n  if (location) {\n    this.loc = location;\n  }\n};\n/**\n * Attach comments to current node\n * @param {*} docs\n */\n\n\nNode.prototype.setTrailingComments = function (docs) {\n  this.trailingComments = docs;\n};\n/**\n * Destroying an unused node\n */\n\n\nNode.prototype.destroy = function (node) {\n  if (!node) {\n    throw new Error(\"Node already initialized, you must swap with another node\");\n  }\n\n  if (this.leadingComments) {\n    if (node.leadingComments) {\n      node.leadingComments = Array.concat(this.leadingComments, node.leadingComments);\n    } else {\n      node.leadingComments = this.leadingComments;\n    }\n  }\n\n  if (this.trailingComments) {\n    if (node.trailingComments) {\n      node.trailingComments = Array.concat(this.trailingComments, node.trailingComments);\n    } else {\n      node.trailingComments = this.trailingComments;\n    }\n  }\n\n  return node;\n};\n/**\n * Includes current token position of the parser\n * @param {*} parser\n */\n\n\nNode.prototype.includeToken = function (parser) {\n  if (this.loc) {\n    if (this.loc.end) {\n      this.loc.end.line = parser.lexer.yylloc.last_line;\n      this.loc.end.column = parser.lexer.yylloc.last_column;\n      this.loc.end.offset = parser.lexer.offset;\n    }\n\n    if (parser.ast.withSource) {\n      this.loc.source = parser.lexer._input.substring(this.loc.start.offset, parser.lexer.offset);\n    }\n  }\n\n  return this;\n};\n/**\n * Helper for extending the Node class\n * @param {String} type\n * @param {Function} constructor\n * @return {Function}\n */\n\n\nNode[\"extends\"] = function (type, constructor) {\n  constructor.prototype = Object.create(this.prototype);\n  constructor[\"extends\"] = this[\"extends\"];\n  constructor.prototype.constructor = constructor;\n  constructor.kind = type;\n  return constructor;\n};\n\nvar node = Node;\n\nvar KIND = \"expression\";\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Expression\n * @extends {Node}\n */\n\nvar expression = node[\"extends\"](KIND, function Expression(kind, docs, location) {\n  node.apply(this, [kind || KIND, docs, location]);\n});\n\nvar KIND$1 = \"array\";\n/**\n * Defines an array structure\n * @constructor Array\n * @example\n * // PHP code :\n * [1, 'foo' => 'bar', 3]\n *\n * // AST structure :\n * {\n *  \"kind\": \"array\",\n *  \"shortForm\": true\n *  \"items\": [\n *    {\"kind\": \"number\", \"value\": \"1\"},\n *    {\n *      \"kind\": \"entry\",\n *      \"key\": {\"kind\": \"string\", \"value\": \"foo\", \"isDoubleQuote\": false},\n *      \"value\": {\"kind\": \"string\", \"value\": \"bar\", \"isDoubleQuote\": false}\n *    },\n *    {\"kind\": \"number\", \"value\": \"3\"}\n *  ]\n * }\n * @extends {Expression}\n * @property {Entry|Expr|Variable} items List of array items\n * @property {boolean} shortForm Indicate if the short array syntax is used, ex `[]` instead `array()`\n */\n\nvar array$1 = expression[\"extends\"](KIND$1, function Array(shortForm, items, docs, location) {\n  expression.apply(this, [KIND$1, docs, location]);\n  this.items = items;\n  this.shortForm = shortForm;\n});\n\nvar KIND$2 = \"arrowfunc\";\n/**\n * Defines an arrow function (it's like a closure)\n * @constructor ArrowFunc\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {Expression} body\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {boolean} isStatic\n */\n\nvar arrowfunc = expression[\"extends\"](KIND$2, function Closure(args, byref, body, type, nullable, isStatic, docs, location) {\n  expression.apply(this, [KIND$2, docs, location]);\n  this.arguments = args;\n  this.byref = byref;\n  this.body = body;\n  this.type = type;\n  this.nullable = nullable;\n  this.isStatic = isStatic || false;\n});\n\nvar KIND$3 = \"assign\";\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\n\nvar assign = expression[\"extends\"](KIND$3, function Assign(left, right, operator, docs, location) {\n  expression.apply(this, [KIND$3, docs, location]);\n  this.left = left;\n  this.right = right;\n  this.operator = operator;\n});\n\nvar KIND$4 = \"assignref\";\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\n\nvar assignref = expression[\"extends\"](KIND$4, function AssignRef(left, right, docs, location) {\n  expression.apply(this, [KIND$4, docs, location]);\n  this.left = left;\n  this.right = right;\n});\n\nvar KIND$5 = \"operation\";\n/**\n * Defines binary operations\n * @constructor Operation\n * @extends {Expression}\n */\n\nvar operation = expression[\"extends\"](KIND$5, function Operation(kind, docs, location) {\n  expression.apply(this, [kind || KIND$5, docs, location]);\n});\n\nvar KIND$6 = \"bin\";\n/**\n * Binary operations\n * @constructor Bin\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} left\n * @property {Expression} right\n */\n\nvar bin = operation[\"extends\"](KIND$6, function Bin(type, left, right, docs, location) {\n  operation.apply(this, [KIND$6, docs, location]);\n  this.type = type;\n  this.left = left;\n  this.right = right;\n});\n\nvar KIND$7 = \"statement\";\n/**\n * Any statement.\n * @constructor Statement\n * @extends {Node}\n */\n\nvar statement$1 = node[\"extends\"](KIND$7, function Statement(kind, docs, location) {\n  node.apply(this, [kind || KIND$7, docs, location]);\n});\n\nvar KIND$8 = \"block\";\n/**\n * A block statement, i.e., a sequence of statements surrounded by braces.\n * @constructor Block\n * @extends {Statement}\n * @property {Node[]} children\n */\n\nvar block = statement$1[\"extends\"](KIND$8, function Block(kind, children, docs, location) {\n  statement$1.apply(this, [kind || KIND$8, docs, location]);\n  this.children = children.filter(Boolean);\n});\n\nvar KIND$9 = \"literal\";\n/**\n * Defines an array structure\n * @constructor Literal\n * @extends {Expression}\n * @property {string} raw\n * @property {Node|string|number|boolean|null} value\n */\n\nvar literal = expression[\"extends\"](KIND$9, function Literal(kind, value, raw, docs, location) {\n  expression.apply(this, [kind || KIND$9, docs, location]);\n  this.value = value;\n\n  if (raw) {\n    this.raw = raw;\n  }\n});\n\nvar KIND$a = \"boolean\";\n/**\n * Defines a boolean value (true/false)\n * @constructor Boolean\n * @extends {Literal}\n */\n\nvar boolean_1 = literal[\"extends\"](KIND$a, function Boolean(value, raw, docs, location) {\n  literal.apply(this, [KIND$a, value, raw, docs, location]);\n});\n\nvar KIND$b = \"break\";\n/**\n * A break statement\n * @constructor Break\n * @extends {Statement}\n * @property {Number|Null} level\n */\n\nvar _break = statement$1[\"extends\"](KIND$b, function Break(level, docs, location) {\n  statement$1.apply(this, [KIND$b, docs, location]);\n  this.level = level;\n});\n\nvar KIND$c = \"byref\";\n/**\n * Passing by Reference - so the function can modify the variable\n * @constructor ByRef\n * @extends {Expression}\n * @property {expr} what\n */\n\nvar byref = expression[\"extends\"](KIND$c, function ByRef(what, docs, location) {\n  expression.apply(this, [KIND$c, docs, location]);\n  this.what = what;\n});\n\nvar KIND$d = \"call\";\n/**\n * Executes a call statement\n * @constructor Call\n * @extends {Expression}\n * @property {Identifier|Variable|??} what\n * @property {Arguments[]} arguments\n */\n\nvar call = expression[\"extends\"](KIND$d, function Call(what, args, docs, location) {\n  expression.apply(this, [KIND$d, docs, location]);\n  this.what = what;\n  this.arguments = args;\n});\n\nvar KIND$e = \"case\";\n/**\n * A switch case statement\n * @constructor Case\n * @extends {Statement}\n * @property {Expression|null} test - if null, means that the default case\n * @property {Block|null} body\n */\n\nvar _case = statement$1[\"extends\"](KIND$e, function Case(test, body, docs, location) {\n  statement$1.apply(this, [KIND$e, docs, location]);\n  this.test = test;\n  this.body = body;\n});\n\nvar KIND$f = \"cast\";\n/**\n * Binary operations\n * @constructor Cast\n * @extends {Operation}\n * @property {String} type\n * @property {String} raw\n * @property {Expression} expr\n */\n\nvar cast = operation[\"extends\"](KIND$f, function Cast(type, raw, expr, docs, location) {\n  operation.apply(this, [KIND$f, docs, location]);\n  this.type = type;\n  this.raw = raw;\n  this.expr = expr;\n});\n\nvar KIND$g = \"catch\";\n/**\n * Defines a catch statement\n * @constructor Catch\n * @extends {Statement}\n * @property {Identifier[]} what\n * @property {Variable} variable\n * @property {Statement} body\n * @see http://php.net/manual/en/language.exceptions.php\n */\n\nvar _catch = statement$1[\"extends\"](KIND$g, function Catch(body, what, variable, docs, location) {\n  statement$1.apply(this, [KIND$g, docs, location]);\n  this.body = body;\n  this.what = what;\n  this.variable = variable;\n});\n\nvar KIND$h = \"declaration\";\nvar IS_UNDEFINED = \"\";\nvar IS_PUBLIC = \"public\";\nvar IS_PROTECTED = \"protected\";\nvar IS_PRIVATE = \"private\";\n/**\n * A declaration statement (function, class, interface...)\n * @constructor Declaration\n * @extends {Statement}\n * @property {Identifier|string} name\n */\n\nvar Declaration = statement$1[\"extends\"](KIND$h, function Declaration(kind, name, docs, location) {\n  statement$1.apply(this, [kind || KIND$h, docs, location]);\n  this.name = name;\n});\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\n\nDeclaration.prototype.parseFlags = function (flags) {\n  this.isAbstract = flags[2] === 1;\n  this.isFinal = flags[2] === 2;\n\n  if (this.kind !== \"class\") {\n    if (flags[0] === -1) {\n      this.visibility = IS_UNDEFINED;\n    } else if (flags[0] === null) {\n      this.visibility = null;\n    } else if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE;\n    }\n\n    this.isStatic = flags[1] === 1;\n  }\n};\n\nvar declaration = Declaration;\n\nvar KIND$i = \"class\";\n/**\n * A class definition\n * @constructor Class\n * @extends {Declaration}\n * @property {Identifier|null} extends\n * @property {Identifier[]} implements\n * @property {Declaration[]} body\n * @property {boolean} isAnonymous\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n */\n\nvar _class$1 = declaration[\"extends\"](KIND$i, function Class(name, ext, impl, body, flags, docs, location) {\n  declaration.apply(this, [KIND$i, name, docs, location]);\n  this.isAnonymous = name ? false : true;\n  this[\"extends\"] = ext;\n  this[\"implements\"] = impl;\n  this.body = body;\n  this.parseFlags(flags);\n});\n\nvar KIND$j = \"constantstatement\";\n/**\n * Declares a constants into the current scope\n * @constructor ConstantStatement\n * @extends {Statement}\n * @property {Constant[]} constants\n */\n\nvar constantstatement = statement$1[\"extends\"](KIND$j, function ConstantStatement(kind, constants, docs, location) {\n  statement$1.apply(this, [kind || KIND$j, docs, location]);\n  this.constants = constants;\n});\n\nvar KIND$k = \"classconstant\";\nvar IS_UNDEFINED$1 = \"\";\nvar IS_PUBLIC$1 = \"public\";\nvar IS_PROTECTED$1 = \"protected\";\nvar IS_PRIVATE$1 = \"private\";\n/**\n * Defines a class/interface/trait constant\n * @constructor ClassConstant\n * @extends {ConstantStatement}\n * @property {string} visibility\n */\n\nvar ClassConstant = constantstatement[\"extends\"](KIND$k, function ClassConstant(kind, constants, flags, docs, location) {\n  constantstatement.apply(this, [kind || KIND$k, constants, docs, location]);\n  this.parseFlags(flags);\n});\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\n\nClassConstant.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED$1;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC$1;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED$1;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE$1;\n  }\n};\n\nvar classconstant = ClassConstant;\n\nvar KIND$l = \"clone\";\n/**\n * Defines a clone call\n * @constructor Clone\n * @extends {Expression}\n * @property {Expression} what\n */\n\nvar clone = expression[\"extends\"](KIND$l, function Clone(what, docs, location) {\n  expression.apply(this, [KIND$l, docs, location]);\n  this.what = what;\n});\n\nvar KIND$m = \"closure\";\n/**\n * Defines a closure\n * @constructor Closure\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Variable[]} uses\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n * @property {boolean} isStatic\n */\n\nvar closure = expression[\"extends\"](KIND$m, function Closure(args, byref, uses, type, nullable, isStatic, docs, location) {\n  expression.apply(this, [KIND$m, docs, location]);\n  this.uses = uses;\n  this.arguments = args;\n  this.byref = byref;\n  this.type = type;\n  this.nullable = nullable;\n  this.isStatic = isStatic || false;\n  this.body = null;\n});\n\n/**\n * Abstract documentation node (ComentLine or CommentBlock)\n * @constructor Comment\n * @extends {Node}\n * @property {String} value\n */\n\n\nvar comment$1 = node[\"extends\"](\"comment\", function Comment(kind, value, docs, location) {\n  node.apply(this, [kind, docs, location]);\n  this.value = value;\n});\n\nvar KIND$n = \"commentblock\";\n/**\n * A comment block (multiline)\n * @constructor CommentBlock\n * @extends {Comment}\n */\n\nvar commentblock = comment$1[\"extends\"](KIND$n, function CommentBlock(value, docs, location) {\n  comment$1.apply(this, [KIND$n, value, docs, location]);\n});\n\nvar KIND$o = \"commentline\";\n/**\n * A single line comment\n * @constructor CommentLine\n * @extends {Comment}\n */\n\nvar commentline = comment$1[\"extends\"](KIND$o, function CommentLine(value, docs, location) {\n  comment$1.apply(this, [KIND$o, value, docs, location]);\n});\n\nvar KIND$p = \"constant\";\n/**\n * Defines a constant\n * @constructor Constant\n * @extends {Node}\n * @property {string} name\n * @property {Node|string|number|boolean|null} value\n */\n\nvar constant = node[\"extends\"](KIND$p, function Constant(name, value, docs, location) {\n  node.apply(this, [KIND$p, docs, location]);\n  this.name = name;\n  this.value = value;\n});\n\nvar KIND$q = \"continue\";\n/**\n * A continue statement\n * @constructor Continue\n * @extends {Statement}\n * @property {Number|Null} level\n */\n\nvar _continue = statement$1[\"extends\"](KIND$q, function Continue(level, docs, location) {\n  statement$1.apply(this, [KIND$q, docs, location]);\n  this.level = level;\n});\n\nvar KIND$r = \"declare\";\n/**\n * The declare construct is used to set execution directives for a block of code\n * @constructor Declare\n * @extends {Block}\n * @property {Array[]} directives\n * @property {String} mode\n * @see http://php.net/manual/en/control-structures.declare.php\n */\n\nvar Declare = block[\"extends\"](KIND$r, function Declare(directives, body, mode, docs, location) {\n  block.apply(this, [KIND$r, body, docs, location]);\n  this.directives = directives;\n  this.mode = mode;\n});\n/**\n * The node is declared as a short tag syntax :\n * ```php\n * <?php\n * declare(ticks=1):\n * // some statements\n * enddeclare;\n * ```\n * @constant {String} MODE_SHORT\n */\n\nDeclare.MODE_SHORT = \"short\";\n/**\n * The node is declared bracket enclosed code :\n * ```php\n * <?php\n * declare(ticks=1) {\n * // some statements\n * }\n * ```\n * @constant {String} MODE_BLOCK\n */\n\nDeclare.MODE_BLOCK = \"block\";\n/**\n * The node is declared as a simple statement. In order to make things simpler\n * children of the node are automatically collected until the next\n * declare statement.\n * ```php\n * <?php\n * declare(ticks=1);\n * // some statements\n * declare(ticks=2);\n * // some statements\n * ```\n * @constant {String} MODE_NONE\n */\n\nDeclare.MODE_NONE = \"none\";\nvar declare = Declare;\n\nvar KIND$s = \"declaredirective\";\n/**\n * Defines a constant\n * @constructor DeclareDirective\n * @extends {Node}\n * @property {Identifier} name\n * @property {Node|string|number|boolean|null} value\n */\n\nvar declaredirective = node[\"extends\"](KIND$s, function DeclareDirective(key, value, docs, location) {\n  node.apply(this, [KIND$s, docs, location]);\n  this.key = key;\n  this.value = value;\n});\n\nvar KIND$t = \"do\";\n/**\n * Defines a do/while statement\n * @constructor Do\n * @extends {Statement}\n * @property {Expression} test\n * @property {Statement} body\n */\n\nvar _do = statement$1[\"extends\"](KIND$t, function Do(test, body, docs, location) {\n  statement$1.apply(this, [KIND$t, docs, location]);\n  this.test = test;\n  this.body = body;\n});\n\nvar KIND$u = \"echo\";\n/**\n * Defines system based call\n * @constructor Echo\n * @property {boolean} shortForm\n * @extends {Statement}\n */\n\nvar echo = statement$1[\"extends\"](KIND$u, function Echo(expressions, shortForm, docs, location) {\n  statement$1.apply(this, [KIND$u, docs, location]);\n  this.shortForm = shortForm;\n  this.expressions = expressions;\n});\n\nvar KIND$v = \"empty\";\n/**\n * Defines an empty check call\n * @constructor Empty\n * @extends {Expression}\n */\n\nvar empty = expression[\"extends\"](KIND$v, function Empty(expression$1, docs, location) {\n  expression.apply(this, [KIND$v, docs, location]);\n  this.expression = expression$1;\n});\n\nvar KIND$w = \"encapsed\";\n/**\n * Defines an encapsed string (contains expressions)\n * @constructor Encapsed\n * @extends {Literal}\n * @property {String} type - Defines the type of encapsed string (shell, heredoc, string)\n * @property {String|Null} label - The heredoc label, defined only when the type is heredoc\n */\n\nvar Encapsed = literal[\"extends\"](KIND$w, function Encapsed(value, raw, type, docs, location) {\n  literal.apply(this, [KIND$w, value, raw, docs, location]);\n  this.type = type;\n});\n/**\n * The node is a double quote string :\n * ```php\n * <?php\n * echo \"hello $world\";\n * ```\n * @constant {String} TYPE_STRING - `string`\n */\n\nEncapsed.TYPE_STRING = \"string\";\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo `ls -larth $path`;\n * ```\n * @constant {String} TYPE_SHELL - `shell`\n */\n\nEncapsed.TYPE_SHELL = \"shell\";\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo <<<STR\n *  Hello $world\n * STR\n * ;\n * ```\n * @constant {String} TYPE_HEREDOC - `heredoc`\n */\n\nEncapsed.TYPE_HEREDOC = \"heredoc\";\n/**\n * The node contains a list of constref / variables / expr :\n * ```php\n * <?php\n * echo $foo->bar_$baz;\n * ```\n * @constant {String} TYPE_OFFSET - `offset`\n */\n\nEncapsed.TYPE_OFFSET = \"offset\";\nvar encapsed = Encapsed;\n\nvar KIND$x = \"encapsedpart\";\n/**\n * Part of `Encapsed` node\n * @constructor EncapsedPart\n * @extends {Expression}\n * @property {Expression} expression\n * @property {String} syntax\n * @property {Boolean} curly\n */\n\nvar encapsedpart = expression[\"extends\"](KIND$x, function EncapsedPart(expression$1, syntax, curly, docs, location) {\n  expression.apply(this, [KIND$x, docs, location]);\n  this.expression = expression$1;\n  this.syntax = syntax;\n  this.curly = curly;\n});\n\nvar KIND$y = \"entry\";\n/**\n * An array entry - see [Array](#array)\n * @constructor Entry\n * @extends {Expression}\n * @property {Node|null} key The entry key/offset\n * @property {Node} value The entry value\n * @property {Boolean} byRef By reference\n * @property {Boolean} unpack Argument unpacking\n */\n\nvar entry = expression[\"extends\"](KIND$y, function Entry(key, value, byRef, unpack, docs, location) {\n  expression.apply(this, [KIND$y, docs, location]);\n  this.key = key;\n  this.value = value;\n  this.byRef = byRef;\n  this.unpack = unpack;\n});\n\nvar KIND$z = \"error\";\n/**\n * Defines an error node (used only on silentMode)\n * @constructor Error\n * @extends {Node}\n * @property {string} message\n * @property {number} line\n * @property {number|string} token\n * @property {string|array} expected\n */\n\nvar error = node[\"extends\"](KIND$z, function Error(message, token, line, expected, docs, location) {\n  node.apply(this, [KIND$z, docs, location]);\n  this.message = message;\n  this.token = token;\n  this.line = line;\n  this.expected = expected;\n});\n\nvar KIND$A = \"eval\";\n/**\n * Defines an eval statement\n * @constructor Eval\n * @extends {Expression}\n * @property {Node} source\n */\n\nvar _eval = expression[\"extends\"](KIND$A, function Eval(source, docs, location) {\n  expression.apply(this, [KIND$A, docs, location]);\n  this.source = source;\n});\n\nvar KIND$B = \"exit\";\n/**\n * Defines an exit / die call\n * @constructor Exit\n * @extends {Expression}\n * @property {Node|null} expression\n * @property {Boolean} useDie\n */\n\nvar exit = expression[\"extends\"](KIND$B, function Exit(expression$1, useDie, docs, location) {\n  expression.apply(this, [KIND$B, docs, location]);\n  this.expression = expression$1;\n  this.useDie = useDie;\n});\n\nvar KIND$C = \"expressionstatement\";\n/**\n * Defines an expression based statement\n * @constructor ExpressionStatement\n * @extends {Statement}\n * @property {Expression} expression\n */\n\nvar expressionstatement = statement$1[\"extends\"](KIND$C, function ExpressionStatement(expr, docs, location) {\n  statement$1.apply(this, [KIND$C, docs, location]);\n  this.expression = expr;\n});\n\nvar KIND$D = \"for\";\n/**\n * Defines a for iterator\n * @constructor For\n * @extends {Statement}\n * @property {Expression[]} init\n * @property {Expression[]} test\n * @property {Expression[]} increment\n * @property {Statement} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.for.php\n */\n\nvar _for = statement$1[\"extends\"](KIND$D, function For(init, test, increment, body, shortForm, docs, location) {\n  statement$1.apply(this, [KIND$D, docs, location]);\n  this.init = init;\n  this.test = test;\n  this.increment = increment;\n  this.shortForm = shortForm;\n  this.body = body;\n});\n\nvar KIND$E = \"foreach\";\n/**\n * Defines a foreach iterator\n * @constructor Foreach\n * @extends {Statement}\n * @property {Expression} source\n * @property {Expression|null} key\n * @property {Expression} value\n * @property {Statement} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.foreach.php\n */\n\nvar foreach = statement$1[\"extends\"](KIND$E, function Foreach(source, key, value, body, shortForm, docs, location) {\n  statement$1.apply(this, [KIND$E, docs, location]);\n  this.source = source;\n  this.key = key;\n  this.value = value;\n  this.shortForm = shortForm;\n  this.body = body;\n});\n\nvar KIND$F = \"function\";\n/**\n * Defines a classic function\n * @constructor Function\n * @extends {Declaration}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n */\n\nvar _function$1 = declaration[\"extends\"](KIND$F, function _Function(name, args, byref, type, nullable, docs, location) {\n  declaration.apply(this, [KIND$F, name, docs, location]);\n  this.arguments = args;\n  this.byref = byref;\n  this.type = type;\n  this.nullable = nullable;\n  this.body = null;\n});\n\nvar KIND$G = \"global\";\n/**\n * Imports a variable from the global scope\n * @constructor Global\n * @extends {Statement}\n * @property {Variable[]} items\n */\n\nvar global = statement$1[\"extends\"](KIND$G, function Global(items, docs, location) {\n  statement$1.apply(this, [KIND$G, docs, location]);\n  this.items = items;\n});\n\nvar KIND$H = \"goto\";\n/**\n * Defines goto statement\n * @constructor Goto\n * @extends {Statement}\n * @property {String} label\n * @see {Label}\n */\n\nvar goto_1 = statement$1[\"extends\"](KIND$H, function Goto(label, docs, location) {\n  statement$1.apply(this, [KIND$H, docs, location]);\n  this.label = label;\n});\n\nvar KIND$I = \"halt\";\n/**\n * Halts the compiler execution\n * @constructor Halt\n * @extends {Statement}\n * @property {String} after - String after the halt statement\n * @see http://php.net/manual/en/function.halt-compiler.php\n */\n\nvar halt = statement$1[\"extends\"](KIND$I, function Halt(after, docs, location) {\n  statement$1.apply(this, [KIND$I, docs, location]);\n  this.after = after;\n});\n\nvar KIND$J = \"identifier\";\n/**\n * Defines an identifier node\n * @constructor Identifier\n * @extends {Node}\n * @property {string} name\n */\n\nvar Identifier = node[\"extends\"](KIND$J, function Identifier(name, docs, location) {\n  node.apply(this, [KIND$J, docs, location]);\n  this.name = name;\n});\nvar identifier = Identifier;\n\nvar KIND$K = \"if\";\n/**\n * Defines a if statement\n * @constructor If\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {Block|If|null} alternate\n * @property {boolean} shortForm\n */\n\nvar _if$1 = statement$1[\"extends\"](KIND$K, function If(test, body, alternate, shortForm, docs, location) {\n  statement$1.apply(this, [KIND$K, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.alternate = alternate;\n  this.shortForm = shortForm;\n});\n\nvar KIND$L = \"include\";\n/**\n * Defines system include call\n * @constructor Include\n * @extends {Expression}\n * @property {Node} target\n * @property {boolean} once\n * @property {boolean} require\n */\n\nvar include = expression[\"extends\"](KIND$L, function Include(once, require, target, docs, location) {\n  expression.apply(this, [KIND$L, docs, location]);\n  this.once = once;\n  this.require = require;\n  this.target = target;\n});\n\nvar KIND$M = \"inline\";\n/**\n * Defines inline html output (treated as echo output)\n * @constructor Inline\n * @extends {Literal}\n */\n\nvar inline = literal[\"extends\"](KIND$M, function Inline(value, raw, docs, location) {\n  literal.apply(this, [KIND$M, value, raw, docs, location]);\n});\n\nvar KIND$N = \"interface\";\n/**\n * An interface definition\n * @constructor Interface\n * @extends {Declaration}\n * @property {Identifier[]} extends\n * @property {Declaration[]} body\n */\n\nvar _interface = declaration[\"extends\"](KIND$N, function Interface(name, ext, body, docs, location) {\n  declaration.apply(this, [KIND$N, name, docs, location]);\n  this[\"extends\"] = ext;\n  this.body = body;\n});\n\nvar KIND$O = \"isset\";\n/**\n * Defines an isset call\n * @constructor Isset\n * @extends {Expression}\n */\n\nvar isset = expression[\"extends\"](KIND$O, function Isset(variables, docs, location) {\n  expression.apply(this, [KIND$O, docs, location]);\n  this.variables = variables;\n});\n\nvar KIND$P = \"label\";\n/**\n * A label statement (referenced by goto)\n * @constructor Label\n * @extends {Statement}\n * @property {String} name\n */\n\nvar label = statement$1[\"extends\"](KIND$P, function Label(name, docs, location) {\n  statement$1.apply(this, [KIND$P, docs, location]);\n  this.name = name;\n});\n\nvar KIND$Q = \"list\";\n/**\n * Defines list assignment\n * @constructor List\n * @extends {Expression}\n * @property {boolean} shortForm\n */\n\nvar list = expression[\"extends\"](KIND$Q, function List(items, shortForm, docs, location) {\n  expression.apply(this, [KIND$Q, docs, location]);\n  this.items = items;\n  this.shortForm = shortForm;\n});\n\nvar KIND$R = \"lookup\";\n/**\n * Lookup on an offset in the specified object\n * @constructor Lookup\n * @extends {Expression}\n * @property {Expression} what\n * @property {Expression} offset\n */\n\nvar lookup = expression[\"extends\"](KIND$R, function Lookup(kind, what, offset, docs, location) {\n  expression.apply(this, [kind || KIND$R, docs, location]);\n  this.what = what;\n  this.offset = offset;\n});\n\nvar KIND$S = \"magic\";\n/**\n * Defines magic constant\n * @constructor Magic\n * @extends {Literal}\n */\n\nvar magic = literal[\"extends\"](KIND$S, function Magic(value, raw, docs, location) {\n  literal.apply(this, [KIND$S, value, raw, docs, location]);\n});\n\nvar KIND$T = \"method\";\n/**\n * Defines a class/interface/trait method\n * @constructor Method\n * @extends {_Function}\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n * @property {boolean} isStatic\n * @property {string} visibility\n */\n\nvar method = _function$1[\"extends\"](KIND$T, function Method() {\n  _function$1.apply(this, arguments);\n\n  this.kind = KIND$T;\n});\n\nvar KIND$U = \"reference\";\n/**\n * Defines a reference node\n * @constructor Reference\n * @extends {Node}\n */\n\nvar Reference = node[\"extends\"](KIND$U, function Reference(kind, docs, location) {\n  node.apply(this, [kind || KIND$U, docs, location]);\n});\nvar reference = Reference;\n\nvar KIND$V = \"name\";\n/**\n * Defines a class reference node\n * @constructor Name\n * @extends {Reference}\n * @property {string} name\n * @property {string} resolution\n */\n\nvar Name = reference[\"extends\"](KIND$V, function Name(name, isRelative, docs, location) {\n  reference.apply(this, [KIND$V, docs, location]);\n\n  if (isRelative) {\n    this.resolution = Name.RELATIVE_NAME;\n  } else if (name.length === 1) {\n    this.resolution = Name.UNQUALIFIED_NAME;\n  } else if (!name[0]) {\n    this.resolution = Name.FULL_QUALIFIED_NAME;\n  } else {\n    this.resolution = Name.QUALIFIED_NAME;\n  }\n\n  this.name = name.join(\"\\\\\");\n});\n/**\n * This is an identifier without a namespace separator, such as Foo\n * @constant {String} UNQUALIFIED_NAME\n */\n\nName.UNQUALIFIED_NAME = \"uqn\";\n/**\n * This is an identifier with a namespace separator, such as Foo\\Bar\n * @constant {String} QUALIFIED_NAME\n */\n\nName.QUALIFIED_NAME = \"qn\";\n/**\n * This is an identifier with a namespace separator that begins with\n * a namespace separator, such as \\Foo\\Bar. The namespace \\Foo is also\n * a fully qualified name.\n * @constant {String} FULL_QUALIFIED_NAME\n */\n\nName.FULL_QUALIFIED_NAME = \"fqn\";\n/**\n * This is an identifier starting with namespace, such as namespace\\Foo\\Bar.\n * @constant {String} RELATIVE_NAME\n */\n\nName.RELATIVE_NAME = \"rn\";\nvar name = Name;\n\nvar KIND$W = \"namespace\";\n/**\n * The main program node\n * @constructor Namespace\n * @extends {Block}\n * @property {String} name\n * @property {Boolean} withBrackets\n */\n\nvar namespace$1 = block[\"extends\"](KIND$W, function Namespace(name, children, withBrackets, docs, location) {\n  block.apply(this, [KIND$W, children, docs, location]);\n  this.name = name;\n  this.withBrackets = withBrackets || false;\n});\n\nvar KIND$X = \"new\";\n/**\n * Creates a new instance of the specified class\n * @constructor New\n * @extends {Expression}\n * @property {Identifier|Variable|Class} what\n * @property {Arguments[]} arguments\n */\n\nvar _new = expression[\"extends\"](KIND$X, function New(what, args, docs, location) {\n  expression.apply(this, [KIND$X, docs, location]);\n  this.what = what;\n  this.arguments = args;\n});\n\nvar KIND$Y = \"noop\";\n/**\n * Ignore this node, it implies a no operation block, for example :\n * [$foo, $bar, /* here a noop node * /]\n * @constructor Noop\n * @extends {Node}\n */\n\nvar noop = node[\"extends\"](KIND$Y, function Noop(docs, location) {\n  node.apply(this, [KIND$Y, docs, location]);\n});\n\nvar KIND$Z = \"nowdoc\";\n/**\n * Defines a nowdoc string\n * @constructor NowDoc\n * @extends {Literal}\n * @property {String} label\n * @property {String} raw\n */\n\nvar nowdoc = literal[\"extends\"](KIND$Z, function Nowdoc(value, raw, label, docs, location) {\n  literal.apply(this, [KIND$Z, value, raw, docs, location]);\n  this.label = label;\n});\n\nvar KIND$_ = \"nullkeyword\";\n/**\n * Represents the null keyword\n * @constructor NullKeyword\n * @extends {Node}\n */\n\nvar nullkeyword = node[\"extends\"](KIND$_, function NullKeyword(raw, docs, location) {\n  node.apply(this, [KIND$_, docs, location]);\n  this.raw = raw;\n});\n\nvar KIND$$ = \"number\";\n/**\n * Defines a numeric value\n * @constructor Number\n * @extends {Literal}\n */\n\nvar number = literal[\"extends\"](KIND$$, function Number(value, raw, docs, location) {\n  literal.apply(this, [KIND$$, value, raw, docs, location]);\n});\n\nvar KIND$10 = \"offsetlookup\";\n/**\n * Lookup on an offset in an array\n * @constructor OffsetLookup\n * @extends {Lookup}\n */\n\nvar offsetlookup = lookup[\"extends\"](KIND$10, function OffsetLookup(what, offset, docs, location) {\n  lookup.apply(this, [KIND$10, what, offset, docs, location]);\n});\n\nvar KIND$11 = \"parameter\";\n/**\n * Defines a function parameter\n * @constructor Parameter\n * @extends {Declaration}\n * @property {Identifier|null} type\n * @property {Node|null} value\n * @property {boolean} byref\n * @property {boolean} variadic\n * @property {boolean} nullable\n */\n\nvar parameter = declaration[\"extends\"](KIND$11, function Parameter(name, type, value, isRef, isVariadic, nullable, docs, location) {\n  declaration.apply(this, [KIND$11, name, docs, location]);\n  this.value = value;\n  this.type = type;\n  this.byref = isRef;\n  this.variadic = isVariadic;\n  this.nullable = nullable;\n});\n\nvar KIND$12 = \"parentreference\";\n/**\n * Defines a class reference node\n * @constructor ParentReference\n * @extends {Reference}\n */\n\nvar ParentReference = reference[\"extends\"](KIND$12, function ParentReference(raw, docs, location) {\n  reference.apply(this, [KIND$12, docs, location]);\n  this.raw = raw;\n});\nvar parentreference = ParentReference;\n\nvar KIND$13 = \"post\";\n/**\n * Defines a post operation `$i++` or `$i--`\n * @constructor Post\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\n\nvar post = operation[\"extends\"](KIND$13, function Post(type, what, docs, location) {\n  operation.apply(this, [KIND$13, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n\nvar KIND$14 = \"pre\";\n/**\n * Defines a pre operation `++$i` or `--$i`\n * @constructor Pre\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\n\nvar pre = operation[\"extends\"](KIND$14, function Pre(type, what, docs, location) {\n  operation.apply(this, [KIND$14, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n\nvar KIND$15 = \"print\";\n/**\n * Outputs\n * @constructor Print\n * @extends {Expression}\n */\n\nvar print = expression[\"extends\"](KIND$15, function Print(expression$1, docs, location) {\n  expression.apply(this, [KIND$15, docs, location]);\n  this.expression = expression$1;\n});\n\nvar KIND$16 = \"program\";\n/**\n * The main program node\n * @constructor Program\n * @extends {Block}\n * @property {Error[]} errors\n * @property {Doc[]?} comments\n * @property {String[]?} tokens\n */\n\nvar program = block[\"extends\"](KIND$16, function Program(children, errors, comments, tokens, docs, location) {\n  block.apply(this, [KIND$16, children, docs, location]);\n  this.errors = errors;\n\n  if (comments) {\n    this.comments = comments;\n  }\n\n  if (tokens) {\n    this.tokens = tokens;\n  }\n});\n\nvar KIND$17 = \"property\";\n/**\n * Defines a class property\n * @constructor Property\n * @extends {Statement}\n * @property {string} name\n * @property {Node|null} value\n * @property {boolean} nullable\n * @property {Identifier|Array<Identifier>|null} type\n */\n\nvar property$1 = statement$1[\"extends\"](KIND$17, function Property(name, value, nullable, type, docs, location) {\n  statement$1.apply(this, [KIND$17, docs, location]);\n  this.name = name;\n  this.value = value;\n  this.nullable = nullable;\n  this.type = type;\n});\n\nvar KIND$18 = \"propertylookup\";\n/**\n * Lookup to an object property\n * @constructor PropertyLookup\n * @extends {Lookup}\n */\n\nvar propertylookup = lookup[\"extends\"](KIND$18, function PropertyLookup(what, offset, docs, location) {\n  lookup.apply(this, [KIND$18, what, offset, docs, location]);\n});\n\nvar KIND$19 = \"propertystatement\";\nvar IS_UNDEFINED$2 = \"\";\nvar IS_PUBLIC$2 = \"public\";\nvar IS_PROTECTED$2 = \"protected\";\nvar IS_PRIVATE$2 = \"private\";\n/**\n * Declares a properties into the current scope\n * @constructor PropertyStatement\n * @extends {Statement}\n * @property {Property[]} properties\n */\n\nvar PropertyStatement = statement$1[\"extends\"](KIND$19, function PropertyStatement(kind, properties, flags, docs, location) {\n  statement$1.apply(this, [KIND$19, docs, location]);\n  this.properties = properties;\n  this.parseFlags(flags);\n});\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\n\nPropertyStatement.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED$2;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC$2;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED$2;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE$2;\n  }\n\n  this.isStatic = flags[1] === 1;\n};\n\nvar propertystatement = PropertyStatement;\n\nvar KIND$1a = \"retif\";\n/**\n * Defines a short if statement that returns a value\n * @constructor RetIf\n * @extends {Expression}\n * @property {Expression} test\n * @property {Expression} trueExpr\n * @property {Expression} falseExpr\n */\n\nvar retif = expression[\"extends\"](KIND$1a, function RetIf(test, trueExpr, falseExpr, docs, location) {\n  expression.apply(this, [KIND$1a, docs, location]);\n  this.test = test;\n  this.trueExpr = trueExpr;\n  this.falseExpr = falseExpr;\n});\n\nvar KIND$1b = \"return\";\n/**\n * A continue statement\n * @constructor Return\n * @extends {Statement}\n * @property {Expression|null} expr\n */\n\nvar _return = statement$1[\"extends\"](KIND$1b, function Return(expr, docs, location) {\n  statement$1.apply(this, [KIND$1b, docs, location]);\n  this.expr = expr;\n});\n\nvar KIND$1c = \"selfreference\";\n/**\n * Defines a class reference node\n * @constructor SelfReference\n * @extends {Reference}\n */\n\nvar SelfReference = reference[\"extends\"](KIND$1c, function SelfReference(raw, docs, location) {\n  reference.apply(this, [KIND$1c, docs, location]);\n  this.raw = raw;\n});\nvar selfreference = SelfReference;\n\nvar KIND$1d = \"silent\";\n/**\n * Avoids to show/log warnings & notices from the inner expression\n * @constructor Silent\n * @extends {Expression}\n * @property {Expression} expr\n */\n\nvar silent = expression[\"extends\"](KIND$1d, function Silent(expr, docs, location) {\n  expression.apply(this, [KIND$1d, docs, location]);\n  this.expr = expr;\n});\n\nvar KIND$1e = \"static\";\n/**\n * Declares a static variable into the current scope\n * @constructor Static\n * @extends {Statement}\n * @property {StaticVariable[]} variables\n */\n\nvar _static = statement$1[\"extends\"](KIND$1e, function Static(variables, docs, location) {\n  statement$1.apply(this, [KIND$1e, docs, location]);\n  this.variables = variables;\n});\n\nvar KIND$1f = \"staticvariable\";\n/**\n * Defines a constant\n * @constructor StaticVariable\n * @extends {Node}\n * @property {Variable} variable\n * @property {Node|string|number|boolean|null} defaultValue\n */\n\nvar staticvariable = node[\"extends\"](KIND$1f, function StaticVariable(variable, defaultValue, docs, location) {\n  node.apply(this, [KIND$1f, docs, location]);\n  this.variable = variable;\n  this.defaultValue = defaultValue;\n});\n\nvar KIND$1g = \"staticlookup\";\n/**\n * Lookup to a static property\n * @constructor StaticLookup\n * @extends {Lookup}\n */\n\nvar staticlookup = lookup[\"extends\"](KIND$1g, function StaticLookup(what, offset, docs, location) {\n  lookup.apply(this, [KIND$1g, what, offset, docs, location]);\n});\n\nvar KIND$1h = \"staticreference\";\n/**\n * Defines a class reference node\n * @constructor StaticReference\n * @extends {Reference}\n */\n\nvar StaticReference = reference[\"extends\"](KIND$1h, function StaticReference(raw, docs, location) {\n  reference.apply(this, [KIND$1h, docs, location]);\n  this.raw = raw;\n});\nvar staticreference = StaticReference;\n\nvar KIND$1i = \"string\";\n/**\n * Defines a string (simple ou double quoted) - chars are already escaped\n * @constructor String\n * @extends {Literal}\n * @property {boolean} unicode\n * @property {boolean} isDoubleQuote\n * @see {Encapsed}\n */\n\nvar string = literal[\"extends\"](KIND$1i, function String(isDoubleQuote, value, unicode, raw, docs, location) {\n  literal.apply(this, [KIND$1i, value, raw, docs, location]);\n  this.unicode = unicode;\n  this.isDoubleQuote = isDoubleQuote;\n});\n\nvar KIND$1j = \"switch\";\n/**\n * Defines a switch statement\n * @constructor Switch\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {boolean} shortForm\n */\n\nvar _switch$1 = statement$1[\"extends\"](KIND$1j, function Switch(test, body, shortForm, docs, location) {\n  statement$1.apply(this, [KIND$1j, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.shortForm = shortForm;\n});\n\nvar KIND$1k = \"throw\";\n/**\n * Defines a throw statement\n * @constructor Throw\n * @extends {Statement}\n * @property {Expression} what\n */\n\nvar _throw = statement$1[\"extends\"](KIND$1k, function Throw(what, docs, location) {\n  statement$1.apply(this, [KIND$1k, docs, location]);\n  this.what = what;\n});\n\nvar KIND$1l = \"trait\";\n/**\n * A trait definition\n * @constructor Trait\n * @extends {Declaration}\n * @property {Declaration[]} body\n */\n\nvar trait = declaration[\"extends\"](KIND$1l, function Trait(name, body, docs, location) {\n  declaration.apply(this, [KIND$1l, name, docs, location]);\n  this.body = body;\n});\n\nvar KIND$1m = \"traitalias\";\nvar IS_UNDEFINED$3 = \"\";\nvar IS_PUBLIC$3 = \"public\";\nvar IS_PROTECTED$3 = \"protected\";\nvar IS_PRIVATE$3 = \"private\";\n/**\n * Defines a trait alias\n * @constructor TraitAlias\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier|null} as\n * @property {string|null} visibility\n */\n\nvar traitalias = node[\"extends\"](KIND$1m, function TraitAlias(trait, method, as, flags, docs, location) {\n  node.apply(this, [KIND$1m, docs, location]);\n  this.trait = trait;\n  this.method = method;\n  this.as = as;\n  this.visibility = IS_UNDEFINED$3;\n\n  if (flags) {\n    if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC$3;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED$3;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE$3;\n    }\n  }\n});\n\nvar KIND$1n = \"traitprecedence\";\n/**\n * Defines a trait alias\n * @constructor TraitPrecedence\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier[]} instead\n */\n\nvar traitprecedence = node[\"extends\"](KIND$1n, function TraitPrecedence(trait, method, instead, docs, location) {\n  node.apply(this, [KIND$1n, docs, location]);\n  this.trait = trait;\n  this.method = method;\n  this.instead = instead;\n});\n\nvar KIND$1o = \"traituse\";\n/**\n * Defines a trait usage\n * @constructor TraitUse\n * @extends {Node}\n * @property {Identifier[]} traits\n * @property {Node[]|null} adaptations\n */\n\nvar traituse = node[\"extends\"](KIND$1o, function TraitUse(traits, adaptations, docs, location) {\n  node.apply(this, [KIND$1o, docs, location]);\n  this.traits = traits;\n  this.adaptations = adaptations;\n});\n\nvar KIND$1p = \"try\";\n/**\n * Defines a try statement\n * @constructor Try\n * @extends {Statement}\n * @property {Block} body\n * @property {Catch[]} catches\n * @property {Block} allways\n */\n\nvar _try$1 = statement$1[\"extends\"](KIND$1p, function Try(body, catches, always, docs, location) {\n  statement$1.apply(this, [KIND$1p, docs, location]);\n  this.body = body;\n  this.catches = catches;\n  this.always = always;\n});\n\nvar KIND$1q = \"typereference\";\n/**\n * Defines a class reference node\n * @constructor TypeReference\n * @extends {Reference}\n * @property {string} name\n */\n\nvar TypeReference = reference[\"extends\"](KIND$1q, function TypeReference(name, raw, docs, location) {\n  reference.apply(this, [KIND$1q, docs, location]);\n  this.name = name;\n  this.raw = raw;\n});\nTypeReference.types = [\"int\", \"float\", \"string\", \"bool\", \"object\", \"array\", \"callable\", \"iterable\", \"void\"];\nvar typereference = TypeReference;\n\nvar KIND$1r = \"unary\";\n/**\n * Unary operations\n * @constructor Unary\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} what\n */\n\nvar unary = operation[\"extends\"](KIND$1r, function Unary(type, what, docs, location) {\n  operation.apply(this, [KIND$1r, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n\nvar KIND$1s = \"unset\";\n/**\n * Deletes references to a list of variables\n * @constructor Unset\n * @extends {Statement}\n */\n\nvar unset = statement$1[\"extends\"](KIND$1s, function Unset(variables, docs, location) {\n  statement$1.apply(this, [KIND$1s, docs, location]);\n  this.variables = variables;\n});\n\nvar KIND$1t = \"usegroup\";\n/**\n * Defines a use statement (with a list of use items)\n * @constructor UseGroup\n * @extends {Statement}\n * @property {String|null} name\n * @property {String|null} type - Possible value : function, const\n * @property {UseItem[]} item\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\n\nvar usegroup = statement$1[\"extends\"](KIND$1t, function UseGroup(name, type, items, docs, location) {\n  statement$1.apply(this, [KIND$1t, docs, location]);\n  this.name = name;\n  this.type = type;\n  this.items = items;\n});\n\nvar KIND$1u = \"useitem\";\n/**\n * Defines a use statement (from namespace)\n * @constructor UseItem\n * @extends {Statement}\n * @property {String} name\n * @property {String|null} type - Possible value : function, const\n * @property {Identifier|null} alias\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\n\nvar UseItem = statement$1[\"extends\"](KIND$1u, function UseItem(name, alias, type, docs, location) {\n  statement$1.apply(this, [KIND$1u, docs, location]);\n  this.name = name;\n  this.alias = alias;\n  this.type = type;\n});\n/**\n * Importing a constant\n * @constant {String} TYPE_CONST\n */\n\nUseItem.TYPE_CONST = \"const\";\n/**\n * Importing a function\n * @constant {String} TYPE_FUNC\n */\n\nUseItem.TYPE_FUNCTION = \"function\";\nvar useitem = UseItem;\n\nvar KIND$1v = \"variable\";\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Variable\n * @extends {Expression}\n * @example\n * // PHP code :\n * $foo\n * // AST output\n * {\n *  \"kind\": \"variable\",\n *  \"name\": \"foo\",\n *  \"curly\": false\n * }\n * @property {String|Node} name The variable name (can be a complex expression when the name is resolved dynamically)\n * @property {boolean} curly Indicate if the name is defined between curlies, ex `${foo}`\n */\n\nvar variable$1 = expression[\"extends\"](KIND$1v, function Variable(name, curly, docs, location) {\n  expression.apply(this, [KIND$1v, docs, location]);\n  this.name = name;\n  this.curly = curly || false;\n});\n\nvar KIND$1w = \"variadic\";\n/**\n * Introduce a list of items into the arguments of the call\n * @constructor variadic\n * @extends {Expression}\n * @property {Array|Expression} what\n * @see https://wiki.php.net/rfc/argument_unpacking\n */\n\nvar variadic = expression[\"extends\"](KIND$1w, function variadic(what, docs, location) {\n  expression.apply(this, [KIND$1w, docs, location]);\n  this.what = what;\n});\n\nvar KIND$1x = \"while\";\n/**\n * Defines a while statement\n * @constructor While\n * @extends {Statement}\n * @property {Expression} test\n * @property {Statement} body\n * @property {boolean} shortForm\n */\n\nvar _while = statement$1[\"extends\"](KIND$1x, function While(test, body, shortForm, docs, location) {\n  statement$1.apply(this, [KIND$1x, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.shortForm = shortForm;\n});\n\nvar KIND$1y = \"yield\";\n/**\n * Defines a yield generator statement\n * @constructor Yield\n * @extends {Expression}\n * @property {Expression|Null} value\n * @property {Expression|Null} key\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\n\nvar _yield = expression[\"extends\"](KIND$1y, function Yield(value, key, docs, location) {\n  expression.apply(this, [KIND$1y, docs, location]);\n  this.value = value;\n  this.key = key;\n});\n\nvar KIND$1z = \"yieldfrom\";\n/**\n * Defines a yield from generator statement\n * @constructor YieldFrom\n * @extends {Expression}\n * @property {Expression} value\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\n\nvar yieldfrom = expression[\"extends\"](KIND$1z, function YieldFrom(value, docs, location) {\n  expression.apply(this, [KIND$1z, docs, location]);\n  this.value = value;\n});\n\n/**\n * ## Class hierarchy\n *\n * - [Location](#location)\n * - [Position](#position)\n * - [Node](#node)\n *   - [Noop](#noop)\n *   - [NullKeyword](#nullkeyword)\n *   - [StaticVariable](#staticvariable)\n *   - [EncapsedPart](#encapsedpart)\n *   - [Constant](#constant)\n *   - [Identifier](#identifier)\n *   - [Reference](#reference)\n *     - [TypeReference](#typereference)\n *     - [ParentReference](#parentreference)\n *     - [StaticReference](#staticreference)\n *     - [SelfReference](#selfreference)\n *     - [Name](#name)\n *   - [TraitUse](#traituse)\n *   - [TraitAlias](#traitalias)\n *   - [TraitPrecedence](#traitprecedence)\n *   - [Comment](#comment)\n *     - [CommentLine](#commentline)\n *     - [CommentBlock](#commentblock)\n *   - [Error](#error)\n *   - [Expression](#expression)\n *     - [Entry](#entry)\n *     - [ArrowFunc](#arrowfunc)\n *     - [Closure](#closure)\n *     - [ByRef](#byref)\n *     - [Silent](#silent)\n *     - [RetIf](#retif)\n *     - [New](#new)\n *     - [Include](#include)\n *     - [Call](#call)\n *     - [Eval](#eval)\n *     - [Exit](#exit)\n *     - [Clone](#clone)\n *     - [Assign](#assign)\n *     - [AssignRef](#assignref)\n *     - [Array](#array)\n *     - [List](#list)\n *     - [Variable](#variable)\n *     - [Variadic](#variadic)\n *     - [Yield](#yield)\n *     - [YieldFrom](#yieldfrom)\n *     - [Print](#print)\n *     - [Isset](#isset)\n *     - [Empty](#empty)\n *     - [Lookup](#lookup)\n *       - [PropertyLookup](#propertylookup)\n *       - [StaticLookup](#staticlookup)\n *       - [OffsetLookup](#offsetlookup)\n *     - [Operation](#operation)\n *       - [Pre](#pre)\n *       - [Post](#post)\n *       - [Bin](#bin)\n *       - [Unary](#unary)\n *       - [Cast](#cast)\n *     - [Literal](#literal)\n *       - [Boolean](#boolean)\n *       - [String](#string)\n *       - [Number](#number)\n *       - [Inline](#inline)\n *       - [Magic](#magic)\n *       - [Nowdoc](#nowdoc)\n *       - [Encapsed](#encapsed)\n *   - [Statement](#statement)\n *     - [ConstantStatement](#constantstatement)\n *       - [ClassConstant](#classconstant)\n *     - [Return](#return)\n *     - [Label](#label)\n *     - [Continue](#continue)\n *     - [Case](#case)\n *     - [Break](#break)\n *     - [Echo](#echo)\n *     - [Unset](#unset)\n *     - [Halt](#halt)\n *     - [Declare](#declare)\n *     - [Global](#global)\n *     - [Static](#static)\n *     - [If](#if)\n *     - [Do](#do)\n *     - [While](#while)\n *     - [For](#for)\n *     - [Foreach](#foreach)\n *     - [Switch](#switch)\n *     - [Goto](#goto)\n *     - [Try](#try)\n *     - [Catch](#catch)\n *     - [Throw](#throw)\n *     - [UseGroup](#usegroup)\n *     - [UseItem](#useitem)\n *     - [Block](#block)\n *       - [Program](#program)\n *       - [Namespace](#namespace)\n *     - [PropertyStatement](#propertystatement)\n *     - [Property](#property)\n *     - [Declaration](#declaration)\n *       - [Class](#class)\n *       - [Interface](#interface)\n *       - [Trait](#trait)\n *       - [Function](#function)\n *         - [Method](#method)\n *       - [Parameter](#parameter)\n * ---\n */\n\n/**\n * The AST builder class\n * @constructor AST\n * @tutorial AST\n * @property {Boolean} withPositions - Should locate any node (by default false)\n * @property {Boolean} withSource - Should extract the node original code (by default false)\n */\n\n\nvar AST = function AST(withPositions, withSource) {\n  this.withPositions = withPositions;\n  this.withSource = withSource;\n};\n/**\n * Create a position node from specified parser\n * including it's lexer current state\n * @param {Parser}\n * @return {Position}\n * @private\n */\n\n\nAST.prototype.position = function (parser) {\n  return new position(parser.lexer.yylloc.first_line, parser.lexer.yylloc.first_column, parser.lexer.yylloc.first_offset);\n}; // operators in ascending order of precedence\n\n\nAST.precedence = {};\n[[\"or\"], [\"xor\"], [\"and\"], [\"=\"], [\"?\"], [\"??\"], [\"||\"], [\"&&\"], [\"|\"], [\"^\"], [\"&\"], [\"==\", \"!=\", \"===\", \"!==\",\n/* '<>', */\n\"<=>\"], [\"<\", \"<=\", \">\", \">=\"], [\"<<\", \">>\"], [\"+\", \"-\", \".\"], [\"*\", \"/\", \"%\"], [\"!\"], [\"instanceof\"], [\"cast\", \"silent\"], [\"**\"] // TODO: [ (array)\n// TODO: clone, new\n].forEach(function (list, index) {\n  list.forEach(function (operator) {\n    AST.precedence[operator] = index + 1;\n  });\n});\n\nAST.prototype.isRightAssociative = function (operator) {\n  return operator === \"**\" || operator === \"??\";\n};\n/**\n * Change parent node informations after swapping childs\n */\n\n\nAST.prototype.swapLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    target.loc.start = first.loc.start;\n    target.loc.end = last.loc.end;\n\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(target.loc.start.offset, target.loc.end.offset);\n    }\n  }\n};\n/**\n * Includes locations from first & last into the target\n */\n\n\nAST.prototype.resolveLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    if (target.loc.start.offset > first.loc.start.offset) {\n      target.loc.start = first.loc.start;\n    }\n\n    if (target.loc.end.offset < last.loc.end.offset) {\n      target.loc.end = last.loc.end;\n    }\n\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(target.loc.start.offset, target.loc.end.offset);\n    }\n  }\n};\n/**\n * Check and fix precence, by default using right\n */\n\n\nAST.prototype.resolvePrecedence = function (result, parser) {\n  var buffer, lLevel, rLevel; // handling precendence\n\n  if (result.kind === \"call\") {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result, parser);\n  } else if (result.kind === \"propertylookup\" || result.kind === \"staticlookup\" || result.kind === \"offsetlookup\" && result.offset) {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result.offset, parser);\n  } else if (result.kind === \"bin\") {\n    if (result.right && !result.right.parenthesizedExpression) {\n      if (result.right.kind === \"bin\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[result.right.type];\n\n        if (lLevel && rLevel && rLevel <= lLevel && !this.isRightAssociative(result.type)) {\n          // https://github.com/glayzzle/php-parser/issues/79\n          // shift precedence\n          buffer = result.right;\n          result.right = result.right.left;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.left = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.left, buffer.right, parser);\n          result = buffer;\n        }\n      } else if (result.right.kind === \"retif\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[\"?\"];\n\n        if (lLevel && rLevel && rLevel <= lLevel) {\n          buffer = result.right;\n          result.right = result.right.test;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.test = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n          result = buffer;\n        }\n      }\n    }\n  } else if ((result.kind === \"silent\" || result.kind === \"cast\") && result.expr && !result.expr.parenthesizedExpression) {\n    // https://github.com/glayzzle/php-parser/issues/172\n    if (result.expr.kind === \"bin\") {\n      buffer = result.expr;\n      result.expr = result.expr.left;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.left = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.left, buffer.right, parser);\n      result = buffer;\n    } else if (result.expr.kind === \"retif\") {\n      buffer = result.expr;\n      result.expr = result.expr.test;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"unary\") {\n    // https://github.com/glayzzle/php-parser/issues/75\n    if (result.what && !result.what.parenthesizedExpression) {\n      // unary precedence is allways lower\n      if (result.what.kind === \"bin\") {\n        buffer = result.what;\n        result.what = result.what.left;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.left = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.left, buffer.right, parser);\n        result = buffer;\n      } else if (result.what.kind === \"retif\") {\n        buffer = result.what;\n        result.what = result.what.test;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.test = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"retif\") {\n    // https://github.com/glayzzle/php-parser/issues/77\n    if (result.falseExpr && result.falseExpr.kind === \"retif\" && !result.falseExpr.parenthesizedExpression) {\n      buffer = result.falseExpr;\n      result.falseExpr = buffer.test;\n      this.swapLocations(result, result.test, result.falseExpr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"assign\") {\n    // https://github.com/glayzzle/php-parser/issues/81\n    if (result.right && result.right.kind === \"bin\" && !result.right.parenthesizedExpression) {\n      lLevel = AST.precedence[\"=\"];\n      rLevel = AST.precedence[result.right.type]; // only shifts with and, xor, or\n\n      if (lLevel && rLevel && rLevel < lLevel) {\n        buffer = result.right;\n        result.right = result.right.left;\n        buffer.left = result;\n        this.swapLocations(buffer, buffer.left, result.right, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"expressionstatement\") {\n    this.swapLocations(result, result.expression, result, parser);\n  }\n\n  return result;\n};\n/**\n * Prepares an AST node\n * @param {String|null} kind - Defines the node type\n * (if null, the kind must be passed at the function call)\n * @param {Parser} parser - The parser instance (use for extracting locations)\n * @return {Function}\n */\n\n\nAST.prototype.prepare = function (kind, docs, parser) {\n  var start = null;\n\n  if (this.withPositions || this.withSource) {\n    start = this.position(parser);\n  }\n\n  var self = this; // returns the node\n\n  var result = function result() {\n    var location = null;\n    var args = Array.prototype.slice.call(arguments);\n    args.push(docs);\n\n    if (self.withPositions || self.withSource) {\n      var src = null;\n\n      if (self.withSource) {\n        src = parser.lexer._input.substring(start.offset, parser.prev[2]);\n      } // if with source, need location on swapLocations function\n\n\n      location = new location_1(src, start, new position(parser.prev[0], parser.prev[1], parser.prev[2])); // last argument is allways the location\n\n      args.push(location);\n    } // handle lazy kind definitions\n\n\n    if (!kind) {\n      kind = args.shift();\n    } // build the object\n\n\n    var node = self[kind];\n\n    if (typeof node !== \"function\") {\n      throw new Error('Undefined node \"' + kind + '\"');\n    }\n\n    var astNode = Object.create(node.prototype);\n    node.apply(astNode, args);\n    result.instance = astNode;\n\n    if (result.trailingComments) {\n      // buffer of trailingComments\n      astNode.trailingComments = result.trailingComments;\n    }\n\n    if (typeof result.postBuild === \"function\") {\n      result.postBuild(astNode);\n    }\n\n    if (parser.debug) {\n      delete AST.stack[result.stackUid];\n    }\n\n    return self.resolvePrecedence(astNode, parser);\n  };\n\n  if (parser.debug) {\n    if (!AST.stack) {\n      AST.stack = {};\n      AST.stackUid = 1;\n    }\n\n    AST.stack[++AST.stackUid] = {\n      position: start,\n      stack: new Error().stack.split(\"\\n\").slice(3, 5)\n    };\n    result.stackUid = AST.stackUid;\n  }\n  /**\n   * Sets a list of trailing comments\n   * @param {*} docs\n   */\n\n\n  result.setTrailingComments = function (docs) {\n    if (result.instance) {\n      // already created\n      result.instance.setTrailingComments(docs);\n    } else {\n      result.trailingComments = docs;\n    }\n  };\n  /**\n   * Release a node without using it on the AST\n   */\n\n\n  result.destroy = function (target) {\n    if (docs) {\n      // release current docs stack\n      if (target) {\n        if (!target.leadingComments) {\n          target.leadingComments = docs;\n        } else {\n          target.leadingComments = docs.concat(target.leadingComments);\n        }\n      } else {\n        parser._docIndex = parser._docs.length - docs.length;\n      }\n    }\n\n    if (parser.debug) {\n      delete AST.stack[result.stackUid];\n    }\n  };\n\n  return result;\n};\n\nAST.prototype.checkNodes = function () {\n  var errors = [];\n\n  for (var k in AST.stack) {\n    if (AST.stack.hasOwnProperty(k)) {\n      errors.push(AST.stack[k]);\n    }\n  }\n\n  AST.stack = {};\n  return errors;\n}; // Define all AST nodes\n\n\n[array$1, arrowfunc, assign, assignref, bin, block, boolean_1, _break, byref, call, _case, cast, _catch, _class$1, classconstant, clone, closure, comment$1, commentblock, commentline, constant, constantstatement, _continue, declaration, declare, declaredirective, _do, echo, empty, encapsed, encapsedpart, entry, error, _eval, exit, expression, expressionstatement, _for, foreach, _function$1, global, goto_1, halt, identifier, _if$1, include, inline, _interface, isset, label, list, literal, lookup, magic, method, name, namespace$1, _new, node, noop, nowdoc, nullkeyword, number, offsetlookup, operation, parameter, parentreference, post, pre, print, program, property$1, propertylookup, propertystatement, reference, retif, _return, selfreference, silent, statement$1, _static, staticvariable, staticlookup, staticreference, string, _switch$1, _throw, trait, traitalias, traitprecedence, traituse, _try$1, typereference, unary, unset, usegroup, useitem, variable$1, variadic, _while, _yield, yieldfrom].forEach(function (ctor) {\n  AST.prototype[ctor.kind] = ctor;\n});\nvar ast = AST;\n\n/**\n * @private\n */\n\n\nfunction combine(src, to) {\n  var keys = Object.keys(src);\n  var i = keys.length;\n\n  while (i--) {\n    var k = keys[i];\n    var val = src[k];\n\n    if (val === null) {\n      delete to[k];\n    } else if (typeof val === \"function\") {\n      to[k] = val.bind(to);\n    } else if (Array.isArray(val)) {\n      to[k] = Array.isArray(to[k]) ? to[k].concat(val) : val;\n    } else if (_typeof$1(val) === \"object\") {\n      to[k] = _typeof$1(to[k]) === \"object\" ? combine(val, to[k]) : val;\n    } else {\n      to[k] = val;\n    }\n  }\n\n  return to;\n}\n/**\n * Initialise a new parser instance with the specified options\n *\n * @class\n * @tutorial Engine\n * @example\n * var parser = require('php-parser');\n * var instance = new parser({\n *   parser: {\n *     extractDoc: true,\n *     suppressErrors: true,\n *     version: 704 // or '7.4'\n *   },\n *   ast: {\n *     withPositions: true\n *   },\n *   lexer: {\n *     short_tags: true,\n *     asp_tags: true\n *   }\n * });\n *\n * var evalAST = instance.parseEval('some php code');\n * var codeAST = instance.parseCode('<?php some php code', 'foo.php');\n * var tokens = instance.tokenGetAll('<?php some php code');\n *\n * @param {Object} options - List of options\n * @property {Lexer} lexer\n * @property {Parser} parser\n * @property {AST} ast\n * @property {Object} tokens\n */\n\n\nvar engine = function engine(options) {\n  if (typeof this === \"function\") {\n    return new this(options);\n  }\n\n  this.tokens = tokens$2;\n  this.lexer = new lexer_1(this);\n  this.ast = new ast();\n  this.parser = new parser_1(this.lexer, this.ast);\n\n  if (options && _typeof$1(options) === \"object\") {\n    // disable php7 from lexer if already disabled from parser\n    if (options.parser) {\n      if (!options.lexer) {\n        options.lexer = {};\n      }\n\n      if (options.parser.version) {\n        if (typeof options.parser.version === \"string\") {\n          var version = options.parser.version.split(\".\");\n          version = parseInt(version[0]) * 100 + parseInt(version[1]);\n\n          if (isNaN(version)) {\n            throw new Error(\"Bad version number : \" + options.parser.version);\n          } else {\n            options.parser.version = version;\n          }\n        } else if (typeof options.parser.version !== \"number\") {\n          throw new Error(\"Expecting a number for version\");\n        }\n\n        if (options.parser.version < 500 || options.parser.version > 704) {\n          throw new Error(\"Can only handle versions between 5.x to 7.x\");\n        }\n      }\n    }\n\n    combine(options, this); // same version flags based on parser options\n\n    this.lexer.version = this.parser.version;\n  }\n};\n/**\n * Check if the inpyt is a buffer or a string\n * @param  {Buffer|String} buffer Input value that can be either a buffer or a string\n * @return {String}   Returns the string from input\n */\n\n\nvar getStringBuffer = function getStringBuffer(buffer) {\n  return typeof buffer.write === \"function\" ? buffer.toString() : buffer;\n};\n/**\n * Creates a new instance (Helper)\n * @param {Object} options\n * @return {Engine}\n * @private\n */\n\n\nengine.create = function (options) {\n  return new engine(options);\n};\n/**\n * Evaluate the buffer\n * @private\n */\n\n\nengine.parseEval = function (buffer, options) {\n  var self = new engine(options);\n  return self.parseEval(buffer);\n};\n/**\n * Parse an evaluating mode string (no need to open php tags)\n * @param {String} buffer\n * @return {Program}\n */\n\n\nengine.prototype.parseEval = function (buffer) {\n  this.lexer.mode_eval = true;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, \"eval\");\n};\n/**\n * Static function that parse a php code with open/close tags\n * @private\n */\n\n\nengine.parseCode = function (buffer, filename, options) {\n  if (_typeof$1(filename) === \"object\" && !options) {\n    // retro-compatibility\n    options = filename;\n    filename = \"unknown\";\n  }\n\n  var self = new engine(options);\n  return self.parseCode(buffer, filename);\n};\n/**\n * Function that parse a php code with open/close tags\n *\n * Sample code :\n * ```php\n * <?php $x = 1;\n * ```\n *\n * Usage :\n * ```js\n * var parser = require('php-parser');\n * var phpParser = new parser({\n *   // some options\n * });\n * var ast = phpParser.parseCode('...php code...', 'foo.php');\n * ```\n * @param {String} buffer - The code to be parsed\n * @param {String} filename - Filename\n * @return {Program}\n */\n\n\nengine.prototype.parseCode = function (buffer, filename) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, filename);\n};\n/**\n * Split the buffer into tokens\n * @private\n */\n\n\nengine.tokenGetAll = function (buffer, options) {\n  var self = new engine(options);\n  return self.tokenGetAll(buffer);\n};\n/**\n * Extract tokens from the specified buffer.\n * > Note that the output tokens are *STRICLY* similar to PHP function `token_get_all`\n * @param {String} buffer\n * @return {String[]} - Each item can be a string or an array with following informations [token_name, text, line_number]\n */\n\n\nengine.prototype.tokenGetAll = function (buffer) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = true;\n  buffer = getStringBuffer(buffer);\n  var EOF = this.lexer.EOF;\n  var names = this.tokens.values;\n  this.lexer.setInput(buffer);\n  var token = this.lexer.lex() || EOF;\n  var result = [];\n\n  while (token != EOF) {\n    var entry = this.lexer.yytext;\n\n    if (names.hasOwnProperty(token)) {\n      entry = [names[token], entry, this.lexer.yylloc.first_line];\n    }\n\n    result.push(entry);\n    token = this.lexer.lex() || EOF;\n  }\n\n  return result;\n}; // exports the function\n\n\nvar src = engine; // makes libraries public\n\nvar tokens_1 = tokens$2;\nvar lexer_1$1 = lexer_1;\nvar AST_1 = ast;\nvar parser_1$1 = parser_1;\nvar combine_1 = combine; // allow the default export in index.d.ts\n\nvar default_1 = engine;\nsrc.tokens = tokens_1;\nsrc.lexer = lexer_1$1;\nsrc.AST = AST_1;\nsrc.parser = parser_1$1;\nsrc.combine = combine_1;\nsrc[\"default\"] = default_1;\n\nvar laravel2jsClb = function laravel2jsClb(str, cb) {\n  if (typeof str !== 'string') {\n    var err = new Error('The first parameter was not a string');\n    if (!cb) throw err;\n    return cb(err);\n  }\n\n  var parser = new src({\n    parser: {\n      extractDoc: false,\n      php7: true\n    },\n    ast: {\n      withPositions: false\n    }\n  });\n\n  try {\n    var result = {};\n    var ast = parser.parseCode(str);\n\n    if (ast && ast.children && ast.children.length > 0) {\n      var returnElem = ast.children.find(function (ele) {\n        return ele.kind === 'return';\n      });\n\n      if (returnElem && returnElem.expr && returnElem.expr.kind === 'array' && returnElem.expr.items) {\n        ;\n\n        (function parseArr(items, parent) {\n          items.forEach(function (item) {\n            if (item && item.kind === 'entry' && item.key && item.key.kind === 'string' && item.key.value && item.value) {\n              if (item.value.kind === 'string') {\n                parent[item.key.value] = item.value.value || '';\n              }\n\n              if (item.value.kind === 'array' && item.value.items) {\n                parent[item.key.value] = {};\n                parseArr(item.value.items, parent[item.key.value]);\n              }\n            }\n          });\n        })(returnElem.expr.items, result);\n      }\n    }\n\n    if (cb) return cb(null, result);\n    return result;\n  } catch (e) {\n    if (cb) return cb(e);\n    throw e;\n  }\n};\n\nfunction laravel2js(str, cb) {\n  if (!cb) {\n    return new Promise(function (resolve, reject) {\n      return laravel2jsClb(str, function (err, ret) {\n        return err ? reject(err) : resolve(ret);\n      });\n    });\n  }\n\n  return laravel2jsClb(str, cb);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar js2laravelClb = function js2laravelClb(resources, cb) {\n  var result = \"<?php\\n  return [\";\n  var end = '  ];';\n\n  (function stringifyJs(obj, level) {\n    if (obj) {\n      var keys = Object.keys(obj);\n      keys.forEach(function (key, index) {\n        var value = obj[key] || '';\n\n        if (typeof value === 'string') {\n          value = value.replace(/'/g, '\\\\\\'');\n          result += \"\\n  \".concat('  '.repeat(level), \"'\").concat(key, \"' => '\").concat(value, \"'\");\n        }\n\n        if (_typeof(value) === 'object') {\n          result += \"\\n  \".concat('  '.repeat(level), \"'\").concat(key, \"' => [\");\n          stringifyJs(value, level + 1);\n          result += \"\\n  \".concat('  '.repeat(level), \"]\");\n        }\n\n        if (index + 1 < keys.length) {\n          result += ',';\n        }\n      });\n    }\n  })(resources, 1);\n\n  result += \"\\n\".concat(end);\n  if (cb) return cb(null, result);\n  return result;\n};\n\nfunction js2laravel(resources, cb) {\n  if (!cb) {\n    return new Promise(function (resolve, reject) {\n      return js2laravelClb(resources, function (err, ret) {\n        return err ? reject(err) : resolve(ret);\n      });\n    });\n  }\n\n  return js2laravelClb(resources, cb);\n}\n\nvar index = {\n  laravel2js: laravel2js,\n  js2laravel: js2laravel\n};\n\nexport default index;\nexport { js2laravel, laravel2js };\n"],"sourceRoot":""}