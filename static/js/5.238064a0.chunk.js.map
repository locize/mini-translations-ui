{"version":3,"sources":["../node_modules/safe-buffer/index.js","../node_modules/string_decoder/lib/string_decoder.js","../../file-strings/node_modules/safer-buffer/safer.js","../../file-strings/node_modules/iconv-lite/lib/index.js","../../file-strings/node_modules/iconv-lite/lib/bom-handling.js","../../file-strings/node_modules/iconv-lite/encodings/index.js","../../file-strings/node_modules/iconv-lite/encodings/internal.js","../../file-strings/node_modules/iconv-lite/encodings/utf16.js","../../file-strings/node_modules/iconv-lite/encodings/utf7.js","../../file-strings/node_modules/iconv-lite/encodings/sbcs-codec.js","../../file-strings/node_modules/iconv-lite/encodings/sbcs-data.js","../../file-strings/node_modules/iconv-lite/encodings/sbcs-data-generated.js","../../file-strings/node_modules/iconv-lite/encodings/dbcs-codec.js","../../file-strings/node_modules/iconv-lite/encodings/dbcs-data.js"],"names":["buffer","require","Buffer","copyProps","src","dst","key","SafeBuffer","arg","encodingOrOffset","length","from","alloc","allocUnsafe","allocUnsafeSlow","module","exports","TypeError","size","fill","encoding","buf","undefined","SlowBuffer","isEncoding","toLowerCase","StringDecoder","nb","this","enc","nenc","retried","_normalizeEncoding","Error","normalizeEncoding","text","utf16Text","end","utf16End","fillLast","utf8FillLast","base64Text","base64End","write","simpleWrite","simpleEnd","lastNeed","lastTotal","lastChar","utf8CheckByte","byte","p","r","self","utf8CheckExtraBytes","copy","toString","i","c","charCodeAt","slice","n","prototype","total","j","utf8CheckIncomplete","safer","hasOwnProperty","Safer","Uint8Array","value","RangeError","kStringMaxLength","process","binding","e","constants","MAX_LENGTH","kMaxLength","MAX_STRING_LENGTH","bomHandling","iconv","encodings","defaultCharUnicode","defaultCharSingleByte","encode","str","options","encoder","getEncoder","res","trail","concat","decode","skipDecodeWarning","console","error","decoder","getDecoder","encodingExists","getCodec","toEncoding","fromEncoding","_codecDataCache","_canonicalizeEncoding","codecOptions","codec","codecDef","encodingName","type","replace","bomAware","addBOM","PrependBOM","stripBOM","StripBOM","nodeVer","versions","node","nodeVerArr","split","map","Number","PrependBOMWrapper","StripBOMWrapper","pass","modules","Object","call","InternalCodec","InternalEncoderBase64","InternalEncoderCesu8","InternalDecoderCesu8","utf8","cesu8","unicode11utf8","ucs2","utf16le","binary","base64","hex","_internal","InternalEncoder","InternalDecoder","prevStr","acc","contBytes","accBytes","completeQuads","bufIdx","charCode","curByte","String","fromCharCode","Utf16BECodec","Utf16BEEncoder","Utf16BEDecoder","overflowByte","Utf16Codec","Utf16Encoder","Utf16Decoder","initialBytes","initialBytesLen","detectEncoding","defaultEncoding","asciiCharsLE","asciiCharsBE","_len","Math","min","utf16be","tmp","buf2","utf16","push","Utf7Codec","utf7","unicode11utf7","Utf7Encoder","Utf7Decoder","nonDirectChars","inBase64","base64Accum","chunk","bind","base64Regex","base64Chars","test","plusChar","minusChar","andChar","Utf7IMAPCodec","Utf7IMAPEncoder","base64AccumIdx","Utf7IMAPDecoder","lastI","b64str","canBeDecoded","utf7imap","uChar","base64IMAPChars","SBCSCodec","chars","asciiString","decodeBuf","encodeBuf","SBCSEncoder","SBCSDecoder","_sbcs","newBuf","idx1","idx2","_dbcs","DBCSCodec","UNASSIGNED","SEQ_START","NODE_START","UNASSIGNED_NODE","Array","table","mappingTable","decodeTables","decodeTableSeq","_addDecodeChunk","encodeTable","encodeTableSeq","skipEncodeChars","encodeSkipVals","val","to","_fillEncodeTable","encodeAdd","_setEncodeChar","defCharSB","gb18030","thirdByteNodeIdx","thirdByteNode","fourthByteNodeIdx","fourthByteNode","secondByteNodeIdx","secondByteNode","DBCSEncoder","leadSurrogate","seqObj","DBCSDecoder","nodeIdx","prevBuf","findIdx","l","mid","floor","_getDecodeTrieNode","addr","bytes","curAddr","parseInt","writeTable","k","part","code","codeTrail","len","seq","m","_getEncodeBucket","uCode","high","dbcsCode","bucket","low","_setEncodeSequence","oldVal","prefix","mbCode","nextChar","resCode","subtable","idx","uChars","gbChars","prevBufOffset","seqStart","curSeq","ptr","uCodeLead","ret"],"mappings":"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","file":"static/js/5.238064a0.chunk.js","sourcesContent":["/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n","\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = iconv._canonicalizeEncoding(encoding);\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv._canonicalizeEncoding = function(encoding) {\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n","\"use strict\";\n\nvar BOMChar = '\\uFEFF';\n\nexports.PrependBOM = PrependBOMWrapper\nfunction PrependBOMWrapper(encoder, options) {\n    this.encoder = encoder;\n    this.addBOM = true;\n}\n\nPrependBOMWrapper.prototype.write = function(str) {\n    if (this.addBOM) {\n        str = BOMChar + str;\n        this.addBOM = false;\n    }\n\n    return this.encoder.write(str);\n}\n\nPrependBOMWrapper.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n//------------------------------------------------------------------------------\n\nexports.StripBOM = StripBOMWrapper;\nfunction StripBOMWrapper(decoder, options) {\n    this.decoder = decoder;\n    this.pass = false;\n    this.options = options || {};\n}\n\nStripBOMWrapper.prototype.write = function(buf) {\n    var res = this.decoder.write(buf);\n    if (this.pass || !res)\n        return res;\n\n    if (res[0] === BOMChar) {\n        res = res.slice(1);\n        if (typeof this.options.stripBOM === 'function')\n            this.options.stripBOM();\n    }\n\n    this.pass = true;\n    return res;\n}\n\nStripBOMWrapper.prototype.end = function() {\n    return this.decoder.end();\n}\n\n","\"use strict\";\n\n// Update this array if you add/rename/remove files in this directory.\n// We support Browserify by skipping automatic module discovery and requiring modules directly.\nvar modules = [\n    require(\"./internal\"),\n    require(\"./utf16\"),\n    require(\"./utf7\"),\n    require(\"./sbcs-codec\"),\n    require(\"./sbcs-data\"),\n    require(\"./sbcs-data-generated\"),\n    require(\"./dbcs-codec\"),\n    require(\"./dbcs-data\"),\n];\n\n// Put all encoding/alias/codec definitions to single object and export it. \nfor (var i = 0; i < modules.length; i++) {\n    var module = modules[i];\n    for (var enc in module)\n        if (Object.prototype.hasOwnProperty.call(module, enc))\n            exports[enc] = module[enc];\n}\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  { type: \"_internal\", bomAware: true},\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n    else if (this.enc === \"cesu8\") {\n        this.enc = \"utf8\"; // Use utf8 for decoding.\n        this.encoder = InternalEncoderCesu8;\n\n        // Add decoder for versions of Node not supporting CESU-8\n        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {\n            this.decoder = InternalDecoderCesu8;\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\n        }\n    }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. Its signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype;\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return Buffer.from(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return Buffer.from(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return Buffer.from(this.prevStr, \"base64\");\n}\n\n\n//------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\nfunction InternalEncoderCesu8(options, codec) {\n}\n\nInternalEncoderCesu8.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;\n    for (var i = 0; i < str.length; i++) {\n        var charCode = str.charCodeAt(i);\n        // Naive implementation, but it works because CESU-8 is especially easy\n        // to convert from UTF-16 (which all JS strings are encoded in).\n        if (charCode < 0x80)\n            buf[bufIdx++] = charCode;\n        else if (charCode < 0x800) {\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n        else { // charCode will always be < 0x10000 in javascript.\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n    }\n    return buf.slice(0, bufIdx);\n}\n\nInternalEncoderCesu8.prototype.end = function() {\n}\n\n//------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\nfunction InternalDecoderCesu8(options, codec) {\n    this.acc = 0;\n    this.contBytes = 0;\n    this.accBytes = 0;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function(buf) {\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \n        res = '';\n    for (var i = 0; i < buf.length; i++) {\n        var curByte = buf[i];\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\n            if (contBytes > 0) { // Previous code is invalid\n                res += this.defaultCharUnicode;\n                contBytes = 0;\n            }\n\n            if (curByte < 0x80) { // Single-byte code\n                res += String.fromCharCode(curByte);\n            } else if (curByte < 0xE0) { // Two-byte code\n                acc = curByte & 0x1F;\n                contBytes = 1; accBytes = 1;\n            } else if (curByte < 0xF0) { // Three-byte code\n                acc = curByte & 0x0F;\n                contBytes = 2; accBytes = 1;\n            } else { // Four or more are not supported for CESU-8.\n                res += this.defaultCharUnicode;\n            }\n        } else { // Continuation byte\n            if (contBytes > 0) { // We're waiting for it.\n                acc = (acc << 6) | (curByte & 0x3f);\n                contBytes--; accBytes++;\n                if (contBytes === 0) {\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\n                        res += this.defaultCharUnicode;\n                    else if (accBytes === 3 && acc < 0x800)\n                        res += this.defaultCharUnicode;\n                    else\n                        // Actually add character.\n                        res += String.fromCharCode(acc);\n                }\n            } else { // Unexpected continuation byte\n                res += this.defaultCharUnicode;\n            }\n        }\n    }\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\n    return res;\n}\n\nInternalDecoderCesu8.prototype.end = function() {\n    var res = 0;\n    if (this.contBytes > 0)\n        res += this.defaultCharUnicode;\n    return res;\n}\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = Buffer.alloc(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = Buffer.alloc(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = Buffer.alloc(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n","\"use strict\";\n\n// Manually added data to be used by sbcs codec in addition to generated one.\n\nmodule.exports = {\n    // Not supported by iconv, not sure why.\n    \"10029\": \"maccenteuro\",\n    \"maccenteuro\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\"\n    },\n\n    \"808\": \"cp808\",\n    \"ibm808\": \"cp808\",\n    \"cp808\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ \"\n    },\n\n    \"mik\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n    },\n\n    // Aliases of generated encodings.\n    \"ascii8bit\": \"ascii\",\n    \"usascii\": \"ascii\",\n    \"ansix34\": \"ascii\",\n    \"ansix341968\": \"ascii\",\n    \"ansix341986\": \"ascii\",\n    \"csascii\": \"ascii\",\n    \"cp367\": \"ascii\",\n    \"ibm367\": \"ascii\",\n    \"isoir6\": \"ascii\",\n    \"iso646us\": \"ascii\",\n    \"iso646irv\": \"ascii\",\n    \"us\": \"ascii\",\n\n    \"latin1\": \"iso88591\",\n    \"latin2\": \"iso88592\",\n    \"latin3\": \"iso88593\",\n    \"latin4\": \"iso88594\",\n    \"latin5\": \"iso88599\",\n    \"latin6\": \"iso885910\",\n    \"latin7\": \"iso885913\",\n    \"latin8\": \"iso885914\",\n    \"latin9\": \"iso885915\",\n    \"latin10\": \"iso885916\",\n\n    \"csisolatin1\": \"iso88591\",\n    \"csisolatin2\": \"iso88592\",\n    \"csisolatin3\": \"iso88593\",\n    \"csisolatin4\": \"iso88594\",\n    \"csisolatincyrillic\": \"iso88595\",\n    \"csisolatinarabic\": \"iso88596\",\n    \"csisolatingreek\" : \"iso88597\",\n    \"csisolatinhebrew\": \"iso88598\",\n    \"csisolatin5\": \"iso88599\",\n    \"csisolatin6\": \"iso885910\",\n\n    \"l1\": \"iso88591\",\n    \"l2\": \"iso88592\",\n    \"l3\": \"iso88593\",\n    \"l4\": \"iso88594\",\n    \"l5\": \"iso88599\",\n    \"l6\": \"iso885910\",\n    \"l7\": \"iso885913\",\n    \"l8\": \"iso885914\",\n    \"l9\": \"iso885915\",\n    \"l10\": \"iso885916\",\n\n    \"isoir14\": \"iso646jp\",\n    \"isoir57\": \"iso646cn\",\n    \"isoir100\": \"iso88591\",\n    \"isoir101\": \"iso88592\",\n    \"isoir109\": \"iso88593\",\n    \"isoir110\": \"iso88594\",\n    \"isoir144\": \"iso88595\",\n    \"isoir127\": \"iso88596\",\n    \"isoir126\": \"iso88597\",\n    \"isoir138\": \"iso88598\",\n    \"isoir148\": \"iso88599\",\n    \"isoir157\": \"iso885910\",\n    \"isoir166\": \"tis620\",\n    \"isoir179\": \"iso885913\",\n    \"isoir199\": \"iso885914\",\n    \"isoir203\": \"iso885915\",\n    \"isoir226\": \"iso885916\",\n\n    \"cp819\": \"iso88591\",\n    \"ibm819\": \"iso88591\",\n\n    \"cyrillic\": \"iso88595\",\n\n    \"arabic\": \"iso88596\",\n    \"arabic8\": \"iso88596\",\n    \"ecma114\": \"iso88596\",\n    \"asmo708\": \"iso88596\",\n\n    \"greek\" : \"iso88597\",\n    \"greek8\" : \"iso88597\",\n    \"ecma118\" : \"iso88597\",\n    \"elot928\" : \"iso88597\",\n\n    \"hebrew\": \"iso88598\",\n    \"hebrew8\": \"iso88598\",\n\n    \"turkish\": \"iso88599\",\n    \"turkish8\": \"iso88599\",\n\n    \"thai\": \"iso885911\",\n    \"thai8\": \"iso885911\",\n\n    \"celtic\": \"iso885914\",\n    \"celtic8\": \"iso885914\",\n    \"isoceltic\": \"iso885914\",\n\n    \"tis6200\": \"tis620\",\n    \"tis62025291\": \"tis620\",\n    \"tis62025330\": \"tis620\",\n\n    \"10000\": \"macroman\",\n    \"10006\": \"macgreek\",\n    \"10007\": \"maccyrillic\",\n    \"10079\": \"maciceland\",\n    \"10081\": \"macturkish\",\n\n    \"cspc8codepage437\": \"cp437\",\n    \"cspc775baltic\": \"cp775\",\n    \"cspc850multilingual\": \"cp850\",\n    \"cspcp852\": \"cp852\",\n    \"cspc862latinhebrew\": \"cp862\",\n    \"cpgr\": \"cp869\",\n\n    \"msee\": \"cp1250\",\n    \"mscyrl\": \"cp1251\",\n    \"msansi\": \"cp1252\",\n    \"msgreek\": \"cp1253\",\n    \"msturk\": \"cp1254\",\n    \"mshebr\": \"cp1255\",\n    \"msarab\": \"cp1256\",\n    \"winbaltrim\": \"cp1257\",\n\n    \"cp20866\": \"koi8r\",\n    \"20866\": \"koi8r\",\n    \"ibm878\": \"koi8r\",\n    \"cskoi8r\": \"koi8r\",\n\n    \"cp21866\": \"koi8u\",\n    \"21866\": \"koi8u\",\n    \"ibm1168\": \"koi8u\",\n\n    \"strk10482002\": \"rk1048\",\n\n    \"tcvn5712\": \"tcvn\",\n    \"tcvn57121\": \"tcvn\",\n\n    \"gb198880\": \"iso646cn\",\n    \"cn\": \"iso646cn\",\n\n    \"csiso14jisc6220ro\": \"iso646jp\",\n    \"jisc62201969ro\": \"iso646jp\",\n    \"jp\": \"iso646jp\",\n\n    \"cshproman8\": \"hproman8\",\n    \"r8\": \"hproman8\",\n    \"roman8\": \"hproman8\",\n    \"xroman8\": \"hproman8\",\n    \"ibm1051\": \"hproman8\",\n\n    \"mac\": \"macintosh\",\n    \"csmacintosh\": \"macintosh\",\n};\n\n","\"use strict\";\n\n// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.\nmodule.exports = {\n  \"437\": \"cp437\",\n  \"737\": \"cp737\",\n  \"775\": \"cp775\",\n  \"850\": \"cp850\",\n  \"852\": \"cp852\",\n  \"855\": \"cp855\",\n  \"856\": \"cp856\",\n  \"857\": \"cp857\",\n  \"858\": \"cp858\",\n  \"860\": \"cp860\",\n  \"861\": \"cp861\",\n  \"862\": \"cp862\",\n  \"863\": \"cp863\",\n  \"864\": \"cp864\",\n  \"865\": \"cp865\",\n  \"866\": \"cp866\",\n  \"869\": \"cp869\",\n  \"874\": \"windows874\",\n  \"922\": \"cp922\",\n  \"1046\": \"cp1046\",\n  \"1124\": \"cp1124\",\n  \"1125\": \"cp1125\",\n  \"1129\": \"cp1129\",\n  \"1133\": \"cp1133\",\n  \"1161\": \"cp1161\",\n  \"1162\": \"cp1162\",\n  \"1163\": \"cp1163\",\n  \"1250\": \"windows1250\",\n  \"1251\": \"windows1251\",\n  \"1252\": \"windows1252\",\n  \"1253\": \"windows1253\",\n  \"1254\": \"windows1254\",\n  \"1255\": \"windows1255\",\n  \"1256\": \"windows1256\",\n  \"1257\": \"windows1257\",\n  \"1258\": \"windows1258\",\n  \"28591\": \"iso88591\",\n  \"28592\": \"iso88592\",\n  \"28593\": \"iso88593\",\n  \"28594\": \"iso88594\",\n  \"28595\": \"iso88595\",\n  \"28596\": \"iso88596\",\n  \"28597\": \"iso88597\",\n  \"28598\": \"iso88598\",\n  \"28599\": \"iso88599\",\n  \"28600\": \"iso885910\",\n  \"28601\": \"iso885911\",\n  \"28603\": \"iso885913\",\n  \"28604\": \"iso885914\",\n  \"28605\": \"iso885915\",\n  \"28606\": \"iso885916\",\n  \"windows874\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"win874\": \"windows874\",\n  \"cp874\": \"windows874\",\n  \"windows1250\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"win1250\": \"windows1250\",\n  \"cp1250\": \"windows1250\",\n  \"windows1251\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"win1251\": \"windows1251\",\n  \"cp1251\": \"windows1251\",\n  \"windows1252\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"win1252\": \"windows1252\",\n  \"cp1252\": \"windows1252\",\n  \"windows1253\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"win1253\": \"windows1253\",\n  \"cp1253\": \"windows1253\",\n  \"windows1254\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"win1254\": \"windows1254\",\n  \"cp1254\": \"windows1254\",\n  \"windows1255\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"win1255\": \"windows1255\",\n  \"cp1255\": \"windows1255\",\n  \"windows1256\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\"\n  },\n  \"win1256\": \"windows1256\",\n  \"cp1256\": \"windows1256\",\n  \"windows1257\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙\"\n  },\n  \"win1257\": \"windows1257\",\n  \"cp1257\": \"windows1257\",\n  \"windows1258\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"win1258\": \"windows1258\",\n  \"cp1258\": \"windows1258\",\n  \"iso88591\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28591\": \"iso88591\",\n  \"iso88592\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"cp28592\": \"iso88592\",\n  \"iso88593\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙\"\n  },\n  \"cp28593\": \"iso88593\",\n  \"iso88594\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙\"\n  },\n  \"cp28594\": \"iso88594\",\n  \"iso88595\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ\"\n  },\n  \"cp28595\": \"iso88595\",\n  \"iso88596\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������\"\n  },\n  \"cp28596\": \"iso88596\",\n  \"iso88597\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"cp28597\": \"iso88597\",\n  \"iso88598\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"cp28598\": \"iso88598\",\n  \"iso88599\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"cp28599\": \"iso88599\",\n  \"iso885910\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ\"\n  },\n  \"cp28600\": \"iso885910\",\n  \"iso885911\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"cp28601\": \"iso885911\",\n  \"iso885913\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’\"\n  },\n  \"cp28603\": \"iso885913\",\n  \"iso885914\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ\"\n  },\n  \"cp28604\": \"iso885914\",\n  \"iso885915\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28605\": \"iso885915\",\n  \"iso885916\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ\"\n  },\n  \"cp28606\": \"iso885916\",\n  \"cp437\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm437\": \"cp437\",\n  \"csibm437\": \"cp437\",\n  \"cp737\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm737\": \"cp737\",\n  \"csibm737\": \"cp737\",\n  \"cp775\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ \"\n  },\n  \"ibm775\": \"cp775\",\n  \"csibm775\": \"cp775\",\n  \"cp850\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm850\": \"cp850\",\n  \"csibm850\": \"cp850\",\n  \"cp852\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ \"\n  },\n  \"ibm852\": \"cp852\",\n  \"csibm852\": \"cp852\",\n  \"cp855\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ \"\n  },\n  \"ibm855\": \"cp855\",\n  \"csibm855\": \"cp855\",\n  \"cp856\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm856\": \"cp856\",\n  \"csibm856\": \"cp856\",\n  \"cp857\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm857\": \"cp857\",\n  \"csibm857\": \"cp857\",\n  \"cp858\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm858\": \"cp858\",\n  \"csibm858\": \"cp858\",\n  \"cp860\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm860\": \"cp860\",\n  \"csibm860\": \"cp860\",\n  \"cp861\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm861\": \"cp861\",\n  \"csibm861\": \"cp861\",\n  \"cp862\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm862\": \"cp862\",\n  \"csibm862\": \"cp862\",\n  \"cp863\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm863\": \"cp863\",\n  \"csibm863\": \"cp863\",\n  \"cp864\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�\"\n  },\n  \"ibm864\": \"cp864\",\n  \"csibm864\": \"cp864\",\n  \"cp865\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm865\": \"cp865\",\n  \"csibm865\": \"cp865\",\n  \"cp866\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ \"\n  },\n  \"ibm866\": \"cp866\",\n  \"csibm866\": \"cp866\",\n  \"cp869\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ \"\n  },\n  \"ibm869\": \"cp869\",\n  \"csibm869\": \"cp869\",\n  \"cp922\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ\"\n  },\n  \"ibm922\": \"cp922\",\n  \"csibm922\": \"cp922\",\n  \"cp1046\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�\"\n  },\n  \"ibm1046\": \"cp1046\",\n  \"csibm1046\": \"cp1046\",\n  \"cp1124\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ\"\n  },\n  \"ibm1124\": \"cp1124\",\n  \"csibm1124\": \"cp1124\",\n  \"cp1125\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ \"\n  },\n  \"ibm1125\": \"cp1125\",\n  \"csibm1125\": \"cp1125\",\n  \"cp1129\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1129\": \"cp1129\",\n  \"csibm1129\": \"cp1129\",\n  \"cp1133\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�\"\n  },\n  \"ibm1133\": \"cp1133\",\n  \"csibm1133\": \"cp1133\",\n  \"cp1161\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ \"\n  },\n  \"ibm1161\": \"cp1161\",\n  \"csibm1161\": \"cp1161\",\n  \"cp1162\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"ibm1162\": \"cp1162\",\n  \"csibm1162\": \"cp1162\",\n  \"cp1163\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1163\": \"cp1163\",\n  \"csibm1163\": \"cp1163\",\n  \"maccroatian\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ\"\n  },\n  \"maccyrillic\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"macgreek\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�\"\n  },\n  \"maciceland\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macroman\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macromania\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macthai\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����\"\n  },\n  \"macturkish\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macukraine\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"koi8r\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8u\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8ru\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8t\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"armscii8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�\"\n  },\n  \"rk1048\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"tcvn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000ÚỤ\\u0003ỪỬỮ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010ỨỰỲỶỸÝỴ\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ\"\n  },\n  \"georgianacademy\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"georgianps\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"pt154\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"viscii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001Ẳ\\u0003\\u0004ẴẪ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013Ỷ\\u0015\\u0016\\u0017\\u0018Ỹ\\u001a\\u001b\\u001c\\u001dỴ\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ\"\n  },\n  \"iso646cn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"iso646jp\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"hproman8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�\"\n  },\n  \"macintosh\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"ascii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"tis620\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  }\n}","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.\n// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.\n// To save memory and loading time, we read table files only when requested.\n\nexports._dbcs = DBCSCodec;\n\nvar UNASSIGNED = -1,\n    GB18030_CODE = -2,\n    SEQ_START  = -10,\n    NODE_START = -1000,\n    UNASSIGNED_NODE = new Array(0x100),\n    DEF_CHAR = -1;\n\nfor (var i = 0; i < 0x100; i++)\n    UNASSIGNED_NODE[i] = UNASSIGNED;\n\n\n// Class DBCSCodec reads and initializes mapping tables.\nfunction DBCSCodec(codecOptions, iconv) {\n    this.encodingName = codecOptions.encodingName;\n    if (!codecOptions)\n        throw new Error(\"DBCS codec is called without the data.\")\n    if (!codecOptions.table)\n        throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\n\n    // Load tables.\n    var mappingTable = codecOptions.table();\n\n\n    // Decode tables: MBCS -> Unicode.\n\n    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.\n    // Trie root is decodeTables[0].\n    // Values: >=  0 -> unicode character code. can be > 0xFFFF\n    //         == UNASSIGNED -> unknown/unassigned sequence.\n    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.\n    //         <= NODE_START -> index of the next node in our trie to process next byte.\n    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.\n    this.decodeTables = [];\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.\n\n    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. \n    this.decodeTableSeq = [];\n\n    // Actual mapping tables consist of chunks. Use them to fill up decode tables.\n    for (var i = 0; i < mappingTable.length; i++)\n        this._addDecodeChunk(mappingTable[i]);\n\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\n\n    \n    // Encode tables: Unicode -> DBCS.\n\n    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.\n    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.\n    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).\n    //         == UNASSIGNED -> no conversion found. Output a default char.\n    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.\n    this.encodeTable = [];\n    \n    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of\n    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key\n    // means end of sequence (needed when one sequence is a strict subsequence of another).\n    // Objects are kept separately from encodeTable to increase performance.\n    this.encodeTableSeq = [];\n\n    // Some chars can be decoded, but need not be encoded.\n    var skipEncodeChars = {};\n    if (codecOptions.encodeSkipVals)\n        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\n            var val = codecOptions.encodeSkipVals[i];\n            if (typeof val === 'number')\n                skipEncodeChars[val] = true;\n            else\n                for (var j = val.from; j <= val.to; j++)\n                    skipEncodeChars[j] = true;\n        }\n        \n    // Use decode trie to recursively fill out encode tables.\n    this._fillEncodeTable(0, 0, skipEncodeChars);\n\n    // Add more encoding pairs when needed.\n    if (codecOptions.encodeAdd) {\n        for (var uChar in codecOptions.encodeAdd)\n            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\n                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\n    }\n\n    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = \"?\".charCodeAt(0);\n\n\n    // Load & create GB18030 tables when needed.\n    if (typeof codecOptions.gb18030 === 'function') {\n        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.\n\n        // Add GB18030 decode tables.\n        var thirdByteNodeIdx = this.decodeTables.length;\n        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        var fourthByteNodeIdx = this.decodeTables.length;\n        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        for (var i = 0x81; i <= 0xFE; i++) {\n            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];\n            var secondByteNode = this.decodeTables[secondByteNodeIdx];\n            for (var j = 0x30; j <= 0x39; j++)\n                secondByteNode[j] = NODE_START - thirdByteNodeIdx;\n        }\n        for (var i = 0x81; i <= 0xFE; i++)\n            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;\n        for (var i = 0x30; i <= 0x39; i++)\n            fourthByteNode[i] = GB18030_CODE\n    }        \n}\n\nDBCSCodec.prototype.encoder = DBCSEncoder;\nDBCSCodec.prototype.decoder = DBCSDecoder;\n\n// Decoder helpers\nDBCSCodec.prototype._getDecodeTrieNode = function(addr) {\n    var bytes = [];\n    for (; addr > 0; addr >>= 8)\n        bytes.push(addr & 0xFF);\n    if (bytes.length == 0)\n        bytes.push(0);\n\n    var node = this.decodeTables[0];\n    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.\n        var val = node[bytes[i]];\n\n        if (val == UNASSIGNED) { // Create new node.\n            node[bytes[i]] = NODE_START - this.decodeTables.length;\n            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\n        }\n        else if (val <= NODE_START) { // Existing node.\n            node = this.decodeTables[NODE_START - val];\n        }\n        else\n            throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\n    }\n    return node;\n}\n\n\nDBCSCodec.prototype._addDecodeChunk = function(chunk) {\n    // First element of chunk is the hex mbcs code where we start.\n    var curAddr = parseInt(chunk[0], 16);\n\n    // Choose the decoding node where we'll write our chars.\n    var writeTable = this._getDecodeTrieNode(curAddr);\n    curAddr = curAddr & 0xFF;\n\n    // Write all other elements of the chunk to the table.\n    for (var k = 1; k < chunk.length; k++) {\n        var part = chunk[k];\n        if (typeof part === \"string\") { // String, write as-is.\n            for (var l = 0; l < part.length;) {\n                var code = part.charCodeAt(l++);\n                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate\n                    var codeTrail = part.charCodeAt(l++);\n                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)\n                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\n                    else\n                        throw new Error(\"Incorrect surrogate pair in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n                }\n                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)\n                    var len = 0xFFF - code + 2;\n                    var seq = [];\n                    for (var m = 0; m < len; m++)\n                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.\n\n                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\n                    this.decodeTableSeq.push(seq);\n                }\n                else\n                    writeTable[curAddr++] = code; // Basic char\n            }\n        } \n        else if (typeof part === \"number\") { // Integer, meaning increasing sequence starting with prev character.\n            var charCode = writeTable[curAddr - 1] + 1;\n            for (var l = 0; l < part; l++)\n                writeTable[curAddr++] = charCode++;\n        }\n        else\n            throw new Error(\"Incorrect type '\" + typeof part + \"' given in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n    }\n    if (curAddr > 0xFF)\n        throw new Error(\"Incorrect chunk in \"  + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\n}\n\n// Encoder helpers\nDBCSCodec.prototype._getEncodeBucket = function(uCode) {\n    var high = uCode >> 8; // This could be > 0xFF because of astral characters.\n    if (this.encodeTable[high] === undefined)\n        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.\n    return this.encodeTable[high];\n}\n\nDBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    if (bucket[low] <= SEQ_START)\n        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.\n    else if (bucket[low] == UNASSIGNED)\n        bucket[low] = dbcsCode;\n}\n\nDBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\n    \n    // Get the root of character tree according to first character of the sequence.\n    var uCode = seq[0];\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n\n    var node;\n    if (bucket[low] <= SEQ_START) {\n        // There's already a sequence with  - use it.\n        node = this.encodeTableSeq[SEQ_START-bucket[low]];\n    }\n    else {\n        // There was no sequence object - allocate a new one.\n        node = {};\n        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.\n        bucket[low] = SEQ_START - this.encodeTableSeq.length;\n        this.encodeTableSeq.push(node);\n    }\n\n    // Traverse the character tree, allocating new nodes as needed.\n    for (var j = 1; j < seq.length-1; j++) {\n        var oldVal = node[uCode];\n        if (typeof oldVal === 'object')\n            node = oldVal;\n        else {\n            node = node[uCode] = {}\n            if (oldVal !== undefined)\n                node[DEF_CHAR] = oldVal\n        }\n    }\n\n    // Set the leaf to given dbcsCode.\n    uCode = seq[seq.length-1];\n    node[uCode] = dbcsCode;\n}\n\nDBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\n    var node = this.decodeTables[nodeIdx];\n    for (var i = 0; i < 0x100; i++) {\n        var uCode = node[i];\n        var mbCode = prefix + i;\n        if (skipEncodeChars[mbCode])\n            continue;\n\n        if (uCode >= 0)\n            this._setEncodeChar(uCode, mbCode);\n        else if (uCode <= NODE_START)\n            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);\n        else if (uCode <= SEQ_START)\n            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\n    }\n}\n\n\n\n// == Encoder ==================================================================\n\nfunction DBCSEncoder(options, codec) {\n    // Encoder state\n    this.leadSurrogate = -1;\n    this.seqObj = undefined;\n    \n    // Static data\n    this.encodeTable = codec.encodeTable;\n    this.encodeTableSeq = codec.encodeTableSeq;\n    this.defaultCharSingleByte = codec.defCharSB;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSEncoder.prototype.write = function(str) {\n    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),\n        leadSurrogate = this.leadSurrogate,\n        seqObj = this.seqObj, nextChar = -1,\n        i = 0, j = 0;\n\n    while (true) {\n        // 0. Get next character.\n        if (nextChar === -1) {\n            if (i == str.length) break;\n            var uCode = str.charCodeAt(i++);\n        }\n        else {\n            var uCode = nextChar;\n            nextChar = -1;    \n        }\n\n        // 1. Handle surrogates.\n        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.\n            if (uCode < 0xDC00) { // We've got lead surrogate.\n                if (leadSurrogate === -1) {\n                    leadSurrogate = uCode;\n                    continue;\n                } else {\n                    leadSurrogate = uCode;\n                    // Double lead surrogate found.\n                    uCode = UNASSIGNED;\n                }\n            } else { // We've got trail surrogate.\n                if (leadSurrogate !== -1) {\n                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\n                    leadSurrogate = -1;\n                } else {\n                    // Incomplete surrogate pair - only trail surrogate found.\n                    uCode = UNASSIGNED;\n                }\n                \n            }\n        }\n        else if (leadSurrogate !== -1) {\n            // Incomplete surrogate pair - only lead surrogate found.\n            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.\n            leadSurrogate = -1;\n        }\n\n        // 2. Convert uCode character.\n        var dbcsCode = UNASSIGNED;\n        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence\n            var resCode = seqObj[uCode];\n            if (typeof resCode === 'object') { // Sequence continues.\n                seqObj = resCode;\n                continue;\n\n            } else if (typeof resCode == 'number') { // Sequence finished. Write it.\n                dbcsCode = resCode;\n\n            } else if (resCode == undefined) { // Current character is not part of the sequence.\n\n                // Try default character for this sequence\n                resCode = seqObj[DEF_CHAR];\n                if (resCode !== undefined) {\n                    dbcsCode = resCode; // Found. Write it.\n                    nextChar = uCode; // Current character will be written too in the next iteration.\n\n                } else {\n                    // TODO: What if we have no default? (resCode == undefined)\n                    // Then, we should write first char of the sequence as-is and try the rest recursively.\n                    // Didn't do it for now because no encoding has this situation yet.\n                    // Currently, just skip the sequence and write current char.\n                }\n            }\n            seqObj = undefined;\n        }\n        else if (uCode >= 0) {  // Regular character\n            var subtable = this.encodeTable[uCode >> 8];\n            if (subtable !== undefined)\n                dbcsCode = subtable[uCode & 0xFF];\n            \n            if (dbcsCode <= SEQ_START) { // Sequence start\n                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];\n                continue;\n            }\n\n            if (dbcsCode == UNASSIGNED && this.gb18030) {\n                // Use GB18030 algorithm to find character(s) to write.\n                var idx = findIdx(this.gb18030.uChars, uCode);\n                if (idx != -1) {\n                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;\n                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;\n                    newBuf[j++] = 0x30 + dbcsCode;\n                    continue;\n                }\n            }\n        }\n\n        // 3. Write dbcsCode character.\n        if (dbcsCode === UNASSIGNED)\n            dbcsCode = this.defaultCharSingleByte;\n        \n        if (dbcsCode < 0x100) {\n            newBuf[j++] = dbcsCode;\n        }\n        else if (dbcsCode < 0x10000) {\n            newBuf[j++] = dbcsCode >> 8;   // high byte\n            newBuf[j++] = dbcsCode & 0xFF; // low byte\n        }\n        else {\n            newBuf[j++] = dbcsCode >> 16;\n            newBuf[j++] = (dbcsCode >> 8) & 0xFF;\n            newBuf[j++] = dbcsCode & 0xFF;\n        }\n    }\n\n    this.seqObj = seqObj;\n    this.leadSurrogate = leadSurrogate;\n    return newBuf.slice(0, j);\n}\n\nDBCSEncoder.prototype.end = function() {\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\n        return; // All clean. Most often case.\n\n    var newBuf = Buffer.alloc(10), j = 0;\n\n    if (this.seqObj) { // We're in the sequence.\n        var dbcsCode = this.seqObj[DEF_CHAR];\n        if (dbcsCode !== undefined) { // Write beginning of the sequence.\n            if (dbcsCode < 0x100) {\n                newBuf[j++] = dbcsCode;\n            }\n            else {\n                newBuf[j++] = dbcsCode >> 8;   // high byte\n                newBuf[j++] = dbcsCode & 0xFF; // low byte\n            }\n        } else {\n            // See todo above.\n        }\n        this.seqObj = undefined;\n    }\n\n    if (this.leadSurrogate !== -1) {\n        // Incomplete surrogate pair - only lead surrogate found.\n        newBuf[j++] = this.defaultCharSingleByte;\n        this.leadSurrogate = -1;\n    }\n    \n    return newBuf.slice(0, j);\n}\n\n// Export for testing\nDBCSEncoder.prototype.findIdx = findIdx;\n\n\n// == Decoder ==================================================================\n\nfunction DBCSDecoder(options, codec) {\n    // Decoder state\n    this.nodeIdx = 0;\n    this.prevBuf = Buffer.alloc(0);\n\n    // Static data\n    this.decodeTables = codec.decodeTables;\n    this.decodeTableSeq = codec.decodeTableSeq;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSDecoder.prototype.write = function(buf) {\n    var newBuf = Buffer.alloc(buf.length*2),\n        nodeIdx = this.nodeIdx, \n        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,\n        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.\n        uCode;\n\n    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.\n        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);\n    \n    for (var i = 0, j = 0; i < buf.length; i++) {\n        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];\n\n        // Lookup in current trie node.\n        var uCode = this.decodeTables[nodeIdx][curByte];\n\n        if (uCode >= 0) { \n            // Normal character, just use it.\n        }\n        else if (uCode === UNASSIGNED) { // Unknown char.\n            // TODO: Callback with seq.\n            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).\n            uCode = this.defaultCharUnicode.charCodeAt(0);\n        }\n        else if (uCode === GB18030_CODE) {\n            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);\n            var idx = findIdx(this.gb18030.gbChars, ptr);\n            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\n        }\n        else if (uCode <= NODE_START) { // Go to next trie node.\n            nodeIdx = NODE_START - uCode;\n            continue;\n        }\n        else if (uCode <= SEQ_START) { // Output a sequence of chars.\n            var seq = this.decodeTableSeq[SEQ_START - uCode];\n            for (var k = 0; k < seq.length - 1; k++) {\n                uCode = seq[k];\n                newBuf[j++] = uCode & 0xFF;\n                newBuf[j++] = uCode >> 8;\n            }\n            uCode = seq[seq.length-1];\n        }\n        else\n            throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\n\n        // Write the character to buffer, handling higher planes using surrogate pair.\n        if (uCode > 0xFFFF) { \n            uCode -= 0x10000;\n            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);\n            newBuf[j++] = uCodeLead & 0xFF;\n            newBuf[j++] = uCodeLead >> 8;\n\n            uCode = 0xDC00 + uCode % 0x400;\n        }\n        newBuf[j++] = uCode & 0xFF;\n        newBuf[j++] = uCode >> 8;\n\n        // Reset trie node.\n        nodeIdx = 0; seqStart = i+1;\n    }\n\n    this.nodeIdx = nodeIdx;\n    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);\n    return newBuf.slice(0, j).toString('ucs2');\n}\n\nDBCSDecoder.prototype.end = function() {\n    var ret = '';\n\n    // Try to parse all remaining chars.\n    while (this.prevBuf.length > 0) {\n        // Skip 1 character in the buffer.\n        ret += this.defaultCharUnicode;\n        var buf = this.prevBuf.slice(1);\n\n        // Parse remaining as usual.\n        this.prevBuf = Buffer.alloc(0);\n        this.nodeIdx = 0;\n        if (buf.length > 0)\n            ret += this.write(buf);\n    }\n\n    this.nodeIdx = 0;\n    return ret;\n}\n\n// Binary search for GB18030. Returns largest i such that table[i] <= val.\nfunction findIdx(table, val) {\n    if (table[0] > val)\n        return -1;\n\n    var l = 0, r = table.length;\n    while (l < r-1) { // always table[l] <= val < table[r]\n        var mid = l + Math.floor((r-l+1)/2);\n        if (table[mid] <= val)\n            l = mid;\n        else\n            r = mid;\n    }\n    return l;\n}\n\n","\"use strict\";\n\n// Description of supported double byte encodings and aliases.\n// Tables are not require()-d until they are needed to speed up library load.\n// require()-s are direct to support Browserify.\n\nmodule.exports = {\n    \n    // == Japanese/ShiftJIS ====================================================\n    // All japanese encodings are based on JIS X set of standards:\n    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.\n    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. \n    //              Has several variations in 1978, 1983, 1990 and 1997.\n    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.\n    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.\n    //              2 planes, first is superset of 0208, second - revised 0212.\n    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)\n\n    // Byte encodings are:\n    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte\n    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.\n    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.\n    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.\n    //               0x00-0x7F       - lower part of 0201\n    //               0x8E, 0xA1-0xDF - upper part of 0201\n    //               (0xA1-0xFE)x2   - 0208 plane (94x94).\n    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).\n    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.\n    //               Used as-is in ISO2022 family.\n    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, \n    //                0201-1976 Roman, 0208-1978, 0208-1983.\n    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.\n    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.\n    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.\n    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.\n    //\n    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.\n    //\n    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html\n\n    'shiftjis': {\n        type: '_dbcs',\n        table: function() { return require('./tables/shiftjis.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n        encodeSkipVals: [{from: 0xED40, to: 0xF940}],\n    },\n    'csshiftjis': 'shiftjis',\n    'mskanji': 'shiftjis',\n    'sjis': 'shiftjis',\n    'windows31j': 'shiftjis',\n    'ms31j': 'shiftjis',\n    'xsjis': 'shiftjis',\n    'windows932': 'shiftjis',\n    'ms932': 'shiftjis',\n    '932': 'shiftjis',\n    'cp932': 'shiftjis',\n\n    'eucjp': {\n        type: '_dbcs',\n        table: function() { return require('./tables/eucjp.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n    },\n\n    // TODO: KDDI extension to Shift_JIS\n    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.\n    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.\n\n\n    // == Chinese/GBK ==========================================================\n    // http://en.wikipedia.org/wiki/GBK\n    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder\n\n    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936\n    'gb2312': 'cp936',\n    'gb231280': 'cp936',\n    'gb23121980': 'cp936',\n    'csgb2312': 'cp936',\n    'csiso58gb231280': 'cp936',\n    'euccn': 'cp936',\n\n    // Microsoft's CP936 is a subset and approximation of GBK.\n    'windows936': 'cp936',\n    'ms936': 'cp936',\n    '936': 'cp936',\n    'cp936': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json') },\n    },\n\n    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.\n    'gbk': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n    },\n    'xgbk': 'gbk',\n    'isoir58': 'gbk',\n\n    // GB18030 is an algorithmic extension of GBK.\n    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder\n    // http://icu-project.org/docs/papers/gb18030.html\n    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml\n    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0\n    'gb18030': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n        gb18030: function() { return require('./tables/gb18030-ranges.json') },\n        encodeSkipVals: [0x80],\n        encodeAdd: {'€': 0xA2E3},\n    },\n\n    'chinese': 'gb18030',\n\n\n    // == Korean ===============================================================\n    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.\n    'windows949': 'cp949',\n    'ms949': 'cp949',\n    '949': 'cp949',\n    'cp949': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp949.json') },\n    },\n\n    'cseuckr': 'cp949',\n    'csksc56011987': 'cp949',\n    'euckr': 'cp949',\n    'isoir149': 'cp949',\n    'korean': 'cp949',\n    'ksc56011987': 'cp949',\n    'ksc56011989': 'cp949',\n    'ksc5601': 'cp949',\n\n\n    // == Big5/Taiwan/Hong Kong ================================================\n    // There are lots of tables for Big5 and cp950. Please see the following links for history:\n    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html\n    // Variations, in roughly number of defined chars:\n    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT\n    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/\n    //  * Big5-2003 (Taiwan standard) almost superset of cp950.\n    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.\n    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. \n    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.\n    //    Plus, it has 4 combining sequences.\n    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299\n    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.\n    //    Implementations are not consistent within browsers; sometimes labeled as just big5.\n    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.\n    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31\n    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.\n    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt\n    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt\n    // \n    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder\n    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.\n\n    'windows950': 'cp950',\n    'ms950': 'cp950',\n    '950': 'cp950',\n    'cp950': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json') },\n    },\n\n    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.\n    'big5': 'big5hkscs',\n    'big5hkscs': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json').concat(require('./tables/big5-added.json')) },\n        encodeSkipVals: [0xa2cc],\n    },\n\n    'cnbig5': 'big5hkscs',\n    'csbig5': 'big5hkscs',\n    'xxbig5': 'big5hkscs',\n};\n"],"sourceRoot":""}