{"version":3,"file":"static/js/665.0b0ec3ad.chunk.js","mappings":"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yB,GAAI3kB,MAAMoD,EAAOsiB,SAE3B,EACMtiB,CACR,EAEDuhB,GAAIpnB,UAAUyS,WAAa,WACzB,IAAMD,EAAS,GACf,IAAK,IAAM/M,KAAK2hB,GAAI3kB,MACd2kB,GAAI3kB,MAAM4R,eAAe5O,IAC3B+M,EAAO/Q,KAAK2lB,GAAI3kB,MAAMgD,IAI1B,OADA2hB,GAAI3kB,MAAQ,CAAC,EACN+P,CACR,EAGD,CACEoI,EACAE,EACAxF,EACA6F,EACAG,EACAI,EACAM,EACAE,EACArC,GACAwC,GACAE,GACAE,GACAE,GACAQ,GACAO,GACAliB,GACAmb,GACAmH,GACAE,GACAE,GACAE,GACAb,GACAe,GACArB,GACA/jB,GACAwlB,GACAC,GACAnkB,GACAwC,GACAwP,GACA2S,GACA/K,GACA5R,GACAgd,GACA7oB,GACAkW,EACA8S,GACAC,GACA9mB,GACAinB,GACAnjB,GACAsjB,GACAE,GACAI,GACAC,GACA3kB,GACAglB,GACAE,GACAlkB,GACA7J,GACAiL,GACA8R,EACAqR,GACAE,GACAjZ,GACAnC,GACA8b,GACAE,GACArc,EACAuc,GACAE,GACAE,GACAE,GACAE,GACAxH,EACA0H,GACAG,GACAE,GACAC,GACA3oB,GACA2X,GACAqR,GACAE,GACAG,GACAvL,GACAyL,GACAI,GACAE,GACAE,GACAjJ,EACAmJ,GACAE,GACAG,GACAE,GACA5lB,GACAgmB,GACAE,GACAxqB,GACA2qB,GACAE,GACAG,GACAC,GACAvO,GACA2O,GACAroB,GACAwoB,GACAtN,GACA0N,GACA5D,GACA+D,GACAE,GACAE,IACA5hB,SAAQ,SAAU6iB,GAClBhB,GAAIpnB,UAAUooB,EAAKxb,MAAQwb,CAC5B,IAED,IAAI7b,GAAM6a,GAKV,SAASiB,GAAQL,EAAKM,GAGpB,IAFA,IAAMC,EAAO/N,OAAO+N,KAAKP,GACrBjnB,EAAIwnB,EAAKv4B,OACN+Q,KAAK,CACV,IAAM0E,EAAI8iB,EAAKxnB,GACTgH,EAAMigB,EAAIviB,GACJ,OAARsC,SACKugB,EAAG7iB,GACc,oBAAR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","sources":["../../file-laravel/dist/es/index-0bb39287.js"],"sourcesContent":["/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar comments = {\n  /**\n   * Reads a single line comment\n   */\n  T_COMMENT: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (ch === \"\\n\" || ch === \"\\r\") {\n        return this.tok.T_COMMENT;\n      } else if (\n        ch === \"?\" &&\n        !this.aspTagMode &&\n        this._input[this.offset] === \">\"\n      ) {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      } else if (\n        ch === \"%\" &&\n        this.aspTagMode &&\n        this._input[this.offset] === \">\"\n      ) {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      }\n    }\n    return this.tok.T_COMMENT;\n  },\n  /**\n   * Behaviour : https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1927\n   */\n  T_DOC_COMMENT: function () {\n    let ch = this.input();\n    let token = this.tok.T_COMMENT;\n    if (ch === \"*\") {\n      // started with '/*' , check is next is '*'\n      ch = this.input();\n      if (this.is_WHITESPACE()) {\n        // check if next is WHITESPACE\n        token = this.tok.T_DOC_COMMENT;\n      }\n      if (ch === \"/\") {\n        return token;\n      } else {\n        this.unput(1); // reset\n      }\n    }\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch === \"*\" && this._input[this.offset] === \"/\") {\n        this.input();\n        break;\n      }\n    }\n    return token;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar initial = {\n  nextINITIAL: function () {\n    if (\n      this.conditionStack.length > 1 &&\n      this.conditionStack[this.conditionStack.length - 1] === \"INITIAL\"\n    ) {\n      // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n      this.popState();\n    } else {\n      this.begin(\"ST_IN_SCRIPTING\");\n    }\n    return this;\n  },\n  matchINITIAL: function () {\n    while (this.offset < this.size) {\n      let ch = this.input();\n      if (ch == \"<\") {\n        ch = this.ahead(1);\n        if (ch == \"?\") {\n          if (this.tryMatch(\"?=\")) {\n            this.unput(1)\n              .appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3)\n              .nextINITIAL();\n            break;\n          } else if (this.tryMatchCaseless(\"?php\")) {\n            ch = this._input[this.offset + 4];\n            if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n              this.unput(1).appendToken(this.tok.T_OPEN_TAG, 6).nextINITIAL();\n              break;\n            }\n          }\n          if (this.short_tags) {\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        } else if (this.asp_tags && ch == \"%\") {\n          if (this.tryMatch(\"%=\")) {\n            this.aspTagMode = true;\n            this.unput(1)\n              .appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3)\n              .nextINITIAL();\n            break;\n          } else {\n            this.aspTagMode = true;\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        }\n      }\n    }\n    if (this.yytext.length > 0) {\n      return this.tok.T_INLINE_HTML;\n    } else {\n      return false;\n    }\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/* istanbul ignore else  */\nlet MAX_LENGTH_OF_LONG = 10;\nlet long_min_digits = \"2147483648\";\nif (process.arch == \"x64\") {\n  MAX_LENGTH_OF_LONG = 19;\n  long_min_digits = \"9223372036854775808\";\n}\n\nvar numbers = {\n  consume_NUM: function () {\n    let ch = this.yytext[0];\n    let hasPoint = ch === \".\";\n    if (ch === \"0\") {\n      ch = this.input();\n      // check if hexa\n      if (ch === \"x\" || ch === \"X\") {\n        ch = this.input();\n        if (ch !== \"_\" && this.is_HEX()) {\n          return this.consume_HNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n        // check binary notation\n      } else if (ch === \"b\" || ch === \"B\") {\n        ch = this.input();\n        if ((ch !== \"_\" && ch === \"0\") || ch === \"1\") {\n          return this.consume_BNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n        // @fixme check octal notation ? not usefull\n      } else if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n      }\n    }\n\n    while (this.offset < this.size) {\n      const prev = ch;\n      ch = this.input();\n\n      if (ch === \"_\") {\n        if (prev === \"_\") {\n          // restriction : next to underscore / 1__1;\n          this.unput(2); // keep 1\n          break;\n        }\n        if (prev === \".\") {\n          // next to decimal point  \"1._0\"\n          this.unput(1); // keep 1.\n          break;\n        }\n        if (prev === \"e\" || prev === \"E\") {\n          // next to e \"1e_10\"\n          this.unput(2); // keep 1\n          break;\n        }\n      } else if (ch === \".\") {\n        if (hasPoint) {\n          // no multiple points \"1.0.5\"\n          this.unput(1); // keep 1.0\n          break;\n        }\n        if (prev === \"_\") {\n          // next to decimal point  \"1_.0\"\n          this.unput(2); // keep 1\n          break;\n        }\n        hasPoint = true;\n        continue;\n      } else if (ch === \"e\" || ch === \"E\") {\n        if (prev === \"_\") {\n          // next to e \"1_e10\"\n          this.unput(1);\n          break;\n        }\n        let undo = 2;\n        ch = this.input();\n        if (ch === \"+\" || ch === \"-\") {\n          // 1e-5\n          undo = 3;\n          ch = this.input();\n        }\n        if (this.is_NUM_START()) {\n          this.consume_LNUM();\n          return this.tok.T_DNUMBER;\n        }\n        this.unput(ch ? undo : undo - 1); // keep only 1\n        break;\n      }\n\n      if (!this.is_NUM()) {\n        // example : 10.0a\n        if (ch) this.unput(1); // keep 10.0\n        break;\n      }\n    }\n\n    if (hasPoint) {\n      return this.tok.T_DNUMBER;\n    } else if (this.yytext.length < MAX_LENGTH_OF_LONG - 1) {\n      return this.tok.T_LNUMBER;\n    } else {\n      if (\n        this.yytext.length < MAX_LENGTH_OF_LONG ||\n        (this.yytext.length == MAX_LENGTH_OF_LONG &&\n          this.yytext < long_min_digits)\n      ) {\n        return this.tok.T_LNUMBER;\n      }\n      return this.tok.T_DNUMBER;\n    }\n  },\n  // read hexa\n  consume_HNUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_HEX()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read a generic number\n  consume_LNUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read binary\n  consume_BNUM: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch !== \"0\" && ch !== \"1\" && ch !== \"_\") {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar property = {\n  matchST_LOOKING_FOR_PROPERTY: function () {\n    let ch = this.input();\n    if (ch === \"-\") {\n      ch = this.input();\n      if (ch === \">\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1296\n        return this.tok.T_OBJECT_OPERATOR;\n      }\n      if (ch) this.unput(1);\n    } else if (this.is_WHITESPACE()) {\n      return this.tok.T_WHITESPACE;\n    } else if (this.is_LABEL_START()) {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1300\n      this.consume_LABEL();\n      this.popState();\n      return this.tok.T_STRING;\n    }\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1306\n    this.popState();\n    if (ch) this.unput(1);\n    return false;\n  },\n  matchST_LOOKING_FOR_VARNAME: function () {\n    let ch = this.input();\n\n    // SHIFT STATE\n    this.popState();\n    this.begin(\"ST_IN_SCRIPTING\");\n\n    if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      ch = this.input();\n      if (ch === \"[\" || ch === \"}\") {\n        this.unput(1);\n        return this.tok.T_STRING_VARNAME;\n      } else {\n        // any char (that's started with a label sequence)\n        this.unput(this.yytext.length);\n      }\n    } else {\n      // any char (thats not a label start sequence)\n      if (ch) this.unput(1);\n    }\n    // stops looking for a varname and starts the scripting mode\n    return false;\n  },\n  matchST_VAR_OFFSET: function () {\n    const ch = this.input();\n    if (this.is_NUM_START()) {\n      this.consume_NUM();\n      return this.tok.T_NUM_STRING;\n    } else if (ch === \"]\") {\n      this.popState();\n      return \"]\";\n    } else if (ch === \"$\") {\n      this.input();\n      if (this.is_LABEL_START()) {\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        throw new Error(\"Unexpected terminal\");\n      }\n    } else if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      return this.tok.T_STRING;\n    } else if (\n      this.is_WHITESPACE() ||\n      ch === \"\\\\\" ||\n      ch === \"'\" ||\n      ch === \"#\"\n    ) {\n      return this.tok.T_ENCAPSED_AND_WHITESPACE;\n    } else if (\n      ch === \"[\" ||\n      ch === \"{\" ||\n      ch === \"}\" ||\n      ch === '\"' ||\n      ch === \"`\" ||\n      this.is_TOKEN()\n    ) {\n      return ch;\n    } else {\n      throw new Error(\"Unexpected terminal\");\n    }\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar scripting = {\n  matchST_IN_SCRIPTING: function () {\n    let ch = this.input();\n    switch (ch) {\n      case \" \":\n      case \"\\t\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\r\\n\":\n        return this.T_WHITESPACE();\n      case \"#\":\n        return this.T_COMMENT();\n      case \"/\":\n        if (this._input[this.offset] === \"/\") {\n          return this.T_COMMENT();\n        } else if (this._input[this.offset] === \"*\") {\n          this.input();\n          return this.T_DOC_COMMENT();\n        }\n        return this.consume_TOKEN();\n      case \"'\":\n        return this.T_CONSTANT_ENCAPSED_STRING();\n      case '\"':\n        return this.ST_DOUBLE_QUOTES();\n      case \"`\":\n        this.begin(\"ST_BACKQUOTE\");\n        return \"`\";\n      case \"?\":\n        if (!this.aspTagMode && this.tryMatch(\">\")) {\n          this.input();\n          const nextCH = this._input[this.offset];\n          if (nextCH === \"\\n\" || nextCH === \"\\r\") this.input();\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n          return this.tok.T_CLOSE_TAG;\n        }\n        return this.consume_TOKEN();\n      case \"%\":\n        if (this.aspTagMode && this._input[this.offset] === \">\") {\n          this.input(); // consume the '>'\n          ch = this._input[this.offset]; // read next\n          if (ch === \"\\n\" || ch === \"\\r\") {\n            this.input(); // consume the newline\n          }\n          this.aspTagMode = false;\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n          return this.tok.T_CLOSE_TAG;\n        }\n        return this.consume_TOKEN();\n      case \"{\":\n        this.begin(\"ST_IN_SCRIPTING\");\n        return \"{\";\n      case \"}\":\n        if (this.conditionStack.length > 2) {\n          // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n          this.popState();\n        }\n        return \"}\";\n      default:\n        if (ch === \".\") {\n          ch = this.input();\n          if (this.is_NUM_START()) {\n            return this.consume_NUM();\n          } else {\n            if (ch) this.unput(1);\n          }\n        }\n        if (this.is_NUM_START()) {\n          return this.consume_NUM();\n        } else if (this.is_LABEL_START()) {\n          return this.consume_LABEL().T_STRING();\n        } else if (this.is_TOKEN()) {\n          return this.consume_TOKEN();\n        }\n    }\n    throw new Error(\n      'Bad terminal sequence \"' +\n        ch +\n        '\" at line ' +\n        this.yylineno +\n        \" (offset \" +\n        this.offset +\n        \")\"\n    );\n  },\n\n  T_WHITESPACE: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n        continue;\n      }\n      if (ch) this.unput(1);\n      break;\n    }\n    return this.tok.T_WHITESPACE;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nconst newline = [\"\\n\", \"\\r\"];\nconst valid_after_heredoc = [\"\\n\", \"\\r\", \";\"];\nconst valid_after_heredoc_73 = valid_after_heredoc.concat([\n  \"\\t\",\n  \" \",\n  \",\",\n  \"]\",\n  \")\",\n  \"/\",\n  \"=\",\n  \"!\",\n]);\n\nvar strings = {\n  T_CONSTANT_ENCAPSED_STRING: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == \"'\") {\n        break;\n      }\n    }\n    return this.tok.T_CONSTANT_ENCAPSED_STRING;\n  },\n  // check if matching a HEREDOC state\n  is_HEREDOC: function () {\n    const revert = this.offset;\n    if (\n      this._input[this.offset - 1] === \"<\" &&\n      this._input[this.offset] === \"<\" &&\n      this._input[this.offset + 1] === \"<\"\n    ) {\n      this.offset += 3;\n\n      // optional tabs / spaces\n      if (this.is_TABSPACE()) {\n        while (this.offset < this.size) {\n          this.offset++;\n          if (!this.is_TABSPACE()) {\n            break;\n          }\n        }\n      }\n\n      // optional quotes\n      let tChar = this._input[this.offset - 1];\n      if (tChar === \"'\" || tChar === '\"') {\n        this.offset++;\n      } else {\n        tChar = null;\n      }\n\n      // required label\n      if (this.is_LABEL_START()) {\n        let yyoffset = this.offset - 1;\n        while (this.offset < this.size) {\n          this.offset++;\n          if (!this.is_LABEL()) {\n            break;\n          }\n        }\n        const yylabel = this._input.substring(yyoffset, this.offset - 1);\n        if (!tChar || tChar === this._input[this.offset - 1]) {\n          // required ending quote\n          if (tChar) this.offset++;\n          // require newline\n          if (newline.includes(this._input[this.offset - 1])) {\n            // go go go\n            this.heredoc_label.label = yylabel;\n            this.heredoc_label.length = yylabel.length;\n            this.heredoc_label.finished = false;\n            yyoffset = this.offset - revert;\n            this.offset = revert;\n            this.consume(yyoffset);\n            if (tChar === \"'\") {\n              this.begin(\"ST_NOWDOC\");\n            } else {\n              this.begin(\"ST_HEREDOC\");\n            }\n            // prematch to get the indentation information from end of doc\n            this.prematch_ENDOFDOC();\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n      }\n    }\n    this.offset = revert;\n    return false;\n  },\n  ST_DOUBLE_QUOTES: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == '\"') {\n        break;\n      } else if (ch == \"$\") {\n        ch = this.input();\n        if (ch == \"{\" || this.is_LABEL_START()) {\n          this.unput(2);\n          break;\n        }\n        if (ch) this.unput(1);\n      } else if (ch == \"{\") {\n        ch = this.input();\n        if (ch == \"$\") {\n          this.unput(2);\n          break;\n        }\n        if (ch) this.unput(1);\n      }\n    }\n    if (ch == '\"') {\n      return this.tok.T_CONSTANT_ENCAPSED_STRING;\n    } else {\n      let prefix = 1;\n      if (this.yytext[0] === \"b\" || this.yytext[0] === \"B\") {\n        prefix = 2;\n      }\n      if (this.yytext.length > 2) {\n        this.appendToken(\n          this.tok.T_ENCAPSED_AND_WHITESPACE,\n          this.yytext.length - prefix\n        );\n      }\n      this.unput(this.yytext.length - prefix);\n      this.begin(\"ST_DOUBLE_QUOTES\");\n      return this.yytext;\n    }\n  },\n\n  // check if its a DOC end sequence\n  isDOC_MATCH: function (offset, consumeLeadingSpaces) {\n    // @fixme : check if out of text limits\n\n    // consumeLeadingSpaces is false happen DOC prematch END HEREDOC stage.\n\n    // Ensure current state is really after a new line break, not after a such as ${variables}\n    const prev_ch = this._input[offset - 2];\n    if (!newline.includes(prev_ch)) {\n      return false;\n    }\n\n    // skip leading spaces or tabs\n    let indentation_uses_spaces = false;\n    let indentation_uses_tabs = false;\n    // reset heredoc_label structure\n    let indentation = 0;\n    let leading_ch = this._input[offset - 1];\n\n    if (this.version >= 703) {\n      while (leading_ch === \"\\t\" || leading_ch === \" \") {\n        if (leading_ch === \" \") {\n          indentation_uses_spaces = true;\n        } else if (leading_ch === \"\\t\") {\n          indentation_uses_tabs = true;\n        }\n\n        leading_ch = this._input[offset + indentation];\n        indentation++;\n      }\n\n      // Move offset to skip leading whitespace\n      offset = offset + indentation;\n\n      // return out if there was only whitespace on this line\n      if (newline.includes(this._input[offset - 1])) {\n        return false;\n      }\n    }\n\n    if (\n      this._input.substring(\n        offset - 1,\n        offset - 1 + this.heredoc_label.length\n      ) === this.heredoc_label.label\n    ) {\n      const ch = this._input[offset - 1 + this.heredoc_label.length];\n      if (\n        (this.version >= 703\n          ? valid_after_heredoc_73\n          : valid_after_heredoc\n        ).includes(ch)\n      ) {\n        if (consumeLeadingSpaces) {\n          this.consume(indentation);\n          // https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes\n          if (indentation_uses_spaces && indentation_uses_tabs) {\n            throw new Error(\n              \"Parse error:  mixing spaces and tabs in ending marker at line \" +\n                this.yylineno +\n                \" (offset \" +\n                this.offset +\n                \")\"\n            );\n          }\n        } else {\n          // Called in prematch_ENDOFDOC\n          this.heredoc_label.indentation = indentation;\n          this.heredoc_label.indentation_uses_spaces = indentation_uses_spaces;\n          this.heredoc_label.first_encaps_node = true;\n        }\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Prematch the end of HEREDOC/NOWDOC end tag to preset the\n   * context of this.heredoc_label\n   */\n  prematch_ENDOFDOC: function () {\n    // reset heredoc\n    this.heredoc_label.indentation_uses_spaces = false;\n    this.heredoc_label.indentation = 0;\n    this.heredoc_label.first_encaps_node = true;\n    let offset = this.offset + 1;\n\n    while (offset < this._input.length) {\n      // if match heredoc_label structrue will be set\n      if (this.isDOC_MATCH(offset, false)) {\n        return;\n      }\n\n      if (!newline.includes(this._input[offset - 1])) {\n        // skip one line\n        while (\n          !newline.includes(this._input[offset++]) &&\n          offset < this._input.length\n        ) {\n          // skip\n        }\n      }\n\n      offset++;\n    }\n  },\n\n  matchST_NOWDOC: function () {\n    /** edge case : empty now doc **/\n    if (this.isDOC_MATCH(this.offset, true)) {\n      // @fixme : never reached (may be caused by quotes)\n      this.consume(this.heredoc_label.length);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    /** SCANNING CONTENTS **/\n    let ch = this._input[this.offset - 1];\n    while (this.offset < this.size) {\n      if (newline.includes(ch)) {\n        ch = this.input();\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else {\n        ch = this.input();\n      }\n    }\n    // too bad ! reached end of document (will get a parse error)\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  matchST_HEREDOC: function () {\n    /** edge case : empty here doc **/\n    let ch = this.input();\n    if (this.isDOC_MATCH(this.offset, true)) {\n      this.consume(this.heredoc_label.length - 1);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    /** SCANNING CONTENTS **/\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        ch = this.input(); // ignore next\n        if (!newline.includes(ch)) {\n          ch = this.input();\n        }\n      }\n\n      if (newline.includes(ch)) {\n        ch = this.input();\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          // start of ${\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n          //console.log(this.yytext);\n        }\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n      } else {\n        ch = this.input();\n      }\n    }\n\n    // too bad ! reached end of document (will get a parse error)\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  consume_VARIABLE: function () {\n    this.consume_LABEL();\n    const ch = this.input();\n    if (ch == \"[\") {\n      this.unput(1);\n      this.begin(\"ST_VAR_OFFSET\");\n      return this.tok.T_VARIABLE;\n    } else if (ch === \"-\") {\n      if (this.input() === \">\") {\n        this.input();\n        if (this.is_LABEL_START()) {\n          this.begin(\"ST_LOOKING_FOR_PROPERTY\");\n        }\n        this.unput(3);\n        return this.tok.T_VARIABLE;\n      } else {\n        this.unput(2);\n      }\n    } else {\n      if (ch) this.unput(1);\n    }\n    return this.tok.T_VARIABLE;\n  },\n  // HANDLES BACKQUOTES\n  matchST_BACKQUOTE: function () {\n    let ch = this.input();\n    if (ch === \"$\") {\n      ch = this.input();\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        const tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === \"`\") {\n      this.popState();\n      return \"`\";\n    }\n\n    // any char\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === \"`\") {\n        this.unput(1);\n        this.popState();\n        this.appendToken(\"`\", 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n        continue;\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n        continue;\n      }\n      ch = this.input();\n    }\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  matchST_DOUBLE_QUOTES: function () {\n    let ch = this.input();\n    if (ch === \"$\") {\n      ch = this.input();\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        const tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === '\"') {\n      this.popState();\n      return '\"';\n    }\n\n    // any char\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === '\"') {\n        this.unput(1);\n        this.popState();\n        this.appendToken('\"', 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n        if (ch) this.unput(1);\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            // @fixme : yytext = '\"{$' (this.yytext.length > 3)\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n        if (ch) this.unput(1);\n      }\n      ch = this.input();\n    }\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar tokens = {\n  T_STRING: function () {\n    const token = this.yytext.toLowerCase();\n    let id = this.keywords[token];\n    if (typeof id !== \"number\") {\n      if (token === \"yield\") {\n        if (this.version >= 700 && this.tryMatch(\" from\")) {\n          this.consume(5);\n          id = this.tok.T_YIELD_FROM;\n        } else {\n          id = this.tok.T_YIELD;\n        }\n      } else {\n        id = this.tok.T_STRING;\n        if (token === \"b\" || token === \"B\") {\n          const ch = this.input(1);\n          if (ch === '\"') {\n            return this.ST_DOUBLE_QUOTES();\n          } else if (ch === \"'\") {\n            return this.T_CONSTANT_ENCAPSED_STRING();\n          } else if (ch) {\n            this.unput(1);\n          }\n        }\n      }\n    }\n    return id;\n  },\n  // reads a custom token\n  consume_TOKEN: function () {\n    const ch = this._input[this.offset - 1];\n    const fn = this.tokenTerminals[ch];\n    if (fn) {\n      return fn.apply(this, []);\n    } else {\n      return this.yytext;\n    }\n  },\n  // list of special char tokens\n  tokenTerminals: {\n    $: function () {\n      this.offset++;\n      if (this.is_LABEL_START()) {\n        this.offset--;\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        this.offset--;\n        return \"$\";\n      }\n    },\n    \"-\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \">\") {\n        this.begin(\"ST_LOOKING_FOR_PROPERTY\").input();\n        return this.tok.T_OBJECT_OPERATOR;\n      } else if (nchar === \"-\") {\n        this.input();\n        return this.tok.T_DEC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MINUS_EQUAL;\n      }\n      return \"-\";\n    },\n    \"\\\\\": function () {\n      return this.tok.T_NS_SEPARATOR;\n    },\n    \"/\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_DIV_EQUAL;\n      }\n      return \"/\";\n    },\n    \":\": function () {\n      if (this._input[this.offset] === \":\") {\n        this.input();\n        return this.tok.T_DOUBLE_COLON;\n      } else {\n        return \":\";\n      }\n    },\n    \"(\": function () {\n      const initial = this.offset;\n      this.input();\n      if (this.is_TABSPACE()) {\n        this.consume_TABSPACE().input();\n      }\n      if (this.is_LABEL_START()) {\n        const yylen = this.yytext.length;\n        this.consume_LABEL();\n        const castToken = this.yytext.substring(yylen - 1).toLowerCase();\n        const castId = this.castKeywords[castToken];\n        if (typeof castId === \"number\") {\n          this.input();\n          if (this.is_TABSPACE()) {\n            this.consume_TABSPACE().input();\n          }\n          if (this._input[this.offset - 1] === \")\") {\n            return castId;\n          }\n        }\n      }\n      // revert the check\n      this.unput(this.offset - initial);\n      return \"(\";\n    },\n    \"=\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \">\") {\n        this.input();\n        return this.tok.T_DOUBLE_ARROW;\n      } else if (nchar === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_EQUAL;\n        }\n      }\n      return \"=\";\n    },\n    \"+\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"+\") {\n        this.input();\n        return this.tok.T_INC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_PLUS_EQUAL;\n      }\n      return \"+\";\n    },\n    \"!\": function () {\n      if (this._input[this.offset] === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_NOT_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_NOT_EQUAL;\n        }\n      }\n      return \"!\";\n    },\n    \"?\": function () {\n      if (this.version >= 700 && this._input[this.offset] === \"?\") {\n        if (this.version >= 704 && this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_COALESCE_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_COALESCE;\n        }\n      }\n      return \"?\";\n    },\n    \"<\": function () {\n      let nchar = this._input[this.offset];\n      if (nchar === \"<\") {\n        nchar = this._input[this.offset + 1];\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SL_EQUAL;\n        } else if (nchar === \"<\") {\n          if (this.is_HEREDOC()) {\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n        this.input();\n        return this.tok.T_SL;\n      } else if (nchar === \"=\") {\n        this.input();\n        if (this.version >= 700 && this._input[this.offset] === \">\") {\n          this.input();\n          return this.tok.T_SPACESHIP;\n        } else {\n          return this.tok.T_IS_SMALLER_OR_EQUAL;\n        }\n      } else if (nchar === \">\") {\n        this.input();\n        return this.tok.T_IS_NOT_EQUAL;\n      }\n      return \"<\";\n    },\n    \">\": function () {\n      let nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_IS_GREATER_OR_EQUAL;\n      } else if (nchar === \">\") {\n        nchar = this._input[this.offset + 1];\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SR_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_SR;\n        }\n      }\n      return \">\";\n    },\n    \"*\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MUL_EQUAL;\n      } else if (nchar === \"*\") {\n        this.input();\n        if (this._input[this.offset] === \"=\") {\n          this.input();\n          return this.tok.T_POW_EQUAL;\n        } else {\n          return this.tok.T_POW;\n        }\n      }\n      return \"*\";\n    },\n    \".\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_CONCAT_EQUAL;\n      } else if (nchar === \".\" && this._input[this.offset + 1] === \".\") {\n        this.consume(2);\n        return this.tok.T_ELLIPSIS;\n      }\n      return \".\";\n    },\n    \"%\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_MOD_EQUAL;\n      }\n      return \"%\";\n    },\n    \"&\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_AND_EQUAL;\n      } else if (nchar === \"&\") {\n        this.input();\n        return this.tok.T_BOOLEAN_AND;\n      }\n      return \"&\";\n    },\n    \"|\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_OR_EQUAL;\n      } else if (nchar === \"|\") {\n        this.input();\n        return this.tok.T_BOOLEAN_OR;\n      }\n      return \"|\";\n    },\n    \"^\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_XOR_EQUAL;\n      }\n      return \"^\";\n    },\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nconst tokens$1 = \";:,.\\\\[]()|^&+-/*=%!~$<>?@\";\n\nvar utils = {\n  // check if the char can be a numeric\n  is_NUM: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return (ch > 47 && ch < 58) || ch === 95;\n  },\n\n  // check if the char can be a numeric\n  is_NUM_START: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return ch > 47 && ch < 58;\n  },\n\n  // check if current char can be a label\n  is_LABEL: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return (\n      (ch > 96 && ch < 123) ||\n      (ch > 64 && ch < 91) ||\n      ch === 95 ||\n      (ch > 47 && ch < 58) ||\n      ch > 126\n    );\n  },\n\n  // check if current char can be a label\n  is_LABEL_START: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // A - Z\n    if (ch > 64 && ch < 91) return true;\n    // a - z\n    if (ch > 96 && ch < 123) return true;\n    // _ (95)\n    if (ch === 95) return true;\n    // utf8 / extended\n    if (ch > 126) return true;\n    // else\n    return false;\n  },\n\n  // reads each char of the label\n  consume_LABEL: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_LABEL()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this;\n  },\n\n  // check if current char is a token char\n  is_TOKEN: function () {\n    const ch = this._input[this.offset - 1];\n    return tokens$1.indexOf(ch) !== -1;\n  },\n  // check if current char is a whitespace\n  is_WHITESPACE: function () {\n    const ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\";\n  },\n  // check if current char is a whitespace (without newlines)\n  is_TABSPACE: function () {\n    const ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\";\n  },\n  // consume all whitespaces (excluding newlines)\n  consume_TABSPACE: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_TABSPACE()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this;\n  },\n  // check if current char can be a hexadecimal number\n  is_HEX: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // 0 - 9\n    if (ch > 47 && ch < 58) return true;\n    // A - F\n    if (ch > 64 && ch < 71) return true;\n    // a - f\n    if (ch > 96 && ch < 103) return true;\n    // _ (code 95)\n    if (ch === 95) return true;\n    // else\n    return false;\n  },\n};\n\n/**\n * This is the php lexer. It will tokenize the string for helping the\n * parser to build the AST from its grammar.\n *\n * @class\n * @property {Integer} EOF\n * @property {Boolean} all_tokens defines if all tokens must be retrieved (used by token_get_all only)\n * @property {Boolean} comment_tokens extracts comments tokens\n * @property {Boolean} mode_eval enables the evald mode (ignore opening tags)\n * @property {Boolean} asp_tags disables by default asp tags mode\n * @property {Boolean} short_tags enables by default short tags mode\n * @property {Object} keywords List of php keyword\n * @property {Object} castKeywords List of php keywords for type casting\n */\nconst lexer = function (engine) {\n  this.engine = engine;\n  this.tok = this.engine.tokens.names;\n  this.EOF = 1;\n  this.debug = false;\n  this.all_tokens = true;\n  this.comment_tokens = false;\n  this.mode_eval = false;\n  this.asp_tags = false;\n  this.short_tags = false;\n  this.version = 704;\n  this.yyprevcol = 0;\n  this.keywords = {\n    __class__: this.tok.T_CLASS_C,\n    __trait__: this.tok.T_TRAIT_C,\n    __function__: this.tok.T_FUNC_C,\n    __method__: this.tok.T_METHOD_C,\n    __line__: this.tok.T_LINE,\n    __file__: this.tok.T_FILE,\n    __dir__: this.tok.T_DIR,\n    __namespace__: this.tok.T_NS_C,\n    exit: this.tok.T_EXIT,\n    die: this.tok.T_EXIT,\n    function: this.tok.T_FUNCTION,\n    const: this.tok.T_CONST,\n    return: this.tok.T_RETURN,\n    try: this.tok.T_TRY,\n    catch: this.tok.T_CATCH,\n    finally: this.tok.T_FINALLY,\n    throw: this.tok.T_THROW,\n    if: this.tok.T_IF,\n    elseif: this.tok.T_ELSEIF,\n    endif: this.tok.T_ENDIF,\n    else: this.tok.T_ELSE,\n    while: this.tok.T_WHILE,\n    endwhile: this.tok.T_ENDWHILE,\n    do: this.tok.T_DO,\n    for: this.tok.T_FOR,\n    endfor: this.tok.T_ENDFOR,\n    foreach: this.tok.T_FOREACH,\n    endforeach: this.tok.T_ENDFOREACH,\n    declare: this.tok.T_DECLARE,\n    enddeclare: this.tok.T_ENDDECLARE,\n    instanceof: this.tok.T_INSTANCEOF,\n    as: this.tok.T_AS,\n    switch: this.tok.T_SWITCH,\n    endswitch: this.tok.T_ENDSWITCH,\n    case: this.tok.T_CASE,\n    default: this.tok.T_DEFAULT,\n    break: this.tok.T_BREAK,\n    continue: this.tok.T_CONTINUE,\n    goto: this.tok.T_GOTO,\n    echo: this.tok.T_ECHO,\n    print: this.tok.T_PRINT,\n    class: this.tok.T_CLASS,\n    interface: this.tok.T_INTERFACE,\n    trait: this.tok.T_TRAIT,\n    extends: this.tok.T_EXTENDS,\n    implements: this.tok.T_IMPLEMENTS,\n    new: this.tok.T_NEW,\n    clone: this.tok.T_CLONE,\n    var: this.tok.T_VAR,\n    eval: this.tok.T_EVAL,\n    include: this.tok.T_INCLUDE,\n    include_once: this.tok.T_INCLUDE_ONCE,\n    require: this.tok.T_REQUIRE,\n    require_once: this.tok.T_REQUIRE_ONCE,\n    namespace: this.tok.T_NAMESPACE,\n    use: this.tok.T_USE,\n    insteadof: this.tok.T_INSTEADOF,\n    global: this.tok.T_GLOBAL,\n    isset: this.tok.T_ISSET,\n    empty: this.tok.T_EMPTY,\n    __halt_compiler: this.tok.T_HALT_COMPILER,\n    static: this.tok.T_STATIC,\n    abstract: this.tok.T_ABSTRACT,\n    final: this.tok.T_FINAL,\n    private: this.tok.T_PRIVATE,\n    protected: this.tok.T_PROTECTED,\n    public: this.tok.T_PUBLIC,\n    unset: this.tok.T_UNSET,\n    list: this.tok.T_LIST,\n    array: this.tok.T_ARRAY,\n    callable: this.tok.T_CALLABLE,\n    or: this.tok.T_LOGICAL_OR,\n    and: this.tok.T_LOGICAL_AND,\n    xor: this.tok.T_LOGICAL_XOR,\n  };\n  this.castKeywords = {\n    int: this.tok.T_INT_CAST,\n    integer: this.tok.T_INT_CAST,\n    real: this.tok.T_DOUBLE_CAST,\n    double: this.tok.T_DOUBLE_CAST,\n    float: this.tok.T_DOUBLE_CAST,\n    string: this.tok.T_STRING_CAST,\n    binary: this.tok.T_STRING_CAST,\n    array: this.tok.T_ARRAY_CAST,\n    object: this.tok.T_OBJECT_CAST,\n    bool: this.tok.T_BOOL_CAST,\n    boolean: this.tok.T_BOOL_CAST,\n    unset: this.tok.T_UNSET_CAST,\n  };\n};\n\n/**\n * Initialize the lexer with the specified input\n */\nlexer.prototype.setInput = function (input) {\n  this._input = input;\n  this.size = input.length;\n  this.yylineno = 1;\n  this.offset = 0;\n  this.yyprevcol = 0;\n  this.yytext = \"\";\n  this.yylloc = {\n    first_offset: 0,\n    first_line: 1,\n    first_column: 0,\n    prev_offset: 0,\n    prev_line: 1,\n    prev_column: 0,\n    last_line: 1,\n    last_column: 0,\n  };\n  this.tokens = [];\n  if (this.version > 703) {\n    this.keywords.fn = this.tok.T_FN;\n  } else {\n    delete this.keywords.fn;\n  }\n  this.done = this.offset >= this.size;\n  if (!this.all_tokens && this.mode_eval) {\n    this.conditionStack = [\"INITIAL\"];\n    this.begin(\"ST_IN_SCRIPTING\");\n  } else {\n    this.conditionStack = [];\n    this.begin(\"INITIAL\");\n  }\n  // https://github.com/php/php-src/blob/999e32b65a8a4bb59e27e538fa68ffae4b99d863/Zend/zend_language_scanner.h#L59\n  // Used for heredoc and nowdoc\n  this.heredoc_label = {\n    label: \"\",\n    length: 0,\n    indentation: 0,\n    indentation_uses_spaces: false,\n    finished: false,\n    /**\n     * this used for parser to detemine the if current node segment is first encaps node.\n     * if ture, the indentation will remove from the begining. and if false, the prev node\n     * might be a variable '}' ,and the leading spaces should not be removed util meet the\n     * first \\n\n     */\n    first_encaps_node: false,\n    // for backward compatible\n    toString: function () {\n      this.label;\n    },\n  };\n  return this;\n};\n\n/**\n * consumes and returns one char from the input\n */\nlexer.prototype.input = function () {\n  const ch = this._input[this.offset];\n  if (!ch) return \"\";\n  this.yytext += ch;\n  this.offset++;\n  if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n    this.yytext += \"\\n\";\n    this.offset++;\n  }\n  if (ch === \"\\n\" || ch === \"\\r\") {\n    this.yylloc.last_line = ++this.yylineno;\n    this.yyprevcol = this.yylloc.last_column;\n    this.yylloc.last_column = 0;\n  } else {\n    this.yylloc.last_column++;\n  }\n  return ch;\n};\n\n/**\n * revert eating specified size\n */\nlexer.prototype.unput = function (size) {\n  if (size === 1) {\n    // 1 char unput (most cases)\n    this.offset--;\n    if (\n      this._input[this.offset] === \"\\n\" &&\n      this._input[this.offset - 1] === \"\\r\"\n    ) {\n      this.offset--;\n      size++;\n    }\n    if (\n      this._input[this.offset] === \"\\r\" ||\n      this._input[this.offset] === \"\\n\"\n    ) {\n      this.yylloc.last_line--;\n      this.yylineno--;\n      this.yylloc.last_column = this.yyprevcol;\n    } else {\n      this.yylloc.last_column--;\n    }\n    this.yytext = this.yytext.substring(0, this.yytext.length - size);\n  } else if (size > 0) {\n    this.offset -= size;\n    if (size < this.yytext.length) {\n      this.yytext = this.yytext.substring(0, this.yytext.length - size);\n      // re-calculate position\n      this.yylloc.last_line = this.yylloc.first_line;\n      this.yylloc.last_column = this.yyprevcol = this.yylloc.first_column;\n      for (let i = 0; i < this.yytext.length; i++) {\n        let c = this.yytext[i];\n        if (c === \"\\r\") {\n          c = this.yytext[++i];\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n          if (c !== \"\\n\") {\n            if (c === \"\\r\") {\n              this.yylloc.last_line++;\n            } else {\n              this.yylloc.last_column++;\n            }\n          }\n        } else if (c === \"\\n\") {\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n        } else {\n          this.yylloc.last_column++;\n        }\n      }\n      this.yylineno = this.yylloc.last_line;\n    } else {\n      // reset full text\n      this.yytext = \"\";\n      this.yylloc.last_line = this.yylineno = this.yylloc.first_line;\n      this.yylloc.last_column = this.yylloc.first_column;\n    }\n  }\n\n  return this;\n};\n\n// check if the text matches\nlexer.prototype.tryMatch = function (text) {\n  return text === this.ahead(text.length);\n};\n\n// check if the text matches\nlexer.prototype.tryMatchCaseless = function (text) {\n  return text === this.ahead(text.length).toLowerCase();\n};\n\n// look ahead\nlexer.prototype.ahead = function (size) {\n  let text = this._input.substring(this.offset, this.offset + size);\n  if (\n    text[text.length - 1] === \"\\r\" &&\n    this._input[this.offset + size + 1] === \"\\n\"\n  ) {\n    text += \"\\n\";\n  }\n  return text;\n};\n\n// consume the specified size\nlexer.prototype.consume = function (size) {\n  for (let i = 0; i < size; i++) {\n    const ch = this._input[this.offset];\n    if (!ch) break;\n    this.yytext += ch;\n    this.offset++;\n    if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n      this.yytext += \"\\n\";\n      this.offset++;\n      i++;\n    }\n    if (ch === \"\\n\" || ch === \"\\r\") {\n      this.yylloc.last_line = ++this.yylineno;\n      this.yyprevcol = this.yylloc.last_column;\n      this.yylloc.last_column = 0;\n    } else {\n      this.yylloc.last_column++;\n    }\n  }\n  return this;\n};\n\n/**\n * Gets the current state\n */\nlexer.prototype.getState = function () {\n  return {\n    yytext: this.yytext,\n    offset: this.offset,\n    yylineno: this.yylineno,\n    yyprevcol: this.yyprevcol,\n    yylloc: {\n      first_offset: this.yylloc.first_offset,\n      first_line: this.yylloc.first_line,\n      first_column: this.yylloc.first_column,\n      last_line: this.yylloc.last_line,\n      last_column: this.yylloc.last_column,\n    },\n    heredoc_label: this.heredoc_label,\n  };\n};\n\n/**\n * Sets the current lexer state\n */\nlexer.prototype.setState = function (state) {\n  this.yytext = state.yytext;\n  this.offset = state.offset;\n  this.yylineno = state.yylineno;\n  this.yyprevcol = state.yyprevcol;\n  this.yylloc = state.yylloc;\n  if (state.heredoc_label) {\n    this.heredoc_label = state.heredoc_label;\n  }\n  return this;\n};\n\n// prepend next token\nlexer.prototype.appendToken = function (value, ahead) {\n  this.tokens.push([value, ahead]);\n  return this;\n};\n\n// return next match that has a token\nlexer.prototype.lex = function () {\n  this.yylloc.prev_offset = this.offset;\n  this.yylloc.prev_line = this.yylloc.last_line;\n  this.yylloc.prev_column = this.yylloc.last_column;\n  let token = this.next() || this.lex();\n  if (!this.all_tokens) {\n    while (\n      token === this.tok.T_WHITESPACE || // ignore white space\n      (!this.comment_tokens &&\n        (token === this.tok.T_COMMENT || // ignore single lines comments\n          token === this.tok.T_DOC_COMMENT)) || // ignore doc comments\n      // ignore open tags\n      token === this.tok.T_OPEN_TAG\n    ) {\n      token = this.next() || this.lex();\n    }\n    if (token == this.tok.T_OPEN_TAG_WITH_ECHO) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1683\n      // open tag with echo statement\n      return this.tok.T_ECHO;\n    } else if (token === this.tok.T_CLOSE_TAG) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n      return \";\"; /* implicit ; */\n    }\n  }\n  if (!this.yylloc.prev_offset) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n  }\n  /*else if (this.yylloc.prev_offset === this.offset && this.offset !== this.size) {\n    throw new Error('Infinite loop @ ' + this.offset + ' / ' + this.size);\n  }*/\n  return token;\n};\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nlexer.prototype.begin = function (condition) {\n  this.conditionStack.push(condition);\n  this.curCondition = condition;\n  this.stateCb = this[\"match\" + condition];\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + condition + '\"');\n  }\n  return this;\n};\n\n// pop the previously active lexer condition state off the condition stack\nlexer.prototype.popState = function () {\n  const n = this.conditionStack.length - 1;\n  const condition = n > 0 ? this.conditionStack.pop() : this.conditionStack[0];\n  this.curCondition = this.conditionStack[this.conditionStack.length - 1];\n  this.stateCb = this[\"match\" + this.curCondition];\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + this.curCondition + '\"');\n  }\n  return condition;\n};\n\n// return next match in input\nlexer.prototype.next = function () {\n  let token;\n  if (!this._input) {\n    this.done = true;\n  }\n  this.yylloc.first_offset = this.offset;\n  this.yylloc.first_line = this.yylloc.last_line;\n  this.yylloc.first_column = this.yylloc.last_column;\n  this.yytext = \"\";\n  if (this.done) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n    return this.EOF;\n  }\n  if (this.tokens.length > 0) {\n    token = this.tokens.shift();\n    if (typeof token[1] === \"object\") {\n      this.setState(token[1]);\n    } else {\n      this.consume(token[1]);\n    }\n    token = token[0];\n  } else {\n    token = this.stateCb.apply(this, []);\n  }\n  if (this.offset >= this.size && this.tokens.length === 0) {\n    this.done = true;\n  }\n  if (this.debug) {\n    let tName = token;\n    if (typeof tName === \"number\") {\n      tName = this.engine.tokens.values[tName];\n    } else {\n      tName = '\"' + tName + '\"';\n    }\n    const e = new Error(\n      tName +\n        \"\\tfrom \" +\n        this.yylloc.first_line +\n        \",\" +\n        this.yylloc.first_column +\n        \"\\t - to \" +\n        this.yylloc.last_line +\n        \",\" +\n        this.yylloc.last_column +\n        '\\t\"' +\n        this.yytext +\n        '\"'\n    );\n    // eslint-disable-next-line no-console\n    console.error(e.stack);\n  }\n  return token;\n};\n\n// extends the lexer with states\n[\n  comments,\n  initial,\n  numbers,\n  property,\n  scripting,\n  strings,\n  tokens,\n  utils,\n].forEach(function (ext) {\n  for (const k in ext) {\n    lexer.prototype[k] = ext[k];\n  }\n});\n\nvar lexer_1 = lexer;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar array = {\n  /**\n   * Parse an array\n   * ```ebnf\n   * array ::= T_ARRAY '(' array_pair_list ')' |\n   *   '[' array_pair_list ']'\n   * ```\n   */\n  read_array: function () {\n    let expect = null;\n    let shortForm = false;\n    const result = this.node(\"array\");\n\n    if (this.token === this.tok.T_ARRAY) {\n      this.next().expect(\"(\");\n      expect = \")\";\n    } else {\n      shortForm = true;\n      expect = \"]\";\n    }\n    let items = [];\n    if (this.next().token !== expect) {\n      items = this.read_array_pair_list(shortForm);\n    }\n    this.expect(expect);\n    this.next();\n    return result(shortForm, items);\n  },\n  /**\n   * Reads an array of items\n   * ```ebnf\n   * array_pair_list ::= array_pair (',' array_pair?)*\n   * ```\n   */\n  read_array_pair_list: function (shortForm) {\n    const self = this;\n    return this.read_list(\n      function () {\n        return self.read_array_pair(shortForm);\n      },\n      \",\",\n      true\n    );\n  },\n  /**\n   * Reads an entry\n   * array_pair:\n   *  expr T_DOUBLE_ARROW expr\n   *  | expr\n   *  | expr T_DOUBLE_ARROW '&' variable\n   *  | '&' variable\n   *  | expr T_DOUBLE_ARROW T_LIST '(' array_pair_list ')'\n   *  | T_LIST '(' array_pair_list ')'\n   */\n  read_array_pair: function (shortForm) {\n    if (\n      (!shortForm && this.token === \")\") ||\n      (shortForm && this.token === \"]\")\n    ) {\n      return;\n    }\n\n    if (this.token === \",\") {\n      return this.node(\"noop\")();\n    }\n\n    const entry = this.node(\"entry\");\n\n    let key = null;\n    let value = null;\n    let byRef = false;\n    let unpack = false;\n\n    if (this.token === \"&\") {\n      this.next();\n      byRef = true;\n      value = this.read_variable(true, false);\n    } else if (this.token === this.tok.T_ELLIPSIS && this.version >= 704) {\n      this.next();\n      if (this.token === \"&\") {\n        this.error();\n      }\n      unpack = true;\n      value = this.read_expr();\n    } else {\n      const expr = this.read_expr();\n\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        this.next();\n        key = expr;\n\n        if (this.token === \"&\") {\n          this.next();\n          byRef = true;\n          value = this.read_variable(true, false);\n        } else {\n          value = this.read_expr();\n        }\n      } else {\n        value = expr;\n      }\n    }\n\n    return entry(key, value, byRef, unpack);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _class = {\n  /**\n   * reading a class\n   * ```ebnf\n   * class ::= class_scope? T_CLASS T_STRING (T_EXTENDS NAMESPACE_NAME)? (T_IMPLEMENTS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' CLASS_BODY '}'\n   * ```\n   */\n  read_class_declaration_statement: function () {\n    const result = this.node(\"class\");\n    const flag = this.read_class_modifiers();\n    // graceful mode : ignore token & go next\n    if (this.token !== this.tok.T_CLASS) {\n      this.error(this.tok.T_CLASS);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const propExtends = this.read_extends_from();\n    const propImplements = this.read_implements_list();\n    this.expect(\"{\");\n    const body = this.next().read_class_body();\n    return result(propName, propExtends, propImplements, body, flag);\n  },\n\n  read_class_modifiers: function () {\n    return [0, 0, this.read_class_modifier()];\n  },\n\n  read_class_modifier: function () {\n    const result = 0;\n\n    if (this.token === this.tok.T_ABSTRACT) {\n      this.next();\n      return 1;\n    } else if (this.token === this.tok.T_FINAL) {\n      this.next();\n      return 2;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a class body\n   * ```ebnf\n   *   class_body ::= (member_flags? (T_VAR | T_STRING | T_FUNCTION))*\n   * ```\n   */\n  read_class_body: function () {\n    let result = [];\n\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      }\n\n      // check T_USE trait\n      if (this.token === this.tok.T_USE) {\n        result = result.concat(this.read_trait_use_statement());\n        continue;\n      }\n\n      // read member flags\n      const flags = this.read_member_flags(false);\n\n      // check constant\n      if (this.token === this.tok.T_CONST) {\n        const constants = this.read_constant_list(flags);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(constants);\n        continue;\n      }\n\n      // jump over T_VAR then land on T_VARIABLE\n      if (this.token === this.tok.T_VAR) {\n        this.next().expect(this.tok.T_VARIABLE);\n        flags[0] = null; // public (as null)\n        flags[1] = 0; // non static var\n      }\n\n      if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        result.push(this.read_function(false, flags));\n      } else if (\n        this.token === this.tok.T_VARIABLE ||\n        // support https://wiki.php.net/rfc/typed_properties_v2\n        (this.version >= 704 &&\n          (this.token === \"?\" ||\n            this.token === this.tok.T_CALLABLE ||\n            this.token === this.tok.T_ARRAY ||\n            this.token === this.tok.T_NS_SEPARATOR ||\n            this.token === this.tok.T_STRING ||\n            this.token === this.tok.T_NAMESPACE))\n      ) {\n        // reads a variable\n        const variables = this.read_variable_list(flags);\n        this.expect(\";\");\n        this.next();\n        result = result.concat(variables);\n      } else {\n        // raise an error\n        this.error([\n          this.tok.T_CONST,\n          this.tok.T_VARIABLE,\n          this.tok.T_FUNCTION,\n        ]);\n        // ignore token\n        this.next();\n      }\n    }\n    this.expect(\"}\");\n    this.next();\n    return result;\n  },\n  /**\n   * Reads variable list\n   * ```ebnf\n   *  variable_list ::= (variable_declaration ',')* variable_declaration\n   * ```\n   */\n  read_variable_list: function (flags) {\n    const result = this.node(\"propertystatement\");\n\n    const properties = this.read_list(\n      /**\n       * Reads a variable declaration\n       *\n       * ```ebnf\n       *  variable_declaration ::= T_VARIABLE '=' scalar\n       * ```\n       */\n      function read_variable_declaration() {\n        const result = this.node(\"property\");\n        const [nullable, type] = this.read_optional_type();\n        this.expect(this.tok.T_VARIABLE);\n        let propName = this.node(\"identifier\");\n        const name = this.text().substring(1); // ignore $\n        this.next();\n        propName = propName(name);\n        if (this.token === \";\" || this.token === \",\") {\n          return result(propName, null, nullable, type);\n        } else if (this.token === \"=\") {\n          // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L815\n          return result(propName, this.next().read_expr(), nullable, type);\n        } else {\n          this.expect([\",\", \";\", \"=\"]);\n          return result(propName, null, nullable, type);\n        }\n      },\n      \",\"\n    );\n\n    return result(null, properties, flags);\n  },\n  /**\n   * Reads constant list\n   * ```ebnf\n   *  constant_list ::= T_CONST (constant_declaration ',')* constant_declaration\n   * ```\n   */\n  read_constant_list: function (flags) {\n    if (this.expect(this.tok.T_CONST)) {\n      this.next();\n    }\n    const result = this.node(\"classconstant\");\n    const items = this.read_list(\n      /**\n       * Reads a constant declaration\n       *\n       * ```ebnf\n       *  constant_declaration ::= (T_STRING | IDENTIFIER) '=' expr\n       * ```\n       * @return {Constant} [:link:](AST.md#constant)\n       */\n      function read_constant_declaration() {\n        const result = this.node(\"constant\");\n        let constName = null;\n        let value = null;\n        if (\n          this.token === this.tok.T_STRING ||\n          (this.version >= 700 && this.is(\"IDENTIFIER\"))\n        ) {\n          constName = this.node(\"identifier\");\n          const name = this.text();\n          this.next();\n          constName = constName(name);\n        } else {\n          this.expect(\"IDENTIFIER\");\n        }\n        if (this.expect(\"=\")) {\n          value = this.next().read_expr();\n        }\n        return result(constName, value);\n      },\n      \",\"\n    );\n\n    return result(null, items, flags);\n  },\n  /**\n   * Read member flags\n   * @return array\n   *  1st index : 0 => public, 1 => protected, 2 => private\n   *  2nd index : 0 => instance member, 1 => static member\n   *  3rd index : 0 => normal, 1 => abstract member, 2 => final member\n   */\n  read_member_flags: function (asInterface) {\n    const result = [-1, -1, -1];\n    if (this.is(\"T_MEMBER_FLAGS\")) {\n      let idx = 0,\n        val = 0;\n      do {\n        switch (this.token) {\n          case this.tok.T_PUBLIC:\n            idx = 0;\n            val = 0;\n            break;\n          case this.tok.T_PROTECTED:\n            idx = 0;\n            val = 1;\n            break;\n          case this.tok.T_PRIVATE:\n            idx = 0;\n            val = 2;\n            break;\n          case this.tok.T_STATIC:\n            idx = 1;\n            val = 1;\n            break;\n          case this.tok.T_ABSTRACT:\n            idx = 2;\n            val = 1;\n            break;\n          case this.tok.T_FINAL:\n            idx = 2;\n            val = 2;\n            break;\n        }\n        if (asInterface) {\n          if (idx == 0 && val == 2) {\n            // an interface can't be private\n            this.expect([this.tok.T_PUBLIC, this.tok.T_PROTECTED]);\n            val = -1;\n          } else if (idx == 2 && val == 1) {\n            // an interface cant be abstract\n            this.error();\n            val = -1;\n          }\n        }\n        if (result[idx] !== -1) {\n          // already defined flag\n          this.error();\n        } else if (val !== -1) {\n          result[idx] = val;\n        }\n      } while (this.next().is(\"T_MEMBER_FLAGS\"));\n    }\n\n    if (result[1] == -1) result[1] = 0;\n    if (result[2] == -1) result[2] = 0;\n    return result;\n  },\n\n  /**\n   * optional_type:\n   *\t  /- empty -/\t{ $$ = NULL; }\n   *   |\ttype_expr\t{ $$ = $1; }\n   * ;\n   *\n   * type_expr:\n   *\t\ttype\t\t{ $$ = $1; }\n   *\t|\t'?' type\t{ $$ = $2; $$->attr |= ZEND_TYPE_NULLABLE; }\n   *\t|\tunion_type\t{ $$ = $1; }\n   * ;\n   *\n   * type:\n   * \t\tT_ARRAY\t\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_ARRAY); }\n   * \t|\tT_CALLABLE\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_CALLABLE); }\n   * \t|\tname\t\t{ $$ = $1; }\n   * ;\n   *\n   * union_type:\n   * \t\ttype '|' type       { $$ = zend_ast_create_list(2, ZEND_AST_TYPE_UNION, $1, $3); }\n   * \t|\tunion_type '|' type { $$ = zend_ast_list_add($1, $3); }\n   * ;\n   */\n  read_optional_type: function () {\n    let nullable = false;\n    if (this.token === \"?\") {\n      nullable = true;\n      this.next();\n    }\n    let type = this.read_type();\n    if (nullable && !type) {\n      this.raiseError(\n        \"Expecting a type definition combined with nullable operator\"\n      );\n    }\n    if (!nullable && !type) {\n      return [false, null];\n    }\n    if (this.token === \"|\") {\n      type = [type];\n      do {\n        this.next();\n        const variant = this.read_type();\n        if (!variant) {\n          this.raiseError(\"Expecting a type definition\");\n          break;\n        }\n        type.push(variant);\n      } while (this.token === \"|\");\n    }\n    return [nullable, type];\n  },\n\n  /**\n   * reading an interface\n   * ```ebnf\n   * interface ::= T_INTERFACE T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' INTERFACE_BODY '}'\n   * ```\n   */\n  read_interface_declaration_statement: function () {\n    const result = this.node(\"interface\");\n    if (this.token !== this.tok.T_INTERFACE) {\n      this.error(this.tok.T_INTERFACE);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const propExtends = this.read_interface_extends_list();\n    this.expect(\"{\");\n    const body = this.next().read_interface_body();\n    return result(propName, propExtends, body);\n  },\n  /**\n   * Reads an interface body\n   * ```ebnf\n   *   interface_body ::= (member_flags? (T_CONST | T_FUNCTION))*\n   * ```\n   */\n  read_interface_body: function () {\n    let result = [];\n\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      }\n\n      // read member flags\n      const flags = this.read_member_flags(true);\n\n      // check constant\n      if (this.token == this.tok.T_CONST) {\n        const constants = this.read_constant_list(flags);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(constants);\n      } else if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        const method = this.read_function_declaration(2, flags);\n        method.parseFlags(flags);\n        result.push(method);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n      } else {\n        // raise an error\n        this.error([this.tok.T_CONST, this.tok.T_FUNCTION]);\n        this.next();\n      }\n    }\n    if (this.expect(\"}\")) {\n      this.next();\n    }\n    return result;\n  },\n  /**\n   * reading a trait\n   * ```ebnf\n   * trait ::= T_TRAIT T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' FUNCTION* '}'\n   * ```\n   */\n  read_trait_declaration_statement: function () {\n    const result = this.node(\"trait\");\n    // graceful mode : ignore token & go next\n    if (this.token !== this.tok.T_TRAIT) {\n      this.error(this.tok.T_TRAIT);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    this.expect(\"{\");\n    const body = this.next().read_class_body();\n    return result(propName, body);\n  },\n  /**\n   * reading a use statement\n   * ```ebnf\n   * trait_use_statement ::= namespace_name (',' namespace_name)* ('{' trait_use_alias '}')?\n   * ```\n   */\n  read_trait_use_statement: function () {\n    // defines use statements\n    const node = this.node(\"traituse\");\n    this.expect(this.tok.T_USE) && this.next();\n    const traits = [this.read_namespace_name()];\n    let adaptations = null;\n    while (this.token === \",\") {\n      traits.push(this.next().read_namespace_name());\n    }\n    if (this.token === \"{\") {\n      adaptations = [];\n      // defines alias statements\n      while (this.next().token !== this.EOF) {\n        if (this.token === \"}\") break;\n        adaptations.push(this.read_trait_use_alias());\n        this.expect(\";\");\n      }\n      if (this.expect(\"}\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    }\n    return node(traits, adaptations);\n  },\n  /**\n   * Reading trait alias\n   * ```ebnf\n   * trait_use_alias ::= namespace_name ( T_DOUBLE_COLON T_STRING )? (T_INSTEADOF namespace_name) | (T_AS member_flags? T_STRING)\n   * ```\n   * name list : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L303\n   * trait adaptation : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L742\n   */\n  read_trait_use_alias: function () {\n    const node = this.node();\n    let trait = null;\n    let method;\n\n    if (this.is(\"IDENTIFIER\")) {\n      method = this.node(\"identifier\");\n      const methodName = this.text();\n      this.next();\n      method = method(methodName);\n    } else {\n      method = this.read_namespace_name();\n\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        this.next();\n        if (\n          this.token === this.tok.T_STRING ||\n          (this.version >= 700 && this.is(\"IDENTIFIER\"))\n        ) {\n          trait = method;\n          method = this.node(\"identifier\");\n          const methodName = this.text();\n          this.next();\n          method = method(methodName);\n        } else {\n          this.expect(this.tok.T_STRING);\n        }\n      } else {\n        // convert identifier as string\n        method = method.name;\n      }\n    }\n\n    // handle trait precedence\n    if (this.token === this.tok.T_INSTEADOF) {\n      return node(\n        \"traitprecedence\",\n        trait,\n        method,\n        this.next().read_name_list()\n      );\n    } else if (this.token === this.tok.T_AS) {\n      // handle trait alias\n      let flags = null;\n      let alias = null;\n      if (this.next().is(\"T_MEMBER_FLAGS\")) {\n        flags = this.read_member_flags();\n      }\n\n      if (\n        this.token === this.tok.T_STRING ||\n        (this.version >= 700 && this.is(\"IDENTIFIER\"))\n      ) {\n        alias = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        alias = alias(name);\n      } else if (flags === false) {\n        // no visibility flags and no name => too bad\n        this.expect(this.tok.T_STRING);\n      }\n\n      return node(\"traitalias\", trait, method, alias, flags);\n    }\n\n    // handle errors\n    this.expect([this.tok.T_AS, this.tok.T_INSTEADOF]);\n    return node(\"traitalias\", trait, method, null, null);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar comment = {\n  /**\n   *  Comments with // or # or / * ... * /\n   */\n  read_comment: function () {\n    const text = this.text();\n    let result = this.ast.prepare(\n      text.substring(0, 2) === \"/*\" ? \"commentblock\" : \"commentline\",\n      null,\n      this\n    );\n    const offset = this.lexer.yylloc.first_offset;\n    // handle location on comment\n    const prev = this.prev;\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n  /**\n   * Comments with / ** ... * /\n   */\n  read_doc_comment: function () {\n    let result = this.ast.prepare(\"commentblock\", null, this);\n    const offset = this.lexer.yylloc.first_offset;\n    const text = this.text();\n    const prev = this.prev;\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar expr = {\n  read_expr: function (expr) {\n    const result = this.node();\n    if (this.token === \"@\") {\n      if (!expr) {\n        expr = this.next().read_expr();\n      }\n      return result(\"silent\", expr);\n    }\n    if (!expr) {\n      expr = this.read_expr_item();\n    }\n    // binary operations\n    if (this.token === \"|\")\n      return result(\"bin\", \"|\", expr, this.next().read_expr());\n    if (this.token === \"&\")\n      return result(\"bin\", \"&\", expr, this.next().read_expr());\n    if (this.token === \"^\")\n      return result(\"bin\", \"^\", expr, this.next().read_expr());\n    if (this.token === \".\")\n      return result(\"bin\", \".\", expr, this.next().read_expr());\n    if (this.token === \"+\")\n      return result(\"bin\", \"+\", expr, this.next().read_expr());\n    if (this.token === \"-\")\n      return result(\"bin\", \"-\", expr, this.next().read_expr());\n    if (this.token === \"*\")\n      return result(\"bin\", \"*\", expr, this.next().read_expr());\n    if (this.token === \"/\")\n      return result(\"bin\", \"/\", expr, this.next().read_expr());\n    if (this.token === \"%\")\n      return result(\"bin\", \"%\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_POW)\n      return result(\"bin\", \"**\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SL)\n      return result(\"bin\", \"<<\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SR)\n      return result(\"bin\", \">>\", expr, this.next().read_expr());\n    // more binary operations (formerly bool)\n    if (this.token === this.tok.T_BOOLEAN_OR)\n      return result(\"bin\", \"||\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_OR)\n      return result(\"bin\", \"or\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_BOOLEAN_AND)\n      return result(\"bin\", \"&&\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_AND)\n      return result(\"bin\", \"and\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_XOR)\n      return result(\"bin\", \"xor\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_IDENTICAL)\n      return result(\"bin\", \"===\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_NOT_IDENTICAL)\n      return result(\"bin\", \"!==\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_EQUAL)\n      return result(\"bin\", \"==\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_NOT_EQUAL)\n      return result(\"bin\", \"!=\", expr, this.next().read_expr());\n    if (this.token === \"<\")\n      return result(\"bin\", \"<\", expr, this.next().read_expr());\n    if (this.token === \">\")\n      return result(\"bin\", \">\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_SMALLER_OR_EQUAL)\n      return result(\"bin\", \"<=\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_GREATER_OR_EQUAL)\n      return result(\"bin\", \">=\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SPACESHIP)\n      return result(\"bin\", \"<=>\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_INSTANCEOF) {\n      expr = result(\n        \"bin\",\n        \"instanceof\",\n        expr,\n        this.next().read_class_name_reference()\n      );\n      if (\n        this.token !== \";\" &&\n        this.token !== this.tok.T_INLINE_HTML &&\n        this.token !== this.EOF\n      ) {\n        expr = this.read_expr(expr);\n      }\n    }\n\n    // extra operations :\n    // $username = $_GET['user'] ?? 'nobody';\n    if (this.token === this.tok.T_COALESCE)\n      return result(\"bin\", \"??\", expr, this.next().read_expr());\n\n    // extra operations :\n    // $username = $_GET['user'] ? true : false;\n    if (this.token === \"?\") {\n      let trueArg = null;\n      if (this.next().token !== \":\") {\n        trueArg = this.read_expr();\n      }\n      this.expect(\":\") && this.next();\n      return result(\"retif\", expr, trueArg, this.read_expr());\n    } else {\n      // see #193\n      result.destroy(expr);\n    }\n\n    return expr;\n  },\n\n  /**\n   * Reads a cast expression\n   */\n  read_expr_cast: function (type) {\n    return this.node(\"cast\")(type, this.text(), this.next().read_expr());\n  },\n\n  /**\n   * Read a isset variable\n   */\n  read_isset_variable: function () {\n    return this.read_expr();\n  },\n\n  /**\n   * Reads isset variables\n   */\n  read_isset_variables: function () {\n    return this.read_function_list(this.read_isset_variable, \",\");\n  },\n\n  /*\n   * Reads internal PHP functions\n   */\n  read_internal_functions_in_yacc: function () {\n    let result = null;\n    switch (this.token) {\n      case this.tok.T_ISSET:\n        {\n          result = this.node(\"isset\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const variables = this.read_isset_variables();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(variables);\n        }\n        break;\n      case this.tok.T_EMPTY:\n        {\n          result = this.node(\"empty\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const expression = this.read_expr();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(expression);\n        }\n        break;\n      case this.tok.T_INCLUDE:\n        result = this.node(\"include\")(false, false, this.next().read_expr());\n        break;\n      case this.tok.T_INCLUDE_ONCE:\n        result = this.node(\"include\")(true, false, this.next().read_expr());\n        break;\n      case this.tok.T_EVAL:\n        {\n          result = this.node(\"eval\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const expr = this.read_expr();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(expr);\n        }\n        break;\n      case this.tok.T_REQUIRE:\n        result = this.node(\"include\")(false, true, this.next().read_expr());\n        break;\n      case this.tok.T_REQUIRE_ONCE:\n        result = this.node(\"include\")(true, true, this.next().read_expr());\n        break;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads optional expression\n   */\n  read_optional_expr: function (stopToken) {\n    if (this.token !== stopToken) {\n      return this.read_expr();\n    }\n\n    return null;\n  },\n\n  /**\n   * Reads exit expression\n   */\n  read_exit_expr: function () {\n    let expression = null;\n\n    if (this.token === \"(\") {\n      this.next();\n      expression = this.read_optional_expr(\")\");\n      this.expect(\")\") && this.next();\n    }\n\n    return expression;\n  },\n\n  /**\n   * ```ebnf\n   * Reads an expression\n   *  expr ::= @todo\n   * ```\n   */\n  read_expr_item: function () {\n    let result, expr;\n    if (this.token === \"+\")\n      return this.node(\"unary\")(\"+\", this.next().read_expr());\n    if (this.token === \"-\")\n      return this.node(\"unary\")(\"-\", this.next().read_expr());\n    if (this.token === \"!\")\n      return this.node(\"unary\")(\"!\", this.next().read_expr());\n    if (this.token === \"~\")\n      return this.node(\"unary\")(\"~\", this.next().read_expr());\n\n    if (this.token === \"(\") {\n      expr = this.next().read_expr();\n      expr.parenthesizedExpression = true;\n      this.expect(\")\") && this.next();\n      return this.handleDereferencable(expr);\n    }\n\n    if (this.token === \"`\") {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1048\n      return this.read_encapsed_string(\"`\");\n    }\n\n    if (this.token === this.tok.T_LIST) {\n      let assign = null;\n      const isInner = this.innerList;\n      result = this.node(\"list\");\n      if (!isInner) {\n        assign = this.node(\"assign\");\n      }\n      if (this.next().expect(\"(\")) {\n        this.next();\n      }\n\n      if (!this.innerList) this.innerList = true;\n\n      // reads inner items\n      const assignList = this.read_array_pair_list(false);\n      if (this.expect(\")\")) {\n        this.next();\n      }\n\n      // check if contains at least one assignment statement\n      let hasItem = false;\n      for (let i = 0; i < assignList.length; i++) {\n        if (assignList[i] !== null && assignList[i].kind !== \"noop\") {\n          hasItem = true;\n          break;\n        }\n      }\n      if (!hasItem) {\n        this.raiseError(\n          \"Fatal Error :  Cannot use empty list on line \" +\n            this.lexer.yylloc.first_line\n        );\n      }\n\n      // handles the node resolution\n      if (!isInner) {\n        this.innerList = false;\n        if (this.expect(\"=\")) {\n          return assign(\n            result(assignList, false),\n            this.next().read_expr(),\n            \"=\"\n          );\n        } else {\n          // error fallback : list($a, $b);\n          return result(assignList, false);\n        }\n      } else {\n        return result(assignList, false);\n      }\n    }\n\n    if (this.token === this.tok.T_CLONE)\n      return this.node(\"clone\")(this.next().read_expr());\n\n    switch (this.token) {\n      case this.tok.T_INC:\n        return this.node(\"pre\")(\"+\", this.next().read_variable(false, false));\n\n      case this.tok.T_DEC:\n        return this.node(\"pre\")(\"-\", this.next().read_variable(false, false));\n\n      case this.tok.T_NEW:\n        return this.read_new_expr();\n\n      case this.tok.T_ISSET:\n      case this.tok.T_EMPTY:\n      case this.tok.T_INCLUDE:\n      case this.tok.T_INCLUDE_ONCE:\n      case this.tok.T_EVAL:\n      case this.tok.T_REQUIRE:\n      case this.tok.T_REQUIRE_ONCE:\n        return this.read_internal_functions_in_yacc();\n      case this.tok.T_INT_CAST:\n        return this.read_expr_cast(\"int\");\n\n      case this.tok.T_DOUBLE_CAST:\n        return this.read_expr_cast(\"float\");\n\n      case this.tok.T_STRING_CAST:\n        return this.read_expr_cast(\n          this.text().indexOf(\"binary\") !== -1 ? \"binary\" : \"string\"\n        );\n\n      case this.tok.T_ARRAY_CAST:\n        return this.read_expr_cast(\"array\");\n\n      case this.tok.T_OBJECT_CAST:\n        return this.read_expr_cast(\"object\");\n\n      case this.tok.T_BOOL_CAST:\n        return this.read_expr_cast(\"bool\");\n\n      case this.tok.T_UNSET_CAST:\n        return this.read_expr_cast(\"unset\");\n\n      case this.tok.T_EXIT: {\n        const useDie = this.lexer.yytext.toLowerCase() === \"die\";\n        result = this.node(\"exit\");\n        this.next();\n        const expression = this.read_exit_expr();\n        return result(expression, useDie);\n      }\n\n      case this.tok.T_PRINT:\n        return this.node(\"print\")(this.next().read_expr());\n\n      // T_YIELD (expr (T_DOUBLE_ARROW expr)?)?\n      case this.tok.T_YIELD: {\n        let value = null;\n        let key = null;\n        result = this.node(\"yield\");\n        if (this.next().is(\"EXPR\")) {\n          // reads the yield return value\n          value = this.read_expr();\n          if (this.token === this.tok.T_DOUBLE_ARROW) {\n            // reads the yield returned key\n            key = value;\n            value = this.next().read_expr();\n          }\n        }\n        return result(value, key);\n      }\n\n      // T_YIELD_FROM expr\n      case this.tok.T_YIELD_FROM:\n        result = this.node(\"yieldfrom\");\n        expr = this.next().read_expr();\n        return result(expr);\n\n      case this.tok.T_FN:\n      case this.tok.T_FUNCTION:\n        return this.read_inline_function();\n\n      case this.tok.T_STATIC: {\n        const backup = [this.token, this.lexer.getState()];\n        this.next();\n        if (\n          this.token === this.tok.T_FUNCTION ||\n          (this.version >= 704 && this.token === this.tok.T_FN)\n        ) {\n          // handles static function\n          return this.read_inline_function([0, 1, 0]);\n        } else {\n          // rollback\n          this.lexer.tokens.push(backup);\n          this.next();\n        }\n      }\n    }\n\n    // SCALAR | VARIABLE\n    if (this.is(\"VARIABLE\")) {\n      result = this.node();\n      expr = this.read_variable(false, false);\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L877\n      // should accept only a variable\n      const isConst =\n        expr.kind === \"identifier\" ||\n        (expr.kind === \"staticlookup\" && expr.offset.kind === \"identifier\");\n\n      // VARIABLES SPECIFIC OPERATIONS\n      switch (this.token) {\n        case \"=\": {\n          if (isConst) this.error(\"VARIABLE\");\n          if (this.next().token == \"&\") {\n            return this.read_assignref(result, expr);\n          }\n          return result(\"assign\", expr, this.read_expr(), \"=\");\n        }\n\n        // operations :\n        case this.tok.T_PLUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"+=\");\n\n        case this.tok.T_MINUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"-=\");\n\n        case this.tok.T_MUL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"*=\");\n\n        case this.tok.T_POW_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"**=\");\n\n        case this.tok.T_DIV_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"/=\");\n\n        case this.tok.T_CONCAT_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \".=\");\n\n        case this.tok.T_MOD_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"%=\");\n\n        case this.tok.T_AND_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"&=\");\n\n        case this.tok.T_OR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"|=\");\n\n        case this.tok.T_XOR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"^=\");\n\n        case this.tok.T_SL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"<<=\");\n\n        case this.tok.T_SR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \">>=\");\n\n        case this.tok.T_COALESCE_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"??=\");\n\n        case this.tok.T_INC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"+\", expr);\n        case this.tok.T_DEC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"-\", expr);\n        default:\n          // see #193\n          result.destroy(expr);\n      }\n    } else if (this.is(\"SCALAR\")) {\n      result = this.node();\n      expr = this.read_scalar();\n      if (expr.kind === \"array\" && expr.shortForm && this.token === \"=\") {\n        // list assign\n        const list = this.node(\"list\")(expr.items, true);\n        if (expr.loc) list.loc = expr.loc;\n        const right = this.next().read_expr();\n        return result(\"assign\", list, right, \"=\");\n      } else {\n        // see #189 - swap docs on nodes\n        result.destroy(expr);\n      }\n      // classic array\n      return this.handleDereferencable(expr);\n    } else {\n      this.error(\"EXPR\");\n      this.next();\n    }\n\n    // returns variable | scalar\n    return expr;\n  },\n\n  /**\n   * Reads assignment\n   * @param {*} left\n   */\n  read_assignref: function (result, left) {\n    this.next();\n    let right;\n    if (this.token === this.tok.T_NEW) {\n      if (this.version >= 700) {\n        this.error();\n      }\n      right = this.read_new_expr();\n    } else {\n      right = this.read_variable(false, false);\n    }\n\n    return result(\"assignref\", left, right);\n  },\n\n  /**\n   *\n   * inline_function:\n   * \t\tfunction returns_ref backup_doc_comment '(' parameter_list ')' lexical_vars return_type\n   * \t\tbackup_fn_flags '{' inner_statement_list '}' backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_CLOSURE, $2 | $13, $1, $3,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0),\n   * \t\t\t\t  $5, $7, $11, $8); CG(extra_fn_flags) = $9; }\n   * \t|\tfn returns_ref '(' parameter_list ')' return_type backup_doc_comment T_DOUBLE_ARROW backup_fn_flags backup_lex_pos expr backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_ARROW_FUNC, $2 | $12, $1, $7,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0), $4, NULL,\n   * \t\t\t\t  zend_ast_create(ZEND_AST_RETURN, $11), $6);\n   * \t\t\t\t  ((zend_ast_decl *) $$)->lex_pos = $10;\n   * \t\t\t\t  CG(extra_fn_flags) = $9; }   *\n   */\n  read_inline_function: function (flags) {\n    if (this.token === this.tok.T_FUNCTION) {\n      return this.read_function(true, flags);\n    }\n    // introduced in PHP 7.4\n    if (!this.version >= 704) {\n      this.raiseError(\"Arrow Functions are not allowed\");\n    }\n    // as an arrowfunc\n    const node = this.node(\"arrowfunc\");\n    // eat T_FN\n    if (this.expect(this.tok.T_FN)) this.next();\n    // check the &\n    const isRef = this.is_reference();\n    // ...\n    if (this.expect(\"(\")) this.next();\n    const params = this.read_parameter_list();\n    if (this.expect(\")\")) this.next();\n    let nullable = false;\n    let returnType = null;\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n      returnType = this.read_type();\n    }\n    if (this.expect(this.tok.T_DOUBLE_ARROW)) this.next();\n    const body = this.read_expr();\n    return node(\n      params,\n      isRef,\n      body,\n      returnType,\n      nullable,\n      flags ? true : false\n    );\n  },\n\n  /**\n   * ```ebnf\n   *    new_expr ::= T_NEW (namespace_name function_argument_list) | (T_CLASS ... class declaration)\n   * ```\n   * https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L850\n   */\n  read_new_expr: function () {\n    const result = this.node(\"new\");\n    this.expect(this.tok.T_NEW) && this.next();\n    let args = [];\n    if (this.token === this.tok.T_CLASS) {\n      const what = this.node(\"class\");\n      // Annonymous class declaration\n      if (this.next().token === \"(\") {\n        args = this.read_argument_list();\n      }\n      const propExtends = this.read_extends_from();\n      const propImplements = this.read_implements_list();\n      let body = null;\n      if (this.expect(\"{\")) {\n        body = this.next().read_class_body();\n      }\n      return result(\n        what(null, propExtends, propImplements, body, [0, 0, 0]),\n        args\n      );\n    }\n    // Already existing class\n    const name = this.read_new_class_name();\n    if (this.token === \"(\") {\n      args = this.read_argument_list();\n    }\n    return result(name, args);\n  },\n  /**\n   * Reads a class name\n   * ```ebnf\n   * read_new_class_name ::= namespace_name | variable\n   * ```\n   */\n  read_new_class_name: function () {\n    if (\n      this.token === this.tok.T_NS_SEPARATOR ||\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_NAMESPACE\n    ) {\n      let result = this.read_namespace_name(true);\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        result = this.read_static_getter(result);\n      }\n      return result;\n    } else if (this.is(\"VARIABLE\")) {\n      return this.read_variable(true, false);\n    } else {\n      this.expect([this.tok.T_STRING, \"VARIABLE\"]);\n    }\n  },\n  handleDereferencable: function (expr) {\n    while (this.token !== this.EOF) {\n      if (\n        this.token === this.tok.T_OBJECT_OPERATOR ||\n        this.token === this.tok.T_DOUBLE_COLON\n      ) {\n        expr = this.recursive_variable_chain_scan(expr, false, false, true);\n      } else if (this.token === this.tok.T_CURLY_OPEN || this.token === \"[\") {\n        expr = this.read_dereferencable(expr);\n      } else if (this.token === \"(\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1118\n        expr = this.node(\"call\")(expr, this.read_argument_list());\n      } else {\n        return expr;\n      }\n    }\n    return expr;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _function = {\n  /**\n   * checks if current token is a reference keyword\n   */\n  is_reference: function () {\n    if (this.token == \"&\") {\n      this.next();\n      return true;\n    }\n    return false;\n  },\n  /**\n   * checks if current token is a variadic keyword\n   */\n  is_variadic: function () {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      this.next();\n      return true;\n    }\n    return false;\n  },\n  /**\n   * reading a function\n   * ```ebnf\n   * function ::= function_declaration code_block\n   * ```\n   */\n  read_function: function (closure, flag) {\n    const result = this.read_function_declaration(\n      closure ? 1 : flag ? 2 : 0,\n      flag && flag[1] === 1\n    );\n    if (flag && flag[2] == 1) {\n      // abstract function :\n      result.parseFlags(flag);\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\"{\")) {\n        result.body = this.read_code_block(false);\n        if (result.loc && result.body.loc) {\n          result.loc.end = result.body.loc.end;\n        }\n      }\n      if (!closure && flag) {\n        result.parseFlags(flag);\n      }\n    }\n    return result;\n  },\n  /**\n   * reads a function declaration (without his body)\n   * ```ebnf\n   * function_declaration ::= T_FUNCTION '&'?  T_STRING '(' parameter_list ')'\n   * ```\n   */\n  read_function_declaration: function (type, isStatic) {\n    let nodeName = \"function\";\n    if (type === 1) {\n      nodeName = \"closure\";\n    } else if (type === 2) {\n      nodeName = \"method\";\n    }\n    const result = this.node(nodeName);\n\n    if (this.expect(this.tok.T_FUNCTION)) {\n      this.next();\n    }\n    const isRef = this.is_reference();\n    let name = false,\n      use = [],\n      returnType = null,\n      nullable = false;\n    if (type !== 1) {\n      const nameNode = this.node(\"identifier\");\n      if (type === 2) {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING || this.is(\"IDENTIFIER\")) {\n            name = this.text();\n            this.next();\n          } else if (this.version < 704) {\n            this.error(\"IDENTIFIER\");\n          }\n        } else if (this.token === this.tok.T_STRING) {\n          name = this.text();\n          this.next();\n        } else {\n          this.error(\"IDENTIFIER\");\n        }\n      } else {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING) {\n            name = this.text();\n            this.next();\n          } else if (this.version >= 704) {\n            if (!this.expect(\"(\")) {\n              this.next();\n            }\n          } else {\n            this.error(this.tok.T_STRING);\n            this.next();\n          }\n        } else {\n          if (this.expect(this.tok.T_STRING)) {\n            name = this.text();\n          }\n          this.next();\n        }\n      }\n      name = nameNode(name);\n    }\n    if (this.expect(\"(\")) this.next();\n    const params = this.read_parameter_list();\n    if (this.expect(\")\")) this.next();\n    if (type === 1) {\n      use = this.read_lexical_vars();\n    }\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n      returnType = this.read_type();\n    }\n    if (type === 1) {\n      // closure\n      return result(params, isRef, use, returnType, nullable, isStatic);\n    }\n    return result(name, params, isRef, returnType, nullable);\n  },\n\n  read_lexical_vars: function () {\n    let result = [];\n\n    if (this.token === this.tok.T_USE) {\n      this.next();\n      this.expect(\"(\") && this.next();\n      result = this.read_lexical_var_list();\n      this.expect(\")\") && this.next();\n    }\n\n    return result;\n  },\n\n  read_lexical_var_list: function () {\n    return this.read_list(this.read_lexical_var, \",\");\n  },\n\n  /**\n   * ```ebnf\n   * lexical_var ::= '&'? T_VARIABLE\n   * ```\n   */\n  read_lexical_var: function () {\n    if (this.token === \"&\") {\n      return this.read_byref(this.read_lexical_var.bind(this));\n    }\n    const result = this.node(\"variable\");\n    this.expect(this.tok.T_VARIABLE);\n    const name = this.text().substring(1);\n    this.next();\n    return result(name, false);\n  },\n  /**\n   * reads a list of parameters\n   * ```ebnf\n   *  parameter_list ::= (parameter ',')* parameter?\n   * ```\n   */\n  read_parameter_list: function () {\n    const result = [];\n    if (this.token != \")\") {\n      while (this.token != this.EOF) {\n        result.push(this.read_parameter());\n        if (this.token == \",\") {\n          this.next();\n        } else if (this.token == \")\") {\n          break;\n        } else {\n          this.error([\",\", \")\"]);\n          break;\n        }\n      }\n    }\n    return result;\n  },\n  /**\n   * ```ebnf\n   *  parameter ::= type? '&'? T_ELLIPSIS? T_VARIABLE ('=' expr)?\n   * ```\n   * @see https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L640\n   */\n  read_parameter: function () {\n    const node = this.node(\"parameter\");\n    let parameterName = null;\n    let value = null;\n    let type = null;\n    let nullable = false;\n    if (this.token === \"?\") {\n      this.next();\n      nullable = true;\n    }\n    type = this.read_type();\n    if (nullable && !type) {\n      this.raiseError(\n        \"Expecting a type definition combined with nullable operator\"\n      );\n    }\n    const isRef = this.is_reference();\n    const isVariadic = this.is_variadic();\n    if (this.expect(this.tok.T_VARIABLE)) {\n      parameterName = this.node(\"identifier\");\n      const name = this.text().substring(1);\n      this.next();\n      parameterName = parameterName(name);\n    }\n    if (this.token == \"=\") {\n      value = this.next().read_expr();\n    }\n    return node(parameterName, type, value, isRef, isVariadic, nullable);\n  },\n  /**\n   * Reads a list of arguments\n   * ```ebnf\n   *  function_argument_list ::= '(' (argument_list (',' argument_list)*)? ')'\n   * ```\n   */\n  read_argument_list: function () {\n    let result = [];\n    this.expect(\"(\") && this.next();\n    if (this.token !== \")\") {\n      result = this.read_non_empty_argument_list();\n    }\n    this.expect(\")\") && this.next();\n    return result;\n  },\n  /**\n   * Reads non empty argument list\n   */\n  read_non_empty_argument_list: function () {\n    let wasVariadic = false;\n\n    return this.read_function_list(\n      function () {\n        const argument = this.read_argument();\n        if (argument) {\n          if (wasVariadic) {\n            this.raiseError(\"Unexpected argument after a variadic argument\");\n          }\n          if (argument.kind === \"variadic\") {\n            wasVariadic = true;\n          }\n        }\n        return argument;\n      }.bind(this),\n      \",\"\n    );\n  },\n  /**\n   * ```ebnf\n   *    argument_list ::= T_ELLIPSIS? expr\n   * ```\n   */\n  read_argument: function () {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      return this.node(\"variadic\")(this.next().read_expr());\n    }\n    return this.read_expr();\n  },\n  /**\n   * read type hinting\n   * ```ebnf\n   *  type ::= T_ARRAY | T_CALLABLE | namespace_name\n   * ```\n   */\n  read_type: function () {\n    const result = this.node();\n    if (this.token === this.tok.T_ARRAY || this.token === this.tok.T_CALLABLE) {\n      const type = this.text();\n      this.next();\n      return result(\"typereference\", type.toLowerCase(), type);\n    } else if (this.token === this.tok.T_STRING) {\n      const type = this.text();\n      const backup = [this.token, this.lexer.getState()];\n      this.next();\n      if (\n        this.token !== this.tok.T_NS_SEPARATOR &&\n        this.ast.typereference.types.indexOf(type.toLowerCase()) > -1\n      ) {\n        return result(\"typereference\", type.toLowerCase(), type);\n      } else {\n        // rollback a classic namespace\n        this.lexer.tokens.push(backup);\n        this.next();\n        // fix : destroy not consumed node (release comments)\n        result.destroy();\n        return this.read_namespace_name();\n      }\n    } else if (\n      this.token === this.tok.T_NAMESPACE ||\n      this.token === this.tok.T_NS_SEPARATOR\n    ) {\n      // fix : destroy not consumed node (release comments)\n      result.destroy();\n      return this.read_namespace_name();\n    }\n    // fix : destroy not consumed node (release comments)\n    result.destroy();\n    return null;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _if = {\n  /**\n   * Reads an IF statement\n   *\n   * ```ebnf\n   *  if ::= T_IF '(' expr ')' ':' ...\n   * ```\n   */\n  read_if: function () {\n    const result = this.node(\"if\");\n    const test = this.next().read_if_expr();\n    let body = null;\n    let alternate = null;\n    let shortForm = false;\n\n    if (this.token === \":\") {\n      shortForm = true;\n      this.next();\n      body = this.node(\"block\");\n      const items = [];\n      while (this.token !== this.EOF && this.token !== this.tok.T_ENDIF) {\n        if (this.token === this.tok.T_ELSEIF) {\n          alternate = this.read_elseif_short();\n          break;\n        } else if (this.token === this.tok.T_ELSE) {\n          alternate = this.read_else_short();\n          break;\n        }\n        items.push(this.read_inner_statement());\n      }\n      body = body(null, items);\n      this.expect(this.tok.T_ENDIF) && this.next();\n      this.expectEndOfStatement();\n    } else {\n      body = this.read_statement();\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_if();\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.next().read_statement();\n      }\n    }\n    return result(test, body, alternate, shortForm);\n  },\n  /**\n   * reads an if expression : '(' expr ')'\n   */\n  read_if_expr: function () {\n    this.expect(\"(\") && this.next();\n    const result = this.read_expr();\n    this.expect(\")\") && this.next();\n    return result;\n  },\n  /**\n   * reads an elseif (expr): statements\n   */\n  read_elseif_short: function () {\n    let alternate = null;\n    const result = this.node(\"if\");\n    const test = this.next().read_if_expr();\n    if (this.expect(\":\")) this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_elseif_short();\n        break;\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.read_else_short();\n        break;\n      }\n      items.push(this.read_inner_statement());\n    }\n    return result(test, body(null, items), alternate, true);\n  },\n  /**\n   *\n   */\n  read_else_short: function () {\n    if (this.next().expect(\":\")) this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      items.push(this.read_inner_statement());\n    }\n    return body(null, items);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar loops = {\n  /**\n   * Reads a while statement\n   * ```ebnf\n   * while ::= T_WHILE (statement | ':' inner_statement_list T_ENDWHILE ';')\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L587\n   * @return {While}\n   */\n  read_while: function () {\n    const result = this.node(\"while\");\n    this.expect(this.tok.T_WHILE) && this.next();\n    let test = null;\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    test = this.read_expr();\n    if (this.expect(\")\")) this.next();\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDWHILE);\n    } else {\n      body = this.read_statement();\n    }\n    return result(test, body, shortForm);\n  },\n  /**\n   * Reads a do / while loop\n   * ```ebnf\n   * do ::= T_DO statement T_WHILE '(' expr ')' ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L423\n   * @return {Do}\n   */\n  read_do: function () {\n    const result = this.node(\"do\");\n    this.expect(this.tok.T_DO) && this.next();\n    let test = null;\n    let body = null;\n    body = this.read_statement();\n    if (this.expect(this.tok.T_WHILE)) {\n      if (this.next().expect(\"(\")) this.next();\n      test = this.read_expr();\n      if (this.expect(\")\")) this.next();\n      if (this.expect(\";\")) this.next();\n    }\n    return result(test, body);\n  },\n  /**\n   * Read a for incremental loop\n   * ```ebnf\n   * for ::= T_FOR '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement\n   * for_statement ::= statement | ':' inner_statement_list T_ENDFOR ';'\n   * for_exprs ::= expr? (',' expr)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L425\n   * @return {For}\n   */\n  read_for: function () {\n    const result = this.node(\"for\");\n    this.expect(this.tok.T_FOR) && this.next();\n    let init = [];\n    let test = [];\n    let increment = [];\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    if (this.token !== \";\") {\n      init = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token !== \";\") {\n      test = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token !== \")\") {\n      increment = this.read_list(this.read_expr, \",\");\n      if (this.expect(\")\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOR);\n    } else {\n      body = this.read_statement();\n    }\n    return result(init, test, increment, body, shortForm);\n  },\n  /**\n   * Reads a foreach loop\n   * ```ebnf\n   * foreach ::= '(' expr T_AS foreach_variable (T_DOUBLE_ARROW foreach_variable)? ')' statement\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L438\n   * @return {Foreach}\n   */\n  read_foreach: function () {\n    const result = this.node(\"foreach\");\n    this.expect(this.tok.T_FOREACH) && this.next();\n    let source = null;\n    let key = null;\n    let value = null;\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    source = this.read_expr();\n    if (this.expect(this.tok.T_AS)) {\n      this.next();\n      value = this.read_foreach_variable();\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        key = value;\n        value = this.next().read_foreach_variable();\n      }\n    }\n\n    // grammatically correct but not supported by PHP\n    if (key && key.kind === \"list\") {\n      this.raiseError(\"Fatal Error : Cannot use list as key element\");\n    }\n\n    if (this.expect(\")\")) this.next();\n\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOREACH);\n    } else {\n      body = this.read_statement();\n    }\n    return result(source, key, value, body, shortForm);\n  },\n  /**\n   * Reads a foreach variable statement\n   * ```ebnf\n   * foreach_variable =\n   *    variable |\n   *    '&' variable |\n   *    T_LIST '(' assignment_list ')' |\n   *    '[' assignment_list ']'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L544\n   * @return {Expression}\n   */\n  read_foreach_variable: function () {\n    if (this.token === this.tok.T_LIST || this.token === \"[\") {\n      const isShort = this.token === \"[\";\n      const result = this.node(\"list\");\n      this.next();\n      if (!isShort && this.expect(\"(\")) this.next();\n      const assignList = this.read_array_pair_list(isShort);\n      if (this.expect(isShort ? \"]\" : \")\")) this.next();\n      return result(assignList, isShort);\n    } else {\n      return this.read_variable(false, false);\n    }\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar main = {\n  /**\n   * ```ebnf\n   * start ::= (namespace | top_statement)*\n   * ```\n   */\n  read_start: function () {\n    if (this.token == this.tok.T_NAMESPACE) {\n      return this.read_namespace();\n    } else {\n      return this.read_top_statement();\n    }\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar namespace = {\n  /**\n   * Reads a namespace declaration block\n   * ```ebnf\n   * namespace ::= T_NAMESPACE namespace_name? '{'\n   *    top_statements\n   * '}'\n   * | T_NAMESPACE namespace_name ';' top_statements\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.php\n   * @return {Namespace}\n   */\n  read_namespace: function () {\n    const result = this.node(\"namespace\");\n    let body;\n    this.expect(this.tok.T_NAMESPACE) && this.next();\n    let name;\n\n    if (this.token == \"{\") {\n      name = {\n        name: [\"\"],\n      };\n    } else {\n      name = this.read_namespace_name();\n    }\n    this.currentNamespace = name;\n\n    if (this.token == \";\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(this.EOF);\n      return result(name.name, body, false);\n    } else if (this.token == \"{\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(\"}\") && this.next();\n      if (\n        body.length === 0 &&\n        this.extractDoc &&\n        this._docs.length > this._docIndex\n      ) {\n        body.push(this.node(\"noop\")());\n      }\n      return result(name.name, body, true);\n    } else if (this.token === \"(\") {\n      // @fixme after merging #478\n      name.resolution = this.ast.reference.RELATIVE_NAME;\n      name.name = name.name.substring(1);\n      result.destroy();\n      return this.node(\"call\")(name, this.read_argument_list());\n    } else {\n      this.error([\"{\", \";\"]);\n      // graceful mode :\n      this.currentNamespace = name;\n      body = this.read_top_statements();\n      this.expect(this.EOF);\n      return result(name, body, false);\n    }\n  },\n  /**\n   * Reads a namespace name\n   * ```ebnf\n   *  namespace_name ::= T_NS_SEPARATOR? (T_STRING T_NS_SEPARATOR)* T_STRING\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.rules.php\n   * @return {Reference}\n   */\n  read_namespace_name: function (resolveReference) {\n    const result = this.node();\n    let relative = false;\n    if (this.token === this.tok.T_NAMESPACE) {\n      this.next().expect(this.tok.T_NS_SEPARATOR) && this.next();\n      relative = true;\n    }\n    const names = this.read_list(\n      this.tok.T_STRING,\n      this.tok.T_NS_SEPARATOR,\n      true\n    );\n    if (\n      !relative &&\n      names.length === 1 &&\n      (resolveReference || this.token !== \"(\")\n    ) {\n      if (names[0].toLowerCase() === \"parent\") {\n        return result(\"parentreference\", names[0]);\n      } else if (names[0].toLowerCase() === \"self\") {\n        return result(\"selfreference\", names[0]);\n      }\n    }\n    return result(\"name\", names, relative);\n  },\n  /**\n   * Reads a use statement\n   * ```ebnf\n   * use_statement ::= T_USE\n   *   use_type? use_declarations |\n   *   use_type use_statement '{' use_declarations '}' |\n   *   use_statement '{' use_declarations(=>typed) '}'\n   * ';'\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.importing.php\n   * @return {UseGroup}\n   */\n  read_use_statement: function () {\n    let result = this.node(\"usegroup\");\n    let items = [];\n    let name = null;\n    this.expect(this.tok.T_USE) && this.next();\n    const type = this.read_use_type();\n    items.push(this.read_use_declaration(false));\n    if (this.token === \",\") {\n      items = items.concat(this.next().read_use_declarations(false));\n    } else if (this.token === \"{\") {\n      name = items[0].name;\n      items = this.next().read_use_declarations(type === null);\n      this.expect(\"}\") && this.next();\n    }\n    result = result(name, type, items);\n    this.expect(\";\") && this.next();\n    return result;\n  },\n  /**\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1045\n   */\n  read_class_name_reference: function () {\n    // resolved as the same\n    return this.read_variable(true, false);\n  },\n  /**\n   * Reads a use declaration\n   * ```ebnf\n   * use_declaration ::= use_type? namespace_name use_alias\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem}\n   */\n  read_use_declaration: function (typed) {\n    const result = this.node(\"useitem\");\n    let type = null;\n    if (typed) type = this.read_use_type();\n    const name = this.read_namespace_name();\n    const alias = this.read_use_alias();\n    return result(name.name, alias, type);\n  },\n  /**\n   * Reads a list of use declarations\n   * ```ebnf\n   * use_declarations ::= use_declaration (',' use_declaration)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem[]}\n   */\n  read_use_declarations: function (typed) {\n    const result = [this.read_use_declaration(typed)];\n    while (this.token === \",\") {\n      this.next();\n      if (typed) {\n        if (\n          this.token !== this.tok.T_FUNCTION &&\n          this.token !== this.tok.T_CONST &&\n          this.token !== this.tok.T_STRING\n        ) {\n          break;\n        }\n      } else if (\n        this.token !== this.tok.T_STRING &&\n        this.token !== this.tok.T_NS_SEPARATOR\n      ) {\n        break;\n      }\n      result.push(this.read_use_declaration(typed));\n    }\n    return result;\n  },\n  /**\n   * Reads a use statement\n   * ```ebnf\n   * use_alias ::= (T_AS T_STRING)?\n   * ```\n   * @return {String|null}\n   */\n  read_use_alias: function () {\n    let result = null;\n    if (this.token === this.tok.T_AS) {\n      if (this.next().expect(this.tok.T_STRING)) {\n        const aliasName = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        result = aliasName(name);\n      }\n    }\n    return result;\n  },\n  /**\n   * Reads the namespace type declaration\n   * ```ebnf\n   * use_type ::= (T_FUNCTION | T_CONST)?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L335\n   * @return {String|null} Possible values : function, const\n   */\n  read_use_type: function () {\n    if (this.token === this.tok.T_FUNCTION) {\n      this.next();\n      return this.ast.useitem.TYPE_FUNCTION;\n    } else if (this.token === this.tok.T_CONST) {\n      this.next();\n      return this.ast.useitem.TYPE_CONST;\n    }\n    return null;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nconst specialChar = {\n  \"\\\\\": \"\\\\\",\n  $: \"$\",\n  n: \"\\n\",\n  r: \"\\r\",\n  t: \"\\t\",\n  f: String.fromCharCode(12),\n  v: String.fromCharCode(11),\n  e: String.fromCharCode(27),\n};\n\nvar scalar = {\n  /**\n   * Unescape special chars\n   */\n  resolve_special_chars: function (text, doubleQuote) {\n    if (!doubleQuote) {\n      // single quote fix\n      return text.replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\'/g, \"'\");\n    }\n    return text\n      .replace(/\\\\\"/, '\"')\n      .replace(\n        /\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3}|u{([0-9a-fA-F]+)})/g,\n        ($match, p1, p2) => {\n          if (specialChar[p1]) {\n            return specialChar[p1];\n          } else if (\"x\" === p1[0] || \"X\" === p1[0]) {\n            return String.fromCodePoint(parseInt(p1.substr(1), 16));\n          } else if (\"u\" === p1[0]) {\n            return String.fromCodePoint(parseInt(p2, 16));\n          } else {\n            return String.fromCodePoint(parseInt(p1, 8));\n          }\n        }\n      );\n  },\n\n  /**\n   * Remove all leading spaces each line for heredoc text if there is a indentation\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  remove_heredoc_leading_whitespace_chars: function (\n    text,\n    indentation,\n    indentation_uses_spaces,\n    first_encaps_node\n  ) {\n    if (indentation === 0) {\n      return text;\n    }\n\n    this.check_heredoc_indentation_level(\n      text,\n      indentation,\n      indentation_uses_spaces,\n      first_encaps_node\n    );\n\n    const matchedChar = indentation_uses_spaces ? \" \" : \"\\t\";\n    const removementRegExp = new RegExp(\n      `\\\\n${matchedChar}{${indentation}}`,\n      \"g\"\n    );\n    const removementFirstEncapsNodeRegExp = new RegExp(\n      `^${matchedChar}{${indentation}}`\n    );\n\n    // Rough replace, need more check\n    if (first_encaps_node) {\n      // Remove text leading whitespace\n      text = text.replace(removementFirstEncapsNodeRegExp, \"\");\n    }\n\n    // Remove leading whitespace after \\n\n    return text.replace(removementRegExp, \"\\n\");\n  },\n\n  /**\n   * Check indentation level of heredoc in text, if mismatch, raiseError\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  check_heredoc_indentation_level: function (\n    text,\n    indentation,\n    indentation_uses_spaces,\n    first_encaps_node\n  ) {\n    const textSize = text.length;\n    let offset = 0;\n    let leadingWhitespaceCharCount = 0;\n    /**\n     * @var inCoutingState {boolean} reset to true after a new line\n     */\n    let inCoutingState = true;\n    const chToCheck = indentation_uses_spaces ? \" \" : \"\\t\";\n    let inCheckState = false;\n    if (!first_encaps_node) {\n      // start from first \\n\n      offset = text.indexOf(\"\\n\");\n      // if no \\n, just return\n      if (offset === -1) {\n        return;\n      }\n      offset++;\n    }\n    while (offset < textSize) {\n      if (inCoutingState) {\n        if (text[offset] === chToCheck) {\n          leadingWhitespaceCharCount++;\n        } else {\n          inCheckState = true;\n        }\n      } else {\n        inCoutingState = false;\n      }\n\n      if (\n        text[offset] !== \"\\n\" &&\n        inCheckState &&\n        leadingWhitespaceCharCount < indentation\n      ) {\n        this.raiseError(\n          `Invalid body indentation level (expecting an indentation at least ${indentation})`\n        );\n      } else {\n        inCheckState = false;\n      }\n\n      if (text[offset] === \"\\n\") {\n        // Reset counting state\n        inCoutingState = true;\n        leadingWhitespaceCharCount = 0;\n      }\n      offset++;\n    }\n  },\n\n  /**\n   * Reads dereferencable scalar\n   */\n  read_dereferencable_scalar: function () {\n    let result = null;\n\n    switch (this.token) {\n      case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        {\n          let value = this.node(\"string\");\n          const text = this.text();\n          let offset = 0;\n          if (text[0] === \"b\" || text[0] === \"B\") {\n            offset = 1;\n          }\n          const isDoubleQuote = text[offset] === '\"';\n          this.next();\n          const textValue = this.resolve_special_chars(\n            text.substring(offset + 1, text.length - 1),\n            isDoubleQuote\n          );\n          value = value(\n            isDoubleQuote,\n            textValue,\n            offset === 1, // unicode flag\n            text\n          );\n          if (this.token === this.tok.T_DOUBLE_COLON) {\n            // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1151\n            result = this.read_static_getter(value);\n          } else {\n            // dirrect string\n            result = value;\n          }\n        }\n        break;\n      case this.tok.T_ARRAY: // array parser\n        result = this.read_array();\n        break;\n      case \"[\": // short array format\n        result = this.read_array();\n        break;\n    }\n\n    return result;\n  },\n\n  /**\n   * ```ebnf\n   *  scalar ::= T_MAGIC_CONST\n   *       | T_LNUMBER | T_DNUMBER\n   *       | T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE? T_END_HEREDOC\n   *       | '\"' encaps_list '\"'\n   *       | T_START_HEREDOC encaps_list T_END_HEREDOC\n   *       | namespace_name (T_DOUBLE_COLON T_STRING)?\n   * ```\n   */\n  read_scalar: function () {\n    if (this.is(\"T_MAGIC_CONST\")) {\n      return this.get_magic_constant();\n    } else {\n      let value, node;\n      switch (this.token) {\n        // NUMERIC\n        case this.tok.T_LNUMBER: // long\n        case this.tok.T_DNUMBER: {\n          // double\n          const result = this.node(\"number\");\n          value = this.text();\n          this.next();\n          return result(value, null);\n        }\n        case this.tok.T_START_HEREDOC:\n          if (this.lexer.curCondition === \"ST_NOWDOC\") {\n            const start = this.lexer.yylloc.first_offset;\n            node = this.node(\"nowdoc\");\n            value = this.next().text();\n            // strip the last line return char\n            if (this.lexer.heredoc_label.indentation > 0) {\n              value = value.substring(\n                0,\n                value.length - this.lexer.heredoc_label.indentation\n              );\n            }\n            const lastCh = value[value.length - 1];\n            if (lastCh === \"\\n\") {\n              if (value[value.length - 2] === \"\\r\") {\n                // windows style\n                value = value.substring(0, value.length - 2);\n              } else {\n                // linux style\n                value = value.substring(0, value.length - 1);\n              }\n            } else if (lastCh === \"\\r\") {\n              // mac style\n              value = value.substring(0, value.length - 1);\n            }\n            this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE) && this.next();\n            this.expect(this.tok.T_END_HEREDOC) && this.next();\n            const raw = this.lexer._input.substring(\n              start,\n              this.lexer.yylloc.first_offset\n            );\n            node = node(\n              this.remove_heredoc_leading_whitespace_chars(\n                value,\n                this.lexer.heredoc_label.indentation,\n                this.lexer.heredoc_label.indentation_uses_spaces,\n                this.lexer.heredoc_label.first_encaps_node\n              ),\n              raw,\n              this.lexer.heredoc_label.label\n            );\n            return node;\n          } else {\n            return this.read_encapsed_string(this.tok.T_END_HEREDOC);\n          }\n\n        case '\"':\n          return this.read_encapsed_string('\"');\n\n        case 'b\"':\n        case 'B\"': {\n          return this.read_encapsed_string('\"', true);\n        }\n\n        // TEXTS\n        case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        case this.tok.T_ARRAY: // array parser\n        case \"[\": // short array format\n          return this.read_dereferencable_scalar();\n        default: {\n          const err = this.error(\"SCALAR\");\n          // graceful mode : ignore token & return error node\n          this.next();\n          return err;\n        }\n      }\n    }\n  },\n  /**\n   * Handles the dereferencing\n   */\n  read_dereferencable: function (expr) {\n    let result, offset;\n    const node = this.node(\"offsetlookup\");\n    if (this.token === \"[\") {\n      offset = this.next().read_expr();\n      if (this.expect(\"]\")) this.next();\n      result = node(expr, offset);\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      offset = this.read_encapsed_string_item(false);\n      result = node(expr, offset);\n    }\n    return result;\n  },\n  /**\n   * Reads and extracts an encapsed item\n   * ```ebnf\n   * encapsed_string_item ::= T_ENCAPSED_AND_WHITESPACE\n   *  | T_DOLLAR_OPEN_CURLY_BRACES expr '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'\n   *  | T_CURLY_OPEN variable '}'\n   *  | variable\n   *  | variable '[' expr ']'\n   *  | variable T_OBJECT_OPERATOR T_STRING\n   * ```\n   * @return {String|Variable|Expr|Lookup}\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1219\n   */\n  read_encapsed_string_item: function (isDoubleQuote) {\n    const encapsedPart = this.node(\"encapsedpart\");\n    let syntax = null;\n    let curly = false;\n    let result = this.node(),\n      offset,\n      node,\n      name;\n\n    // plain text\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1222\n    if (this.token === this.tok.T_ENCAPSED_AND_WHITESPACE) {\n      const text = this.text();\n      this.next();\n\n      // if this.lexer.heredoc_label.first_encaps_node -> remove first indents\n      result = result(\n        \"string\",\n        false,\n        this.version >= 703 && !this.lexer.heredoc_label.finished\n          ? this.remove_heredoc_leading_whitespace_chars(\n              this.resolve_special_chars(text, isDoubleQuote),\n              this.lexer.heredoc_label.indentation,\n              this.lexer.heredoc_label.indentation_uses_spaces,\n              this.lexer.heredoc_label.first_encaps_node\n            )\n          : text,\n        false,\n        text\n      );\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      syntax = \"simple\";\n      curly = true;\n      // dynamic variable name\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1239\n      name = null;\n      if (this.next().token === this.tok.T_STRING_VARNAME) {\n        name = this.node(\"variable\");\n        const varName = this.text();\n        this.next();\n        // check if lookup an offset\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1243\n        if (this.token === \"[\") {\n          name = name(varName, false);\n          node = this.node(\"offsetlookup\");\n          offset = this.next().read_expr();\n          this.expect(\"]\") && this.next();\n          result = node(name, offset);\n        } else {\n          result = name(varName, false);\n        }\n      } else {\n        result = result(\"variable\", this.read_expr(), false);\n      }\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_CURLY_OPEN) {\n      // expression\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1246\n      syntax = \"complex\";\n      result.destroy();\n      result = this.next().read_variable(false, false);\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_VARIABLE) {\n      syntax = \"simple\";\n      // plain variable\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1231\n      result.destroy();\n      result = this.read_simple_variable();\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1233\n      if (this.token === \"[\") {\n        node = this.node(\"offsetlookup\");\n        offset = this.next().read_encaps_var_offset();\n        this.expect(\"]\") && this.next();\n        result = node(result, offset);\n      }\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1236\n      if (this.token === this.tok.T_OBJECT_OPERATOR) {\n        node = this.node(\"propertylookup\");\n        this.next().expect(this.tok.T_STRING);\n        const what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        result = node(result, what(name));\n      }\n\n      // error / fallback\n    } else {\n      this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE);\n      const value = this.text();\n      this.next();\n      // consider it as string\n      result.destroy();\n      result = result(\"string\", false, value, false, value);\n    }\n\n    // reset first_encaps_node to false after access any node\n    this.lexer.heredoc_label.first_encaps_node = false;\n    return encapsedPart(result, syntax, curly);\n  },\n  /**\n   * Reads an encapsed string\n   */\n  read_encapsed_string: function (expect, isBinary = false) {\n    const labelStart = this.lexer.yylloc.first_offset;\n    let node = this.node(\"encapsed\");\n    this.next();\n    const start = this.lexer.yylloc.prev_offset - (isBinary ? 1 : 0);\n    const value = [];\n    let type = null;\n\n    if (expect === \"`\") {\n      type = this.ast.encapsed.TYPE_SHELL;\n    } else if (expect === '\"') {\n      type = this.ast.encapsed.TYPE_STRING;\n    } else {\n      type = this.ast.encapsed.TYPE_HEREDOC;\n    }\n\n    // reading encapsed parts\n    while (this.token !== expect && this.token !== this.EOF) {\n      value.push(this.read_encapsed_string_item(true));\n    }\n    if (\n      value.length > 0 &&\n      value[value.length - 1].kind === \"encapsedpart\" &&\n      value[value.length - 1].expression.kind === \"string\"\n    ) {\n      const node = value[value.length - 1].expression;\n      const lastCh = node.value[node.value.length - 1];\n      if (lastCh === \"\\n\") {\n        if (node.value[node.value.length - 2] === \"\\r\") {\n          // windows style\n          node.value = node.value.substring(0, node.value.length - 2);\n        } else {\n          // linux style\n          node.value = node.value.substring(0, node.value.length - 1);\n        }\n      } else if (lastCh === \"\\r\") {\n        // mac style\n        node.value = node.value.substring(0, node.value.length - 1);\n      }\n    }\n    this.expect(expect) && this.next();\n    const raw = this.lexer._input.substring(\n      type === \"heredoc\" ? labelStart : start - 1,\n      this.lexer.yylloc.first_offset\n    );\n    node = node(value, raw, type);\n\n    if (expect === this.tok.T_END_HEREDOC) {\n      node.label = this.lexer.heredoc_label.label;\n      this.lexer.heredoc_label.finished = true;\n    }\n    return node;\n  },\n  /**\n   * Constant token\n   */\n  get_magic_constant: function () {\n    const result = this.node(\"magic\");\n    const name = this.text();\n    this.next();\n    return result(name.toUpperCase(), name);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar statement = {\n  /**\n   * reading a list of top statements (helper for top_statement*)\n   * ```ebnf\n   *  top_statements ::= top_statement*\n   * ```\n   */\n  read_top_statements: function () {\n    let result = [];\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      const statement = this.read_top_statement();\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n    return result;\n  },\n  /**\n   * reading a top statement\n   * ```ebnf\n   *  top_statement ::=\n   *       namespace | function | class\n   *       | interface | trait\n   *       | use_statements | const_list\n   *       | statement\n   * ```\n   */\n  read_top_statement: function () {\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false);\n      // optional flags\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n      case this.tok.T_USE:\n        return this.read_use_statement();\n      case this.tok.T_CONST: {\n        const result = this.node(\"constantstatement\");\n        const items = this.next().read_const_list();\n        this.expectEndOfStatement();\n        return result(null, items);\n      }\n      case this.tok.T_NAMESPACE:\n        return this.read_namespace();\n      case this.tok.T_HALT_COMPILER: {\n        const result = this.node(\"halt\");\n        if (this.next().expect(\"(\")) this.next();\n        if (this.expect(\")\")) this.next();\n        this.expect(\";\");\n        this.lexer.done = true;\n        return result(this.lexer._input.substring(this.lexer.offset));\n      }\n      default:\n        return this.read_statement();\n    }\n  },\n  /**\n   * reads a list of simple inner statements (helper for inner_statement*)\n   * ```ebnf\n   *  inner_statements ::= inner_statement*\n   * ```\n   */\n  read_inner_statements: function () {\n    let result = [];\n    while (this.token != this.EOF && this.token !== \"}\") {\n      const statement = this.read_inner_statement();\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n    return result;\n  },\n  /**\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   const_list ::= T_CONST T_STRING '=' expr (',' T_STRING '=' expr)* ';'\n   * ```\n   */\n  read_const_list: function () {\n    return this.read_list(\n      function () {\n        this.expect(this.tok.T_STRING);\n        const result = this.node(\"constant\");\n        let constName = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        constName = constName(name);\n        if (this.expect(\"=\")) {\n          return result(constName, this.next().read_expr());\n        } else {\n          // fallback\n          return result(constName, null);\n        }\n      },\n      \",\",\n      false\n    );\n  },\n  /**\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   declare_list ::= IDENTIFIER '=' expr (',' IDENTIFIER '=' expr)*\n   * ```\n   * @retrurn {Array}\n   */\n  read_declare_list: function () {\n    const result = [];\n    while (this.token != this.EOF && this.token !== \")\") {\n      this.expect(this.tok.T_STRING);\n      const directive = this.node(\"declaredirective\");\n      let key = this.node(\"identifier\");\n      const name = this.text();\n      this.next();\n      key = key(name);\n      let value = null;\n      if (this.expect(\"=\")) {\n        value = this.next().read_expr();\n      }\n      result.push(directive(key, value));\n      if (this.token !== \",\") break;\n      this.next();\n    }\n    return result;\n  },\n  /**\n   * reads a simple inner statement\n   * ```ebnf\n   *  inner_statement ::= '{' inner_statements '}' | token\n   * ```\n   */\n  read_inner_statement: function () {\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false);\n      // optional flags\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n      case this.tok.T_HALT_COMPILER: {\n        this.raiseError(\n          \"__HALT_COMPILER() can only be used from the outermost scope\"\n        );\n        // fallback : returns a node but does not stop the parsing\n        let node = this.node(\"halt\");\n        this.next().expect(\"(\") && this.next();\n        this.expect(\")\") && this.next();\n        node = node(this.lexer._input.substring(this.lexer.offset));\n        this.expect(\";\") && this.next();\n        return node;\n      }\n      default:\n        return this.read_statement();\n    }\n  },\n  /**\n   * Reads statements\n   */\n  read_statement: function () {\n    switch (this.token) {\n      case \"{\":\n        return this.read_code_block(false);\n\n      case this.tok.T_IF:\n        return this.read_if();\n\n      case this.tok.T_SWITCH:\n        return this.read_switch();\n\n      case this.tok.T_FOR:\n        return this.read_for();\n\n      case this.tok.T_FOREACH:\n        return this.read_foreach();\n\n      case this.tok.T_WHILE:\n        return this.read_while();\n\n      case this.tok.T_DO:\n        return this.read_do();\n\n      case this.tok.T_COMMENT:\n        return this.read_comment();\n\n      case this.tok.T_DOC_COMMENT:\n        return this.read_doc_comment();\n\n      case this.tok.T_RETURN: {\n        const result = this.node(\"return\");\n        this.next();\n        const expr = this.read_optional_expr(\";\");\n        this.expectEndOfStatement();\n        return result(expr);\n      }\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L429\n      case this.tok.T_BREAK:\n      case this.tok.T_CONTINUE: {\n        const result = this.node(\n          this.token === this.tok.T_CONTINUE ? \"continue\" : \"break\"\n        );\n        this.next();\n        const level = this.read_optional_expr(\";\");\n        this.expectEndOfStatement();\n        return result(level);\n      }\n\n      case this.tok.T_GLOBAL: {\n        const result = this.node(\"global\");\n        const items = this.next().read_list(this.read_simple_variable, \",\");\n        this.expectEndOfStatement();\n        return result(items);\n      }\n\n      case this.tok.T_STATIC: {\n        const current = [this.token, this.lexer.getState()];\n        const result = this.node();\n        if (this.next().token === this.tok.T_DOUBLE_COLON) {\n          // static keyword for a class\n          this.lexer.tokens.push(current);\n          const expr = this.next().read_expr();\n          this.expectEndOfStatement(expr);\n          return result(\"expressionstatement\", expr);\n        }\n        if (this.token === this.tok.T_FUNCTION) {\n          return this.read_function(true, [0, 1, 0]);\n        }\n        const items = this.read_variable_declarations();\n        this.expectEndOfStatement();\n        return result(\"static\", items);\n      }\n\n      case this.tok.T_ECHO: {\n        const result = this.node(\"echo\");\n        const text = this.text();\n        const shortForm = text === \"<?=\" || text === \"<%=\";\n        const expressions = this.next().read_function_list(this.read_expr, \",\");\n        this.expectEndOfStatement();\n        return result(expressions, shortForm);\n      }\n\n      case this.tok.T_INLINE_HTML: {\n        const value = this.text();\n        let prevChar =\n          this.lexer.yylloc.first_offset > 0\n            ? this.lexer._input[this.lexer.yylloc.first_offset - 1]\n            : null;\n        const fixFirstLine = prevChar === \"\\r\" || prevChar === \"\\n\";\n        // revert back the first stripped line\n        if (fixFirstLine) {\n          if (\n            prevChar === \"\\n\" &&\n            this.lexer.yylloc.first_offset > 1 &&\n            this.lexer._input[this.lexer.yylloc.first_offset - 2] === \"\\r\"\n          ) {\n            prevChar = \"\\r\\n\";\n          }\n        }\n        const result = this.node(\"inline\");\n        this.next();\n        return result(value, fixFirstLine ? prevChar + value : value);\n      }\n\n      case this.tok.T_UNSET: {\n        const result = this.node(\"unset\");\n        this.next().expect(\"(\") && this.next();\n        const variables = this.read_function_list(this.read_variable, \",\");\n        this.expect(\")\") && this.next();\n        this.expect(\";\") && this.next();\n        return result(variables);\n      }\n\n      case this.tok.T_DECLARE: {\n        const result = this.node(\"declare\");\n        const body = [];\n        let mode;\n        this.next().expect(\"(\") && this.next();\n        const directives = this.read_declare_list();\n        this.expect(\")\") && this.next();\n        if (this.token === \":\") {\n          this.next();\n          while (\n            this.token != this.EOF &&\n            this.token !== this.tok.T_ENDDECLARE\n          ) {\n            // @todo : check declare_statement from php / not valid\n            body.push(this.read_top_statement());\n          }\n          if (\n            body.length === 0 &&\n            this.extractDoc &&\n            this._docs.length > this._docIndex\n          ) {\n            body.push(this.node(\"noop\")());\n          }\n          this.expect(this.tok.T_ENDDECLARE) && this.next();\n          this.expectEndOfStatement();\n          mode = this.ast.declare.MODE_SHORT;\n        } else if (this.token === \"{\") {\n          this.next();\n          while (this.token != this.EOF && this.token !== \"}\") {\n            // @todo : check declare_statement from php / not valid\n            body.push(this.read_top_statement());\n          }\n          if (\n            body.length === 0 &&\n            this.extractDoc &&\n            this._docs.length > this._docIndex\n          ) {\n            body.push(this.node(\"noop\")());\n          }\n          this.expect(\"}\") && this.next();\n          mode = this.ast.declare.MODE_BLOCK;\n        } else {\n          this.expect(\";\") && this.next();\n          mode = this.ast.declare.MODE_NONE;\n        }\n        return result(directives, body, mode);\n      }\n\n      case this.tok.T_TRY:\n        return this.read_try();\n\n      case this.tok.T_THROW: {\n        const result = this.node(\"throw\");\n        const expr = this.next().read_expr();\n        this.expectEndOfStatement();\n        return result(expr);\n      }\n\n      // ignore this (extra ponctuation)\n      case \";\": {\n        this.next();\n        return null;\n      }\n\n      case this.tok.T_STRING: {\n        const result = this.node();\n        const current = [this.token, this.lexer.getState()];\n        const labelNameText = this.text();\n        let labelName = this.node(\"identifier\");\n        // AST : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L457\n        if (this.next().token === \":\") {\n          labelName = labelName(labelNameText);\n          this.next();\n          return result(\"label\", labelName);\n        } else {\n          labelName.destroy();\n        }\n\n        // default fallback expr / T_STRING '::' (etc...)\n        result.destroy();\n        this.lexer.tokens.push(current);\n        const statement = this.node(\"expressionstatement\");\n        const expr = this.next().read_expr();\n        this.expectEndOfStatement(expr);\n        return statement(expr);\n      }\n\n      case this.tok.T_GOTO: {\n        const result = this.node(\"goto\");\n        let labelName = null;\n        if (this.next().expect(this.tok.T_STRING)) {\n          labelName = this.node(\"identifier\");\n          const name = this.text();\n          this.next();\n          labelName = labelName(name);\n          this.expectEndOfStatement();\n        }\n        return result(labelName);\n      }\n\n      default: {\n        // default fallback expr\n        const statement = this.node(\"expressionstatement\");\n        const expr = this.read_expr();\n        this.expectEndOfStatement(expr);\n        return statement(expr);\n      }\n    }\n  },\n  /**\n   * ```ebnf\n   *  code_block ::= '{' (inner_statements | top_statements) '}'\n   * ```\n   */\n  read_code_block: function (top) {\n    const result = this.node(\"block\");\n    this.expect(\"{\") && this.next();\n    const body = top\n      ? this.read_top_statements()\n      : this.read_inner_statements();\n    if (\n      body.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      body.push(this.node(\"noop\")());\n    }\n    this.expect(\"}\") && this.next();\n    return result(null, body);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _switch = {\n  /**\n   * Reads a switch statement\n   * ```ebnf\n   *  switch ::= T_SWITCH '(' expr ')' switch_case_list\n   * ```\n   * @return {Switch}\n   * @see http://php.net/manual/en/control-structures.switch.php\n   */\n  read_switch: function () {\n    const result = this.node(\"switch\");\n    this.expect(this.tok.T_SWITCH) && this.next();\n    this.expect(\"(\") && this.next();\n    const test = this.read_expr();\n    this.expect(\")\") && this.next();\n    const shortForm = this.token === \":\";\n    const body = this.read_switch_case_list();\n    return result(test, body, shortForm);\n  },\n  /**\n   * ```ebnf\n   *  switch_case_list ::= '{' ';'? case_list* '}' | ':' ';'? case_list* T_ENDSWITCH ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L566\n   */\n  read_switch_case_list: function () {\n    // DETECT SWITCH MODE\n    let expect = null;\n    const result = this.node(\"block\");\n    const items = [];\n    if (this.token === \"{\") {\n      expect = \"}\";\n    } else if (this.token === \":\") {\n      expect = this.tok.T_ENDSWITCH;\n    } else {\n      this.expect([\"{\", \":\"]);\n    }\n    this.next();\n    // OPTIONNAL ';'\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L570\n    if (this.token === \";\") {\n      this.next();\n    }\n    // EXTRACTING CASES\n    while (this.token !== this.EOF && this.token !== expect) {\n      items.push(this.read_case_list(expect));\n    }\n    if (\n      items.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      items.push(this.node(\"noop\")());\n    }\n    // CHECK END TOKEN\n    this.expect(expect) && this.next();\n    if (expect === this.tok.T_ENDSWITCH) {\n      this.expectEndOfStatement();\n    }\n    return result(null, items);\n  },\n  /**\n   * ```ebnf\n   *   case_list ::= ((T_CASE expr) | T_DEFAULT) (':' | ';') inner_statement*\n   * ```\n   */\n  read_case_list: function (stopToken) {\n    const result = this.node(\"case\");\n    let test = null;\n    if (this.token === this.tok.T_CASE) {\n      test = this.next().read_expr();\n    } else if (this.token === this.tok.T_DEFAULT) {\n      // the default entry - no condition\n      this.next();\n    } else {\n      this.expect([this.tok.T_CASE, this.tok.T_DEFAULT]);\n    }\n    // case_separator\n    this.expect([\":\", \";\"]) && this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (\n      this.token !== this.EOF &&\n      this.token !== stopToken &&\n      this.token !== this.tok.T_CASE &&\n      this.token !== this.tok.T_DEFAULT\n    ) {\n      items.push(this.read_inner_statement());\n    }\n    return result(test, body(null, items));\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _try = {\n  /**\n   * ```ebnf\n   *  try ::= T_TRY '{' inner_statement* '}'\n   *          (\n   *              T_CATCH '(' namespace_name variable ')' '{'  inner_statement* '}'\n   *          )*\n   *          (T_FINALLY '{' inner_statement* '}')?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L448\n   * @return {Try}\n   */\n  read_try: function () {\n    this.expect(this.tok.T_TRY);\n    const result = this.node(\"try\");\n    let always = null;\n    const catches = [];\n    const body = this.next().read_statement();\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L455\n    while (this.token === this.tok.T_CATCH) {\n      const item = this.node(\"catch\");\n      this.next().expect(\"(\") && this.next();\n      const what = this.read_list(this.read_namespace_name, \"|\", false);\n      const variable = this.read_variable(true, false);\n      this.expect(\")\");\n      catches.push(item(this.next().read_statement(), what, variable));\n    }\n    if (this.token === this.tok.T_FINALLY) {\n      always = this.next().read_statement();\n    }\n    return result(body, catches, always);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar utils$1 = {\n  /**\n   * Reads a short form of tokens\n   * @param {Number} token - The ending token\n   * @return {Block}\n   */\n  read_short_form: function (token) {\n    const body = this.node(\"block\");\n    const items = [];\n    if (this.expect(\":\")) this.next();\n    while (this.token != this.EOF && this.token !== token) {\n      items.push(this.read_inner_statement());\n    }\n    if (\n      items.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      items.push(this.node(\"noop\")());\n    }\n    if (this.expect(token)) this.next();\n    this.expectEndOfStatement();\n    return body(null, items);\n  },\n\n  /**\n   * https://wiki.php.net/rfc/trailing-comma-function-calls\n   * @param {*} item\n   * @param {*} separator\n   */\n  read_function_list: function (item, separator) {\n    const result = [];\n    do {\n      if (this.token == separator && this.version >= 703 && result.length > 0) {\n        result.push(this.node(\"noop\")());\n        break;\n      }\n      result.push(item.apply(this, []));\n      if (this.token != separator) {\n        break;\n      }\n      if (this.next().token == \")\" && this.version >= 703) {\n        break;\n      }\n    } while (this.token != this.EOF);\n    return result;\n  },\n\n  /**\n   * Helper : reads a list of tokens / sample : T_STRING ',' T_STRING ...\n   * ```ebnf\n   * list ::= separator? ( item separator )* item\n   * ```\n   */\n  read_list: function (item, separator, preserveFirstSeparator) {\n    const result = [];\n\n    if (this.token == separator) {\n      if (preserveFirstSeparator) {\n        result.push(typeof item === \"function\" ? this.node(\"noop\")() : null);\n      }\n      this.next();\n    }\n\n    if (typeof item === \"function\") {\n      do {\n        const itemResult = item.apply(this, []);\n        if (itemResult) {\n          result.push(itemResult);\n        }\n        if (this.token != separator) {\n          break;\n        }\n      } while (this.next().token != this.EOF);\n    } else {\n      if (this.expect(item)) {\n        result.push(this.text());\n      } else {\n        return [];\n      }\n      while (this.next().token != this.EOF) {\n        if (this.token != separator) break;\n        // trim current separator & check item\n        if (this.next().token != item) break;\n        result.push(this.text());\n      }\n    }\n    return result;\n  },\n\n  /**\n   * Reads a list of names separated by a comma\n   *\n   * ```ebnf\n   * name_list ::= namespace (',' namespace)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php class foo extends bar, baz { }\n   * ```\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L726\n   * @return {Reference[]}\n   */\n  read_name_list: function () {\n    return this.read_list(this.read_namespace_name, \",\", false);\n  },\n\n  /**\n   * Reads the byref token and assign it to the specified node\n   * @param {*} cb\n   */\n  read_byref: function (cb) {\n    let byref = this.node(\"byref\");\n    this.next();\n    byref = byref(null);\n    const result = cb();\n    if (result) {\n      this.ast.swapLocations(result, byref, result, this);\n      result.byref = true;\n    }\n    return result;\n  },\n\n  /**\n   * Reads a list of variables declarations\n   *\n   * ```ebnf\n   * variable_declaration ::= T_VARIABLE ('=' expr)?*\n   * variable_declarations ::= variable_declaration (',' variable_declaration)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php static $a = 'hello', $b = 'world';\n   * ```\n   * @return {StaticVariable[]} Returns an array composed by a list of variables, or\n   * assign values\n   */\n  read_variable_declarations: function () {\n    return this.read_list(function () {\n      const node = this.node(\"staticvariable\");\n      let variable = this.node(\"variable\");\n      // plain variable name\n      if (this.expect(this.tok.T_VARIABLE)) {\n        const name = this.text().substring(1);\n        this.next();\n        variable = variable(name, false);\n      } else {\n        variable = variable(\"#ERR\", false);\n      }\n      if (this.token === \"=\") {\n        return node(variable, this.next().read_expr());\n      } else {\n        return variable;\n      }\n    }, \",\");\n  },\n\n  /*\n   * Reads class extends\n   */\n  read_extends_from: function () {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_namespace_name();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads interface extends list\n   */\n  read_interface_extends_list: function () {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads implements list\n   */\n  read_implements_list: function () {\n    if (this.token === this.tok.T_IMPLEMENTS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar variable = {\n  /**\n   * Reads a variable\n   *\n   * ```ebnf\n   *   variable ::= &? ...complex @todo\n   * ```\n   *\n   * Some samples of parsed code :\n   * ```php\n   *  &$var                      // simple var\n   *  $var                      // simple var\n   *  classname::CONST_NAME     // dynamic class name with const retrieval\n   *  foo()                     // function call\n   *  $var->func()->property    // chained calls\n   * ```\n   */\n  read_variable: function (read_only, encapsed) {\n    let result;\n\n    // check the byref flag\n    if (this.token === \"&\") {\n      return this.read_byref(\n        this.read_variable.bind(this, read_only, encapsed)\n      );\n    }\n\n    // reads the entry point\n    if (this.is([this.tok.T_VARIABLE, \"$\"])) {\n      result = this.read_reference_variable(encapsed);\n    } else if (\n      this.is([\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        this.tok.T_NAMESPACE,\n      ])\n    ) {\n      result = this.node();\n      const name = this.read_namespace_name();\n      if (\n        this.token != this.tok.T_DOUBLE_COLON &&\n        this.token != \"(\" &&\n        [\"parentreference\", \"selfreference\"].indexOf(name.kind) === -1\n      ) {\n        // @see parser.js line 130 : resolves a conflict with scalar\n        const literal = name.name.toLowerCase();\n        if (literal === \"true\") {\n          result = name.destroy(result(\"boolean\", true, name.name));\n        } else if (literal === \"false\") {\n          result = name.destroy(result(\"boolean\", false, name.name));\n        } else if (literal === \"null\") {\n          result = name.destroy(result(\"nullkeyword\", name.name));\n        } else {\n          result.destroy(name);\n          result = name;\n        }\n      } else {\n        // @fixme possible #193 bug\n        result.destroy(name);\n        result = name;\n      }\n    } else if (this.token === this.tok.T_STATIC) {\n      result = this.node(\"staticreference\");\n      const raw = this.text();\n      this.next();\n      result = result(raw);\n    } else {\n      this.expect(\"VARIABLE\");\n    }\n\n    // static mode\n    if (this.token === this.tok.T_DOUBLE_COLON) {\n      result = this.read_static_getter(result, encapsed);\n    }\n\n    return this.recursive_variable_chain_scan(result, read_only, encapsed);\n  },\n\n  // resolves a static call\n  read_static_getter: function (what, encapsed) {\n    const result = this.node(\"staticlookup\");\n    let offset, name;\n    if (this.next().is([this.tok.T_VARIABLE, \"$\"])) {\n      offset = this.read_reference_variable(encapsed);\n    } else if (\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_CLASS ||\n      (this.version >= 700 && this.is(\"IDENTIFIER\"))\n    ) {\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    } else if (this.token === \"{\") {\n      offset = this.node(\"literal\");\n      name = this.next().read_expr();\n      this.expect(\"}\") && this.next();\n      offset = offset(\"literal\", name, null);\n      this.expect(\"(\");\n    } else {\n      this.error([this.tok.T_VARIABLE, this.tok.T_STRING]);\n      // graceful mode : set getter as error node and continue\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    }\n    return result(what, offset);\n  },\n\n  read_what: function (is_static_lookup = false) {\n    let what = null;\n    let name = null;\n    switch (this.next().token) {\n      case this.tok.T_STRING:\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n\n        if (is_static_lookup && this.token === this.tok.T_OBJECT_OPERATOR) {\n          this.error();\n        }\n        break;\n      case this.tok.T_VARIABLE:\n        what = this.node(\"variable\");\n        name = this.text().substring(1);\n        this.next();\n        what = what(name, false);\n        break;\n      case \"$\":\n        what = this.node();\n        this.next().expect([\"$\", \"{\", this.tok.T_VARIABLE]);\n        if (this.token === \"{\") {\n          // $obj->${$varname}\n          name = this.next().read_expr();\n          this.expect(\"}\") && this.next();\n          what = what(\"variable\", name, true);\n        } else {\n          // $obj->$$varname\n          name = this.read_expr();\n          what = what(\"variable\", name, false);\n        }\n        break;\n      case \"{\":\n        what = this.node(\"encapsedpart\");\n        name = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        what = what(name, \"complex\", false);\n        break;\n      default:\n        this.error([this.tok.T_STRING, this.tok.T_VARIABLE, \"$\", \"{\"]);\n        // graceful mode : set what as error mode & continue\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n        break;\n    }\n\n    return what;\n  },\n\n  recursive_variable_chain_scan: function (result, read_only, encapsed) {\n    let node, offset;\n    recursive_scan_loop: while (this.token != this.EOF) {\n      switch (this.token) {\n        case \"(\":\n          if (read_only) {\n            // @fixme : add more informations & test\n            return result;\n          } else {\n            result = this.node(\"call\")(result, this.read_argument_list());\n          }\n          break;\n        case \"[\":\n        case \"{\": {\n          const backet = this.token;\n          const isSquareBracket = backet === \"[\";\n          node = this.node(\"offsetlookup\");\n          this.next();\n          offset = false;\n          if (encapsed) {\n            offset = this.read_encaps_var_offset();\n            this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n          } else {\n            const isCallableVariable = isSquareBracket\n              ? this.token !== \"]\"\n              : this.token !== \"}\";\n            // callable_variable : https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1122\n            if (isCallableVariable) {\n              offset = this.read_expr();\n              this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n            } else {\n              this.next();\n            }\n          }\n          result = node(result, offset);\n          break;\n        }\n        case this.tok.T_DOUBLE_COLON:\n          // @see https://github.com/glayzzle/php-parser/issues/107#issuecomment-354104574\n          if (\n            result.kind === \"staticlookup\" &&\n            result.offset.kind === \"identifier\"\n          ) {\n            this.error();\n          }\n\n          node = this.node(\"staticlookup\");\n          result = node(result, this.read_what(true));\n\n          // fix 185\n          // static lookup dereferencables are limited to staticlookup over functions\n          /*if (dereferencable && this.token !== \"(\") {\n            this.error(\"(\");\n          }*/\n          break;\n        case this.tok.T_OBJECT_OPERATOR: {\n          node = this.node(\"propertylookup\");\n          result = node(result, this.read_what());\n          break;\n        }\n        default:\n          break recursive_scan_loop;\n      }\n    }\n    return result;\n  },\n  /**\n   * https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1231\n   */\n  read_encaps_var_offset: function () {\n    let offset = this.node();\n    if (this.token === this.tok.T_STRING) {\n      const text = this.text();\n      this.next();\n      offset = offset(\"identifier\", text);\n    } else if (this.token === this.tok.T_NUM_STRING) {\n      const num = this.text();\n      this.next();\n      offset = offset(\"number\", num, null);\n    } else if (this.token === \"-\") {\n      this.next();\n      const num = -1 * this.text();\n      this.expect(this.tok.T_NUM_STRING) && this.next();\n      offset = offset(\"number\", num, null);\n    } else if (this.token === this.tok.T_VARIABLE) {\n      const name = this.text().substring(1);\n      this.next();\n      offset = offset(\"variable\", name, false);\n    } else {\n      this.expect([\n        this.tok.T_STRING,\n        this.tok.T_NUM_STRING,\n        \"-\",\n        this.tok.T_VARIABLE,\n      ]);\n      // fallback : consider as identifier\n      const text = this.text();\n      this.next();\n      offset = offset(\"identifier\", text);\n    }\n    return offset;\n  },\n  /**\n   * ```ebnf\n   *  reference_variable ::=  simple_variable ('[' OFFSET ']')* | '{' EXPR '}'\n   * ```\n   * <code>\n   *  $foo[123];      // foo is an array ==> gets its entry\n   *  $foo{1};        // foo is a string ==> get the 2nd char offset\n   *  ${'foo'}[123];  // get the dynamic var $foo\n   *  $foo[123]{1};   // gets the 2nd char from the 123 array entry\n   * </code>\n   */\n  read_reference_variable: function (encapsed) {\n    let result = this.read_simple_variable();\n    let offset;\n    while (this.token != this.EOF) {\n      const node = this.node();\n      if (this.token == \"{\" && !encapsed) {\n        // @fixme check coverage, not sure thats working\n        offset = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        result = node(\"offsetlookup\", result, offset);\n      } else {\n        node.destroy();\n        break;\n      }\n    }\n    return result;\n  },\n  /**\n   * ```ebnf\n   *  simple_variable ::= T_VARIABLE | '$' '{' expr '}' | '$' simple_variable\n   * ```\n   */\n  read_simple_variable: function () {\n    let result = this.node(\"variable\");\n    let name;\n    if (\n      this.expect([this.tok.T_VARIABLE, \"$\"]) &&\n      this.token === this.tok.T_VARIABLE\n    ) {\n      // plain variable name\n      name = this.text().substring(1);\n      this.next();\n      result = result(name, false);\n    } else {\n      if (this.token === \"$\") this.next();\n      // dynamic variable name\n      switch (this.token) {\n        case \"{\": {\n          const expr = this.next().read_expr();\n          this.expect(\"}\") && this.next();\n          result = result(expr, true);\n          break;\n        }\n        case \"$\": // $$$var\n          result = result(this.read_simple_variable(), false);\n          break;\n        case this.tok.T_VARIABLE: {\n          // $$var\n          name = this.text().substring(1);\n          const node = this.node(\"variable\");\n          this.next();\n          result = result(node(name, false), false);\n          break;\n        }\n        default:\n          this.error([\"{\", \"$\", this.tok.T_VARIABLE]);\n          // graceful mode\n          name = this.text();\n          this.next();\n          result = result(name, false);\n      }\n    }\n    return result;\n  },\n};\n\n/**\n * @private\n */\nfunction isNumber(n) {\n  return n != \".\" && n != \",\" && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * The PHP Parser class that build the AST tree from the lexer\n *\n * @class\n * @tutorial Parser\n * @property {Lexer} lexer - current lexer instance\n * @property {AST} ast - the AST factory instance\n * @property {Integer|String} token - current token\n * @property {Boolean} extractDoc - should extract documentation as AST node\n * @property {Boolean} extractTokens - should extract each token\n * @property {Boolean} suppressErrors - should ignore parsing errors and continue\n * @property {Boolean} debug - should output debug informations\n */\nconst parser = function (lexer, ast) {\n  this.lexer = lexer;\n  this.ast = ast;\n  this.tok = lexer.tok;\n  this.EOF = lexer.EOF;\n  this.token = null;\n  this.prev = null;\n  this.debug = false;\n  this.version = 704;\n  this.extractDoc = false;\n  this.extractTokens = false;\n  this.suppressErrors = false;\n  const mapIt = function (item) {\n    return [item, null];\n  };\n  this.entries = {\n    // reserved_non_modifiers\n    IDENTIFIER: new Map(\n      [\n        this.tok.T_ABSTRACT,\n        this.tok.T_ARRAY,\n        this.tok.T_AS,\n        this.tok.T_BREAK,\n        this.tok.T_CALLABLE,\n        this.tok.T_CASE,\n        this.tok.T_CATCH,\n        this.tok.T_CLASS,\n        this.tok.T_CLASS_C,\n        this.tok.T_CLONE,\n        this.tok.T_CONST,\n        this.tok.T_CONTINUE,\n        this.tok.T_DECLARE,\n        this.tok.T_DEFAULT,\n        this.tok.T_DIR,\n        this.tok.T_DO,\n        this.tok.T_ECHO,\n        this.tok.T_ELSE,\n        this.tok.T_ELSEIF,\n        this.tok.T_EMPTY,\n        this.tok.T_ENDDECLARE,\n        this.tok.T_ENDFOR,\n        this.tok.T_ENDFOREACH,\n        this.tok.T_ENDIF,\n        this.tok.T_ENDSWITCH,\n        this.tok.T_ENDWHILE,\n        this.tok.T_EVAL,\n        this.tok.T_EXIT,\n        this.tok.T_EXTENDS,\n        this.tok.T_FILE,\n        this.tok.T_FINAL,\n        this.tok.T_FINALLY,\n        this.tok.T_FN,\n        this.tok.T_FOR,\n        this.tok.T_FOREACH,\n        this.tok.T_FUNC_C,\n        this.tok.T_FUNCTION,\n        this.tok.T_GLOBAL,\n        this.tok.T_GOTO,\n        this.tok.T_IF,\n        this.tok.T_IMPLEMENTS,\n        this.tok.T_INCLUDE,\n        this.tok.T_INCLUDE_ONCE,\n        this.tok.T_INSTANCEOF,\n        this.tok.T_INSTEADOF,\n        this.tok.T_INTERFACE,\n        this.tok.T_ISSET,\n        this.tok.T_LINE,\n        this.tok.T_LIST,\n        this.tok.T_LOGICAL_AND,\n        this.tok.T_LOGICAL_OR,\n        this.tok.T_LOGICAL_XOR,\n        this.tok.T_METHOD_C,\n        this.tok.T_NAMESPACE,\n        this.tok.T_NEW,\n        this.tok.T_NS_C,\n        this.tok.T_PRINT,\n        this.tok.T_PRIVATE,\n        this.tok.T_PROTECTED,\n        this.tok.T_PUBLIC,\n        this.tok.T_REQUIRE,\n        this.tok.T_REQUIRE_ONCE,\n        this.tok.T_RETURN,\n        this.tok.T_STATIC,\n        this.tok.T_SWITCH,\n        this.tok.T_THROW,\n        this.tok.T_TRAIT,\n        this.tok.T_TRY,\n        this.tok.T_UNSET,\n        this.tok.T_USE,\n        this.tok.T_VAR,\n        this.tok.T_WHILE,\n        this.tok.T_YIELD,\n      ].map(mapIt)\n    ),\n    VARIABLE: new Map(\n      [\n        this.tok.T_VARIABLE,\n        \"$\",\n        \"&\",\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        this.tok.T_NAMESPACE,\n        this.tok.T_STATIC,\n      ].map(mapIt)\n    ),\n    SCALAR: new Map(\n      [\n        this.tok.T_CONSTANT_ENCAPSED_STRING,\n        this.tok.T_START_HEREDOC,\n        this.tok.T_LNUMBER,\n        this.tok.T_DNUMBER,\n        this.tok.T_ARRAY,\n        \"[\",\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n        '\"',\n        'b\"',\n        'B\"',\n        \"-\",\n        this.tok.T_NS_SEPARATOR,\n      ].map(mapIt)\n    ),\n    T_MAGIC_CONST: new Map(\n      [\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n      ].map(mapIt)\n    ),\n    T_MEMBER_FLAGS: new Map(\n      [\n        this.tok.T_PUBLIC,\n        this.tok.T_PRIVATE,\n        this.tok.T_PROTECTED,\n        this.tok.T_STATIC,\n        this.tok.T_ABSTRACT,\n        this.tok.T_FINAL,\n      ].map(mapIt)\n    ),\n    EOS: new Map([\";\", this.EOF, this.tok.T_INLINE_HTML].map(mapIt)),\n    EXPR: new Map(\n      [\n        \"@\",\n        \"-\",\n        \"+\",\n        \"!\",\n        \"~\",\n        \"(\",\n        \"`\",\n        this.tok.T_LIST,\n        this.tok.T_CLONE,\n        this.tok.T_INC,\n        this.tok.T_DEC,\n        this.tok.T_NEW,\n        this.tok.T_ISSET,\n        this.tok.T_EMPTY,\n        this.tok.T_INCLUDE,\n        this.tok.T_INCLUDE_ONCE,\n        this.tok.T_REQUIRE,\n        this.tok.T_REQUIRE_ONCE,\n        this.tok.T_EVAL,\n        this.tok.T_INT_CAST,\n        this.tok.T_DOUBLE_CAST,\n        this.tok.T_STRING_CAST,\n        this.tok.T_ARRAY_CAST,\n        this.tok.T_OBJECT_CAST,\n        this.tok.T_BOOL_CAST,\n        this.tok.T_UNSET_CAST,\n        this.tok.T_EXIT,\n        this.tok.T_PRINT,\n        this.tok.T_YIELD,\n        this.tok.T_STATIC,\n        this.tok.T_FUNCTION,\n        this.tok.T_FN,\n        // using VARIABLES :\n        this.tok.T_VARIABLE,\n        \"$\",\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        // using SCALAR :\n        this.tok.T_STRING, // @see variable.js line 45 > conflict with variable = shift/reduce :)\n        this.tok.T_CONSTANT_ENCAPSED_STRING,\n        this.tok.T_START_HEREDOC,\n        this.tok.T_LNUMBER,\n        this.tok.T_DNUMBER,\n        this.tok.T_ARRAY,\n        \"[\",\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n        '\"',\n        'b\"',\n        'B\"',\n        \"-\",\n        this.tok.T_NS_SEPARATOR,\n      ].map(mapIt)\n    ),\n  };\n};\n\n/**\n * helper : gets a token name\n */\nparser.prototype.getTokenName = function (token) {\n  if (!isNumber(token)) {\n    return \"'\" + token + \"'\";\n  } else {\n    if (token == this.EOF) return \"the end of file (EOF)\";\n    return this.lexer.engine.tokens.values[token];\n  }\n};\n\n/**\n * main entry point : converts a source code to AST\n */\nparser.prototype.parse = function (code, filename) {\n  this._errors = [];\n  this.filename = filename || \"eval\";\n  this.currentNamespace = [\"\"];\n  if (this.extractDoc) {\n    this._docs = [];\n  } else {\n    this._docs = null;\n  }\n  if (this.extractTokens) {\n    this._tokens = [];\n  } else {\n    this._tokens = null;\n  }\n  this._docIndex = 0;\n  this._lastNode = null;\n  this.lexer.setInput(code);\n  this.lexer.all_tokens = this.extractTokens;\n  this.lexer.comment_tokens = this.extractDoc;\n  this.length = this.lexer._input.length;\n  this.innerList = false;\n  this.innerListForm = false;\n  const program = this.node(\"program\");\n  const childs = [];\n  this.next();\n  while (this.token != this.EOF) {\n    childs.push(this.read_start());\n  }\n  // append last comment\n  if (\n    childs.length === 0 &&\n    this.extractDoc &&\n    this._docs.length > this._docIndex\n  ) {\n    childs.push(this.node(\"noop\")());\n  }\n  // #176 : register latest position\n  this.prev = [\n    this.lexer.yylloc.last_line,\n    this.lexer.yylloc.last_column,\n    this.lexer.offset,\n  ];\n  const result = program(childs, this._errors, this._docs, this._tokens);\n  if (this.debug) {\n    const errors = this.ast.checkNodes();\n    if (errors.length > 0) {\n      errors.forEach(function (error) {\n        if (error.position) {\n          // eslint-disable-next-line no-console\n          console.log(\n            \"Node at line \" +\n              error.position.line +\n              \", column \" +\n              error.position.column\n          );\n        }\n        // eslint-disable-next-line no-console\n        console.log(error.stack.join(\"\\n\"));\n      });\n      throw new Error(\"Some nodes are not closed\");\n    }\n  }\n  return result;\n};\n\n/**\n * Raise an error\n */\nparser.prototype.raiseError = function (message, msgExpect, expect, token) {\n  message += \" on line \" + this.lexer.yylloc.first_line;\n  if (!this.suppressErrors) {\n    const err = new SyntaxError(\n      message,\n      this.filename,\n      this.lexer.yylloc.first_line\n    );\n    err.lineNumber = this.lexer.yylloc.first_line;\n    err.fileName = this.filename;\n    err.columnNumber = this.lexer.yylloc.first_column;\n    throw err;\n  }\n  // Error node :\n  const node = this.ast.prepare(\"error\", null, this)(\n    message,\n    token,\n    this.lexer.yylloc.first_line,\n    expect\n  );\n  this._errors.push(node);\n  return node;\n};\n\n/**\n * handling errors\n */\nparser.prototype.error = function (expect) {\n  let msg = \"Parse Error : syntax error\";\n  let token = this.getTokenName(this.token);\n  let msgExpect = \"\";\n\n  if (this.token !== this.EOF) {\n    if (isNumber(this.token)) {\n      let symbol = this.text();\n      if (symbol.length > 10) {\n        symbol = symbol.substring(0, 7) + \"...\";\n      }\n      token = \"'\" + symbol + \"' (\" + token + \")\";\n    }\n    msg += \", unexpected \" + token;\n  }\n  if (expect && !Array.isArray(expect)) {\n    if (isNumber(expect) || expect.length === 1) {\n      msgExpect = \", expecting \" + this.getTokenName(expect);\n    }\n    msg += msgExpect;\n  }\n  return this.raiseError(msg, msgExpect, expect, token);\n};\n\n/**\n * Creates a new AST node\n */\nparser.prototype.node = function (name) {\n  if (this.extractDoc) {\n    let docs = null;\n    if (this._docIndex < this._docs.length) {\n      docs = this._docs.slice(this._docIndex);\n      this._docIndex = this._docs.length;\n      if (this.debug) {\n        // eslint-disable-next-line no-console\n        console.log(new Error(\"Append docs on \" + name));\n        // eslint-disable-next-line no-console\n        console.log(docs);\n      }\n    }\n    const node = this.ast.prepare(name, docs, this);\n    /**\n     * TOKENS :\n     * node1 commentA token commmentB node2 commentC token commentD node3 commentE token\n     *\n     * AST :\n     * structure:S1 [\n     *    left: node1 ( trail: commentA ),\n     *    right: structure:S2 [\n     *       node2 (lead: commentB, trail: commentC),\n     *       node3 (lead: commentD)\n     *    ],\n     *    trail: commentE\n     * ]\n     *\n     * Algorithm :\n     *\n     * Attach the last comments on parent of current node\n     * If a new node is started and the parent has a trailing comment\n     * the move it on previous node\n     *\n     * start S2\n     * start node1\n     * consume node1 & set commentA as trailingComment on S2\n     * start S2\n     * S1 has a trailingComment, attach it on node1\n     * ...\n     * NOTE : As the trailingComment Behavior depends on AST, it will be build on\n     * the AST layer - last child node will keep it's trailingComment nodes\n     */\n    node.postBuild = function (self) {\n      if (this._docIndex < this._docs.length) {\n        if (this._lastNode) {\n          const offset = this.prev[2];\n          let max = this._docIndex;\n          for (; max < this._docs.length; max++) {\n            if (this._docs[max].offset > offset) {\n              break;\n            }\n          }\n          if (max > this._docIndex) {\n            // inject trailing comment on child node\n            this._lastNode.setTrailingComments(\n              this._docs.slice(this._docIndex, max)\n            );\n            this._docIndex = max;\n          }\n        } else if (this.token === this.EOF) {\n          // end of content\n          self.setTrailingComments(this._docs.slice(this._docIndex));\n          this._docIndex = this._docs.length;\n        }\n      }\n      this._lastNode = self;\n    }.bind(this);\n    return node;\n  }\n  return this.ast.prepare(name, null, this);\n};\n\n/**\n * expects an end of statement or end of file\n * @return {boolean}\n */\nparser.prototype.expectEndOfStatement = function (node) {\n  if (this.token === \";\") {\n    // include only real ';' statements\n    // https://github.com/glayzzle/php-parser/issues/164\n    if (node && this.lexer.yytext === \";\") {\n      node.includeToken(this);\n    }\n  } else if (this.token !== this.tok.T_INLINE_HTML && this.token !== this.EOF) {\n    this.error(\";\");\n    return false;\n  }\n  this.next();\n  return true;\n};\n\n/** outputs some debug information on current token **/\nconst ignoreStack = [\"parser.next\", \"parser.node\", \"parser.showlog\"];\nparser.prototype.showlog = function () {\n  const stack = new Error().stack.split(\"\\n\");\n  let line;\n  for (let offset = 2; offset < stack.length; offset++) {\n    line = stack[offset].trim();\n    let found = false;\n    for (let i = 0; i < ignoreStack.length; i++) {\n      if (line.substring(3, 3 + ignoreStack[i].length) === ignoreStack[i]) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      break;\n    }\n  }\n  // eslint-disable-next-line no-console\n  console.log(\n    \"Line \" +\n      this.lexer.yylloc.first_line +\n      \" : \" +\n      this.getTokenName(this.token) +\n      \">\" +\n      this.lexer.yytext +\n      \"<\" +\n      \" @-->\" +\n      line\n  );\n  return this;\n};\n\n/**\n * Force the parser to check the current token.\n *\n * If the current token does not match to expected token,\n * the an error will be raised.\n *\n * If the suppressError mode is activated, then the error will\n * be added to the program error stack and this function will return `false`.\n *\n * @param {String|Number} token\n * @return {boolean}\n * @throws Error\n */\nparser.prototype.expect = function (token) {\n  if (Array.isArray(token)) {\n    if (token.indexOf(this.token) === -1) {\n      this.error(token);\n      return false;\n    }\n  } else if (this.token != token) {\n    this.error(token);\n    return false;\n  }\n  return true;\n};\n\n/**\n * Returns the current token contents\n * @return {String}\n */\nparser.prototype.text = function () {\n  return this.lexer.yytext;\n};\n\n/** consume the next token **/\nparser.prototype.next = function () {\n  // prepare the back command\n  if (this.token !== \";\" || this.lexer.yytext === \";\") {\n    // ignore '?>' from automated resolution\n    // https://github.com/glayzzle/php-parser/issues/168\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n  }\n\n  // eating the token\n  this.lex();\n\n  // showing the debug\n  if (this.debug) {\n    this.showlog();\n  }\n\n  // handling comments\n  if (this.extractDoc) {\n    while (\n      this.token === this.tok.T_COMMENT ||\n      this.token === this.tok.T_DOC_COMMENT\n    ) {\n      // APPEND COMMENTS\n      if (this.token === this.tok.T_COMMENT) {\n        this._docs.push(this.read_comment());\n      } else {\n        this._docs.push(this.read_doc_comment());\n      }\n    }\n  }\n\n  return this;\n};\n\n/**\n * Eating a token\n */\nparser.prototype.lex = function () {\n  // append on token stack\n  if (this.extractTokens) {\n    do {\n      // the token\n      this.token = this.lexer.lex() || this.EOF;\n      if (this.token === this.EOF) return this;\n      let entry = this.lexer.yytext;\n      if (this.lexer.engine.tokens.values.hasOwnProperty(this.token)) {\n        entry = [\n          this.lexer.engine.tokens.values[this.token],\n          entry,\n          this.lexer.yylloc.first_line,\n          this.lexer.yylloc.first_offset,\n          this.lexer.offset,\n        ];\n      } else {\n        entry = [\n          null,\n          entry,\n          this.lexer.yylloc.first_line,\n          this.lexer.yylloc.first_offset,\n          this.lexer.offset,\n        ];\n      }\n      this._tokens.push(entry);\n      if (this.token === this.tok.T_CLOSE_TAG) {\n        // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n        this.token = \";\";\n        return this;\n      } else if (this.token === this.tok.T_OPEN_TAG_WITH_ECHO) {\n        this.token = this.tok.T_ECHO;\n        return this;\n      }\n    } while (\n      this.token === this.tok.T_WHITESPACE || // ignore white space\n      (!this.extractDoc &&\n        (this.token === this.tok.T_COMMENT || // ignore single lines comments\n          this.token === this.tok.T_DOC_COMMENT)) || // ignore doc comments\n      // ignore open tags\n      this.token === this.tok.T_OPEN_TAG\n    );\n  } else {\n    this.token = this.lexer.lex() || this.EOF;\n  }\n  return this;\n};\n\n/**\n * Check if token is of specified type\n */\nparser.prototype.is = function (type) {\n  if (Array.isArray(type)) {\n    return type.indexOf(this.token) !== -1;\n  }\n  return this.entries[type].has(this.token);\n};\n\n// extends the parser with syntax files\n[\n  array,\n  _class,\n  comment,\n  expr,\n  _function,\n  _if,\n  loops,\n  main,\n  namespace,\n  scalar,\n  statement,\n  _switch,\n  _try,\n  utils$1,\n  variable,\n].forEach(function (ext) {\n  for (const k in ext) {\n    if (parser.prototype.hasOwnProperty(k)) {\n      // @see https://github.com/glayzzle/php-parser/issues/234\n      throw new Error(\"Function \" + k + \" is already defined - collision\");\n    }\n    parser.prototype[k] = ext[k];\n  }\n});\n\nvar parser_1 = parser;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * PHP AST Tokens\n * @type {Object}\n */\nvar tokens$2 = {\n  values: {\n    101: \"T_HALT_COMPILER\",\n    102: \"T_USE\",\n    103: \"T_ENCAPSED_AND_WHITESPACE\",\n    104: \"T_OBJECT_OPERATOR\",\n    105: \"T_STRING\",\n    106: \"T_DOLLAR_OPEN_CURLY_BRACES\",\n    107: \"T_STRING_VARNAME\",\n    108: \"T_CURLY_OPEN\",\n    109: \"T_NUM_STRING\",\n    110: \"T_ISSET\",\n    111: \"T_EMPTY\",\n    112: \"T_INCLUDE\",\n    113: \"T_INCLUDE_ONCE\",\n    114: \"T_EVAL\",\n    115: \"T_REQUIRE\",\n    116: \"T_REQUIRE_ONCE\",\n    117: \"T_NAMESPACE\",\n    118: \"T_NS_SEPARATOR\",\n    119: \"T_AS\",\n    120: \"T_IF\",\n    121: \"T_ENDIF\",\n    122: \"T_WHILE\",\n    123: \"T_DO\",\n    124: \"T_FOR\",\n    125: \"T_SWITCH\",\n    126: \"T_BREAK\",\n    127: \"T_CONTINUE\",\n    128: \"T_RETURN\",\n    129: \"T_GLOBAL\",\n    130: \"T_STATIC\",\n    131: \"T_ECHO\",\n    132: \"T_INLINE_HTML\",\n    133: \"T_UNSET\",\n    134: \"T_FOREACH\",\n    135: \"T_DECLARE\",\n    136: \"T_TRY\",\n    137: \"T_THROW\",\n    138: \"T_GOTO\",\n    139: \"T_FINALLY\",\n    140: \"T_CATCH\",\n    141: \"T_ENDDECLARE\",\n    142: \"T_LIST\",\n    143: \"T_CLONE\",\n    144: \"T_PLUS_EQUAL\",\n    145: \"T_MINUS_EQUAL\",\n    146: \"T_MUL_EQUAL\",\n    147: \"T_DIV_EQUAL\",\n    148: \"T_CONCAT_EQUAL\",\n    149: \"T_MOD_EQUAL\",\n    150: \"T_AND_EQUAL\",\n    151: \"T_OR_EQUAL\",\n    152: \"T_XOR_EQUAL\",\n    153: \"T_SL_EQUAL\",\n    154: \"T_SR_EQUAL\",\n    155: \"T_INC\",\n    156: \"T_DEC\",\n    157: \"T_BOOLEAN_OR\",\n    158: \"T_BOOLEAN_AND\",\n    159: \"T_LOGICAL_OR\",\n    160: \"T_LOGICAL_AND\",\n    161: \"T_LOGICAL_XOR\",\n    162: \"T_SL\",\n    163: \"T_SR\",\n    164: \"T_IS_IDENTICAL\",\n    165: \"T_IS_NOT_IDENTICAL\",\n    166: \"T_IS_EQUAL\",\n    167: \"T_IS_NOT_EQUAL\",\n    168: \"T_IS_SMALLER_OR_EQUAL\",\n    169: \"T_IS_GREATER_OR_EQUAL\",\n    170: \"T_INSTANCEOF\",\n    171: \"T_INT_CAST\",\n    172: \"T_DOUBLE_CAST\",\n    173: \"T_STRING_CAST\",\n    174: \"T_ARRAY_CAST\",\n    175: \"T_OBJECT_CAST\",\n    176: \"T_BOOL_CAST\",\n    177: \"T_UNSET_CAST\",\n    178: \"T_EXIT\",\n    179: \"T_PRINT\",\n    180: \"T_YIELD\",\n    181: \"T_YIELD_FROM\",\n    182: \"T_FUNCTION\",\n    183: \"T_DOUBLE_ARROW\",\n    184: \"T_DOUBLE_COLON\",\n    185: \"T_ARRAY\",\n    186: \"T_CALLABLE\",\n    187: \"T_CLASS\",\n    188: \"T_ABSTRACT\",\n    189: \"T_TRAIT\",\n    190: \"T_FINAL\",\n    191: \"T_EXTENDS\",\n    192: \"T_INTERFACE\",\n    193: \"T_IMPLEMENTS\",\n    194: \"T_VAR\",\n    195: \"T_PUBLIC\",\n    196: \"T_PROTECTED\",\n    197: \"T_PRIVATE\",\n    198: \"T_CONST\",\n    199: \"T_NEW\",\n    200: \"T_INSTEADOF\",\n    201: \"T_ELSEIF\",\n    202: \"T_ELSE\",\n    203: \"T_ENDSWITCH\",\n    204: \"T_CASE\",\n    205: \"T_DEFAULT\",\n    206: \"T_ENDFOR\",\n    207: \"T_ENDFOREACH\",\n    208: \"T_ENDWHILE\",\n    209: \"T_CONSTANT_ENCAPSED_STRING\",\n    210: \"T_LNUMBER\",\n    211: \"T_DNUMBER\",\n    212: \"T_LINE\",\n    213: \"T_FILE\",\n    214: \"T_DIR\",\n    215: \"T_TRAIT_C\",\n    216: \"T_METHOD_C\",\n    217: \"T_FUNC_C\",\n    218: \"T_NS_C\",\n    219: \"T_START_HEREDOC\",\n    220: \"T_END_HEREDOC\",\n    221: \"T_CLASS_C\",\n    222: \"T_VARIABLE\",\n    223: \"T_OPEN_TAG\",\n    224: \"T_OPEN_TAG_WITH_ECHO\",\n    225: \"T_CLOSE_TAG\",\n    226: \"T_WHITESPACE\",\n    227: \"T_COMMENT\",\n    228: \"T_DOC_COMMENT\",\n    229: \"T_ELLIPSIS\",\n    230: \"T_COALESCE\",\n    231: \"T_POW\",\n    232: \"T_POW_EQUAL\",\n    233: \"T_SPACESHIP\",\n    234: \"T_COALESCE_EQUAL\",\n    235: \"T_FN\",\n  },\n  names: {\n    T_HALT_COMPILER: 101,\n    T_USE: 102,\n    T_ENCAPSED_AND_WHITESPACE: 103,\n    T_OBJECT_OPERATOR: 104,\n    T_STRING: 105,\n    T_DOLLAR_OPEN_CURLY_BRACES: 106,\n    T_STRING_VARNAME: 107,\n    T_CURLY_OPEN: 108,\n    T_NUM_STRING: 109,\n    T_ISSET: 110,\n    T_EMPTY: 111,\n    T_INCLUDE: 112,\n    T_INCLUDE_ONCE: 113,\n    T_EVAL: 114,\n    T_REQUIRE: 115,\n    T_REQUIRE_ONCE: 116,\n    T_NAMESPACE: 117,\n    T_NS_SEPARATOR: 118,\n    T_AS: 119,\n    T_IF: 120,\n    T_ENDIF: 121,\n    T_WHILE: 122,\n    T_DO: 123,\n    T_FOR: 124,\n    T_SWITCH: 125,\n    T_BREAK: 126,\n    T_CONTINUE: 127,\n    T_RETURN: 128,\n    T_GLOBAL: 129,\n    T_STATIC: 130,\n    T_ECHO: 131,\n    T_INLINE_HTML: 132,\n    T_UNSET: 133,\n    T_FOREACH: 134,\n    T_DECLARE: 135,\n    T_TRY: 136,\n    T_THROW: 137,\n    T_GOTO: 138,\n    T_FINALLY: 139,\n    T_CATCH: 140,\n    T_ENDDECLARE: 141,\n    T_LIST: 142,\n    T_CLONE: 143,\n    T_PLUS_EQUAL: 144,\n    T_MINUS_EQUAL: 145,\n    T_MUL_EQUAL: 146,\n    T_DIV_EQUAL: 147,\n    T_CONCAT_EQUAL: 148,\n    T_MOD_EQUAL: 149,\n    T_AND_EQUAL: 150,\n    T_OR_EQUAL: 151,\n    T_XOR_EQUAL: 152,\n    T_SL_EQUAL: 153,\n    T_SR_EQUAL: 154,\n    T_INC: 155,\n    T_DEC: 156,\n    T_BOOLEAN_OR: 157,\n    T_BOOLEAN_AND: 158,\n    T_LOGICAL_OR: 159,\n    T_LOGICAL_AND: 160,\n    T_LOGICAL_XOR: 161,\n    T_SL: 162,\n    T_SR: 163,\n    T_IS_IDENTICAL: 164,\n    T_IS_NOT_IDENTICAL: 165,\n    T_IS_EQUAL: 166,\n    T_IS_NOT_EQUAL: 167,\n    T_IS_SMALLER_OR_EQUAL: 168,\n    T_IS_GREATER_OR_EQUAL: 169,\n    T_INSTANCEOF: 170,\n    T_INT_CAST: 171,\n    T_DOUBLE_CAST: 172,\n    T_STRING_CAST: 173,\n    T_ARRAY_CAST: 174,\n    T_OBJECT_CAST: 175,\n    T_BOOL_CAST: 176,\n    T_UNSET_CAST: 177,\n    T_EXIT: 178,\n    T_PRINT: 179,\n    T_YIELD: 180,\n    T_YIELD_FROM: 181,\n    T_FUNCTION: 182,\n    T_DOUBLE_ARROW: 183,\n    T_DOUBLE_COLON: 184,\n    T_ARRAY: 185,\n    T_CALLABLE: 186,\n    T_CLASS: 187,\n    T_ABSTRACT: 188,\n    T_TRAIT: 189,\n    T_FINAL: 190,\n    T_EXTENDS: 191,\n    T_INTERFACE: 192,\n    T_IMPLEMENTS: 193,\n    T_VAR: 194,\n    T_PUBLIC: 195,\n    T_PROTECTED: 196,\n    T_PRIVATE: 197,\n    T_CONST: 198,\n    T_NEW: 199,\n    T_INSTEADOF: 200,\n    T_ELSEIF: 201,\n    T_ELSE: 202,\n    T_ENDSWITCH: 203,\n    T_CASE: 204,\n    T_DEFAULT: 205,\n    T_ENDFOR: 206,\n    T_ENDFOREACH: 207,\n    T_ENDWHILE: 208,\n    T_CONSTANT_ENCAPSED_STRING: 209,\n    T_LNUMBER: 210,\n    T_DNUMBER: 211,\n    T_LINE: 212,\n    T_FILE: 213,\n    T_DIR: 214,\n    T_TRAIT_C: 215,\n    T_METHOD_C: 216,\n    T_FUNC_C: 217,\n    T_NS_C: 218,\n    T_START_HEREDOC: 219,\n    T_END_HEREDOC: 220,\n    T_CLASS_C: 221,\n    T_VARIABLE: 222,\n    T_OPEN_TAG: 223,\n    T_OPEN_TAG_WITH_ECHO: 224,\n    T_CLOSE_TAG: 225,\n    T_WHITESPACE: 226,\n    T_COMMENT: 227,\n    T_DOC_COMMENT: 228,\n    T_ELLIPSIS: 229,\n    T_COALESCE: 230,\n    T_POW: 231,\n    T_POW_EQUAL: 232,\n    T_SPACESHIP: 233,\n    T_COALESCE_EQUAL: 234,\n    T_FN: 235,\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * Defines the location of the node (with it's source contents as string)\n * @constructor Location\n * @property {String|null} source\n * @property {Position} start\n * @property {Position} end\n */\nconst Location = function (source, start, end) {\n  this.source = source;\n  this.start = start;\n  this.end = end;\n};\n\nvar location_1 = Location;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * Each Position object consists of a line number (1-indexed) and a column number (0-indexed):\n * @constructor Position\n * @property {Number} line\n * @property {Number} column\n * @property {Number} offset\n */\nconst Position = function (line, column, offset) {\n  this.line = line;\n  this.column = column;\n  this.offset = offset;\n};\n\nvar position = Position;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * A generic AST node\n * @constructor Node\n * @property {Location|null} loc\n * @property {Comment[]} leadingComments\n * @property {Comment[]?} trailingComments\n * @property {String} kind\n */\nconst Node = function Node(kind, docs, location) {\n  this.kind = kind;\n  if (docs) {\n    this.leadingComments = docs;\n  }\n  if (location) {\n    this.loc = location;\n  }\n};\n\n/**\n * Attach comments to current node\n * @param {*} docs\n */\nNode.prototype.setTrailingComments = function (docs) {\n  this.trailingComments = docs;\n};\n\n/**\n * Destroying an unused node\n */\nNode.prototype.destroy = function (node) {\n  if (!node) {\n    throw new Error(\n      \"Node already initialized, you must swap with another node\"\n    );\n  }\n  if (this.leadingComments) {\n    if (node.leadingComments) {\n      node.leadingComments = Array.concat(\n        this.leadingComments,\n        node.leadingComments\n      );\n    } else {\n      node.leadingComments = this.leadingComments;\n    }\n  }\n  if (this.trailingComments) {\n    if (node.trailingComments) {\n      node.trailingComments = Array.concat(\n        this.trailingComments,\n        node.trailingComments\n      );\n    } else {\n      node.trailingComments = this.trailingComments;\n    }\n  }\n  return node;\n};\n\n/**\n * Includes current token position of the parser\n * @param {*} parser\n */\nNode.prototype.includeToken = function (parser) {\n  if (this.loc) {\n    if (this.loc.end) {\n      this.loc.end.line = parser.lexer.yylloc.last_line;\n      this.loc.end.column = parser.lexer.yylloc.last_column;\n      this.loc.end.offset = parser.lexer.offset;\n    }\n    if (parser.ast.withSource) {\n      this.loc.source = parser.lexer._input.substring(\n        this.loc.start.offset,\n        parser.lexer.offset\n      );\n    }\n  }\n  return this;\n};\n\n/**\n * Helper for extending the Node class\n * @param {String} type\n * @param {Function} constructor\n * @return {Function}\n */\nNode.extends = function (type, constructor) {\n  constructor.prototype = Object.create(this.prototype);\n  constructor.extends = this.extends;\n  constructor.prototype.constructor = constructor;\n  constructor.kind = type;\n  return constructor;\n};\n\nvar node = Node;\n\nconst KIND = \"expression\";\n\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Expression\n * @extends {Node}\n */\nvar expression = node.extends(KIND, function Expression(kind, docs, location) {\n  node.apply(this, [kind || KIND, docs, location]);\n});\n\nconst KIND$1 = \"array\";\n\n/**\n * Defines an array structure\n * @constructor Array\n * @example\n * // PHP code :\n * [1, 'foo' => 'bar', 3]\n *\n * // AST structure :\n * {\n *  \"kind\": \"array\",\n *  \"shortForm\": true\n *  \"items\": [\n *    {\"kind\": \"number\", \"value\": \"1\"},\n *    {\n *      \"kind\": \"entry\",\n *      \"key\": {\"kind\": \"string\", \"value\": \"foo\", \"isDoubleQuote\": false},\n *      \"value\": {\"kind\": \"string\", \"value\": \"bar\", \"isDoubleQuote\": false}\n *    },\n *    {\"kind\": \"number\", \"value\": \"3\"}\n *  ]\n * }\n * @extends {Expression}\n * @property {Entry|Expr|Variable} items List of array items\n * @property {boolean} shortForm Indicate if the short array syntax is used, ex `[]` instead `array()`\n */\nvar array$1 = expression.extends(KIND$1, function Array(\n  shortForm,\n  items,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$1, docs, location]);\n  this.items = items;\n  this.shortForm = shortForm;\n});\n\nconst KIND$2 = \"arrowfunc\";\n\n/**\n * Defines an arrow function (it's like a closure)\n * @constructor ArrowFunc\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {Expression} body\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {boolean} isStatic\n */\nvar arrowfunc = expression.extends(KIND$2, function Closure(\n  args,\n  byref,\n  body,\n  type,\n  nullable,\n  isStatic,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$2, docs, location]);\n  this.arguments = args;\n  this.byref = byref;\n  this.body = body;\n  this.type = type;\n  this.nullable = nullable;\n  this.isStatic = isStatic || false;\n});\n\nconst KIND$3 = \"assign\";\n\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\nvar assign = expression.extends(KIND$3, function Assign(\n  left,\n  right,\n  operator,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$3, docs, location]);\n  this.left = left;\n  this.right = right;\n  this.operator = operator;\n});\n\nconst KIND$4 = \"assignref\";\n\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\nvar assignref = expression.extends(KIND$4, function AssignRef(\n  left,\n  right,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$4, docs, location]);\n  this.left = left;\n  this.right = right;\n});\n\nconst KIND$5 = \"operation\";\n\n/**\n * Defines binary operations\n * @constructor Operation\n * @extends {Expression}\n */\nvar operation = expression.extends(KIND$5, function Operation(kind, docs, location) {\n  expression.apply(this, [kind || KIND$5, docs, location]);\n});\n\nconst KIND$6 = \"bin\";\n/**\n * Binary operations\n * @constructor Bin\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} left\n * @property {Expression} right\n */\nvar bin = operation.extends(KIND$6, function Bin(\n  type,\n  left,\n  right,\n  docs,\n  location\n) {\n  operation.apply(this, [KIND$6, docs, location]);\n  this.type = type;\n  this.left = left;\n  this.right = right;\n});\n\nconst KIND$7 = \"statement\";\n\n/**\n * Any statement.\n * @constructor Statement\n * @extends {Node}\n */\nvar statement$1 = node.extends(KIND$7, function Statement(kind, docs, location) {\n  node.apply(this, [kind || KIND$7, docs, location]);\n});\n\nconst KIND$8 = \"block\";\n\n/**\n * A block statement, i.e., a sequence of statements surrounded by braces.\n * @constructor Block\n * @extends {Statement}\n * @property {Node[]} children\n */\nvar block = statement$1.extends(KIND$8, function Block(\n  kind,\n  children,\n  docs,\n  location\n) {\n  statement$1.apply(this, [kind || KIND$8, docs, location]);\n  this.children = children.filter(Boolean);\n});\n\nconst KIND$9 = \"literal\";\n\n/**\n * Defines an array structure\n * @constructor Literal\n * @extends {Expression}\n * @property {string} raw\n * @property {Node|string|number|boolean|null} value\n */\nvar literal = expression.extends(KIND$9, function Literal(\n  kind,\n  value,\n  raw,\n  docs,\n  location\n) {\n  expression.apply(this, [kind || KIND$9, docs, location]);\n  this.value = value;\n  if (raw) {\n    this.raw = raw;\n  }\n});\n\nconst KIND$a = \"boolean\";\n\n/**\n * Defines a boolean value (true/false)\n * @constructor Boolean\n * @extends {Literal}\n */\nvar boolean_1 = literal.extends(KIND$a, function Boolean(\n  value,\n  raw,\n  docs,\n  location\n) {\n  literal.apply(this, [KIND$a, value, raw, docs, location]);\n});\n\nconst KIND$b = \"break\";\n\n/**\n * A break statement\n * @constructor Break\n * @extends {Statement}\n * @property {Number|Null} level\n */\nvar _break = statement$1.extends(KIND$b, function Break(level, docs, location) {\n  statement$1.apply(this, [KIND$b, docs, location]);\n  this.level = level;\n});\n\nconst KIND$c = \"byref\";\n\n/**\n * Passing by Reference - so the function can modify the variable\n * @constructor ByRef\n * @extends {Expression}\n * @property {expr} what\n */\nvar byref = expression.extends(KIND$c, function ByRef(what, docs, location) {\n  expression.apply(this, [KIND$c, docs, location]);\n  this.what = what;\n});\n\nconst KIND$d = \"call\";\n\n/**\n * Executes a call statement\n * @constructor Call\n * @extends {Expression}\n * @property {Identifier|Variable|??} what\n * @property {Arguments[]} arguments\n */\nvar call = expression.extends(KIND$d, function Call(\n  what,\n  args,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$d, docs, location]);\n  this.what = what;\n  this.arguments = args;\n});\n\nconst KIND$e = \"case\";\n\n/**\n * A switch case statement\n * @constructor Case\n * @extends {Statement}\n * @property {Expression|null} test - if null, means that the default case\n * @property {Block|null} body\n */\nvar _case = statement$1.extends(KIND$e, function Case(\n  test,\n  body,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$e, docs, location]);\n  this.test = test;\n  this.body = body;\n});\n\nconst KIND$f = \"cast\";\n\n/**\n * Binary operations\n * @constructor Cast\n * @extends {Operation}\n * @property {String} type\n * @property {String} raw\n * @property {Expression} expr\n */\nvar cast = operation.extends(KIND$f, function Cast(\n  type,\n  raw,\n  expr,\n  docs,\n  location\n) {\n  operation.apply(this, [KIND$f, docs, location]);\n  this.type = type;\n  this.raw = raw;\n  this.expr = expr;\n});\n\nconst KIND$g = \"catch\";\n\n/**\n * Defines a catch statement\n * @constructor Catch\n * @extends {Statement}\n * @property {Identifier[]} what\n * @property {Variable} variable\n * @property {Statement} body\n * @see http://php.net/manual/en/language.exceptions.php\n */\nvar _catch = statement$1.extends(KIND$g, function Catch(\n  body,\n  what,\n  variable,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$g, docs, location]);\n  this.body = body;\n  this.what = what;\n  this.variable = variable;\n});\n\nconst KIND$h = \"declaration\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * A declaration statement (function, class, interface...)\n * @constructor Declaration\n * @extends {Statement}\n * @property {Identifier|string} name\n */\nconst Declaration = statement$1.extends(KIND$h, function Declaration(\n  kind,\n  name,\n  docs,\n  location\n) {\n  statement$1.apply(this, [kind || KIND$h, docs, location]);\n  this.name = name;\n});\n\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\nDeclaration.prototype.parseFlags = function (flags) {\n  this.isAbstract = flags[2] === 1;\n  this.isFinal = flags[2] === 2;\n  if (this.kind !== \"class\") {\n    if (flags[0] === -1) {\n      this.visibility = IS_UNDEFINED;\n    } else if (flags[0] === null) {\n      this.visibility = null;\n    } else if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE;\n    }\n    this.isStatic = flags[1] === 1;\n  }\n};\n\nvar declaration = Declaration;\n\nconst KIND$i = \"class\";\n\n/**\n * A class definition\n * @constructor Class\n * @extends {Declaration}\n * @property {Identifier|null} extends\n * @property {Identifier[]} implements\n * @property {Declaration[]} body\n * @property {boolean} isAnonymous\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n */\nvar _class$1 = declaration.extends(KIND$i, function Class(\n  name,\n  ext,\n  impl,\n  body,\n  flags,\n  docs,\n  location\n) {\n  declaration.apply(this, [KIND$i, name, docs, location]);\n  this.isAnonymous = name ? false : true;\n  this.extends = ext;\n  this.implements = impl;\n  this.body = body;\n  this.parseFlags(flags);\n});\n\nconst KIND$j = \"constantstatement\";\n\n/**\n * Declares a constants into the current scope\n * @constructor ConstantStatement\n * @extends {Statement}\n * @property {Constant[]} constants\n */\nvar constantstatement = statement$1.extends(KIND$j, function ConstantStatement(\n  kind,\n  constants,\n  docs,\n  location\n) {\n  statement$1.apply(this, [kind || KIND$j, docs, location]);\n  this.constants = constants;\n});\n\nconst KIND$k = \"classconstant\";\n\nconst IS_UNDEFINED$1 = \"\";\nconst IS_PUBLIC$1 = \"public\";\nconst IS_PROTECTED$1 = \"protected\";\nconst IS_PRIVATE$1 = \"private\";\n\n/**\n * Defines a class/interface/trait constant\n * @constructor ClassConstant\n * @extends {ConstantStatement}\n * @property {string} visibility\n */\nconst ClassConstant = constantstatement.extends(KIND$k, function ClassConstant(\n  kind,\n  constants,\n  flags,\n  docs,\n  location\n) {\n  constantstatement.apply(this, [kind || KIND$k, constants, docs, location]);\n  this.parseFlags(flags);\n});\n\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\nClassConstant.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED$1;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC$1;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED$1;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE$1;\n  }\n};\n\nvar classconstant = ClassConstant;\n\nconst KIND$l = \"clone\";\n\n/**\n * Defines a clone call\n * @constructor Clone\n * @extends {Expression}\n * @property {Expression} what\n */\nvar clone = expression.extends(KIND$l, function Clone(what, docs, location) {\n  expression.apply(this, [KIND$l, docs, location]);\n  this.what = what;\n});\n\nconst KIND$m = \"closure\";\n\n/**\n * Defines a closure\n * @constructor Closure\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Variable[]} uses\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n * @property {boolean} isStatic\n */\nvar closure = expression.extends(KIND$m, function Closure(\n  args,\n  byref,\n  uses,\n  type,\n  nullable,\n  isStatic,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$m, docs, location]);\n  this.uses = uses;\n  this.arguments = args;\n  this.byref = byref;\n  this.type = type;\n  this.nullable = nullable;\n  this.isStatic = isStatic || false;\n  this.body = null;\n});\n\n/**\n * Abstract documentation node (ComentLine or CommentBlock)\n * @constructor Comment\n * @extends {Node}\n * @property {String} value\n */\nvar comment$1 = node.extends(\"comment\", function Comment(\n  kind,\n  value,\n  docs,\n  location\n) {\n  node.apply(this, [kind, docs, location]);\n  this.value = value;\n});\n\nconst KIND$n = \"commentblock\";\n\n/**\n * A comment block (multiline)\n * @constructor CommentBlock\n * @extends {Comment}\n */\nvar commentblock = comment$1.extends(KIND$n, function CommentBlock(\n  value,\n  docs,\n  location\n) {\n  comment$1.apply(this, [KIND$n, value, docs, location]);\n});\n\nconst KIND$o = \"commentline\";\n\n/**\n * A single line comment\n * @constructor CommentLine\n * @extends {Comment}\n */\nvar commentline = comment$1.extends(KIND$o, function CommentLine(\n  value,\n  docs,\n  location\n) {\n  comment$1.apply(this, [KIND$o, value, docs, location]);\n});\n\nconst KIND$p = \"constant\";\n\n/**\n * Defines a constant\n * @constructor Constant\n * @extends {Node}\n * @property {string} name\n * @property {Node|string|number|boolean|null} value\n */\nvar constant = node.extends(KIND$p, function Constant(\n  name,\n  value,\n  docs,\n  location\n) {\n  node.apply(this, [KIND$p, docs, location]);\n  this.name = name;\n  this.value = value;\n});\n\nconst KIND$q = \"continue\";\n\n/**\n * A continue statement\n * @constructor Continue\n * @extends {Statement}\n * @property {Number|Null} level\n */\nvar _continue = statement$1.extends(KIND$q, function Continue(\n  level,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$q, docs, location]);\n  this.level = level;\n});\n\nconst KIND$r = \"declare\";\n\n/**\n * The declare construct is used to set execution directives for a block of code\n * @constructor Declare\n * @extends {Block}\n * @property {Array[]} directives\n * @property {String} mode\n * @see http://php.net/manual/en/control-structures.declare.php\n */\nconst Declare = block.extends(KIND$r, function Declare(\n  directives,\n  body,\n  mode,\n  docs,\n  location\n) {\n  block.apply(this, [KIND$r, body, docs, location]);\n  this.directives = directives;\n  this.mode = mode;\n});\n\n/**\n * The node is declared as a short tag syntax :\n * ```php\n * <?php\n * declare(ticks=1):\n * // some statements\n * enddeclare;\n * ```\n * @constant {String} MODE_SHORT\n */\nDeclare.MODE_SHORT = \"short\";\n\n/**\n * The node is declared bracket enclosed code :\n * ```php\n * <?php\n * declare(ticks=1) {\n * // some statements\n * }\n * ```\n * @constant {String} MODE_BLOCK\n */\nDeclare.MODE_BLOCK = \"block\";\n\n/**\n * The node is declared as a simple statement. In order to make things simpler\n * children of the node are automatically collected until the next\n * declare statement.\n * ```php\n * <?php\n * declare(ticks=1);\n * // some statements\n * declare(ticks=2);\n * // some statements\n * ```\n * @constant {String} MODE_NONE\n */\nDeclare.MODE_NONE = \"none\";\n\nvar declare = Declare;\n\nconst KIND$s = \"declaredirective\";\n\n/**\n * Defines a constant\n * @constructor DeclareDirective\n * @extends {Node}\n * @property {Identifier} name\n * @property {Node|string|number|boolean|null} value\n */\nvar declaredirective = node.extends(KIND$s, function DeclareDirective(\n  key,\n  value,\n  docs,\n  location\n) {\n  node.apply(this, [KIND$s, docs, location]);\n  this.key = key;\n  this.value = value;\n});\n\nconst KIND$t = \"do\";\n\n/**\n * Defines a do/while statement\n * @constructor Do\n * @extends {Statement}\n * @property {Expression} test\n * @property {Statement} body\n */\nvar _do = statement$1.extends(KIND$t, function Do(\n  test,\n  body,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$t, docs, location]);\n  this.test = test;\n  this.body = body;\n});\n\nconst KIND$u = \"echo\";\n\n/**\n * Defines system based call\n * @constructor Echo\n * @property {boolean} shortForm\n * @extends {Statement}\n */\nvar echo = statement$1.extends(KIND$u, function Echo(\n  expressions,\n  shortForm,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$u, docs, location]);\n  this.shortForm = shortForm;\n  this.expressions = expressions;\n});\n\nconst KIND$v = \"empty\";\n\n/**\n * Defines an empty check call\n * @constructor Empty\n * @extends {Expression}\n */\nvar empty = expression.extends(KIND$v, function Empty(\n  expression$1,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$v, docs, location]);\n  this.expression = expression$1;\n});\n\nconst KIND$w = \"encapsed\";\n\n/**\n * Defines an encapsed string (contains expressions)\n * @constructor Encapsed\n * @extends {Literal}\n * @property {String} type - Defines the type of encapsed string (shell, heredoc, string)\n * @property {String|Null} label - The heredoc label, defined only when the type is heredoc\n */\nconst Encapsed = literal.extends(KIND$w, function Encapsed(\n  value,\n  raw,\n  type,\n  docs,\n  location\n) {\n  literal.apply(this, [KIND$w, value, raw, docs, location]);\n  this.type = type;\n});\n\n/**\n * The node is a double quote string :\n * ```php\n * <?php\n * echo \"hello $world\";\n * ```\n * @constant {String} TYPE_STRING - `string`\n */\nEncapsed.TYPE_STRING = \"string\";\n\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo `ls -larth $path`;\n * ```\n * @constant {String} TYPE_SHELL - `shell`\n */\nEncapsed.TYPE_SHELL = \"shell\";\n\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo <<<STR\n *  Hello $world\n * STR\n * ;\n * ```\n * @constant {String} TYPE_HEREDOC - `heredoc`\n */\nEncapsed.TYPE_HEREDOC = \"heredoc\";\n\n/**\n * The node contains a list of constref / variables / expr :\n * ```php\n * <?php\n * echo $foo->bar_$baz;\n * ```\n * @constant {String} TYPE_OFFSET - `offset`\n */\nEncapsed.TYPE_OFFSET = \"offset\";\n\nvar encapsed = Encapsed;\n\nconst KIND$x = \"encapsedpart\";\n\n/**\n * Part of `Encapsed` node\n * @constructor EncapsedPart\n * @extends {Expression}\n * @property {Expression} expression\n * @property {String} syntax\n * @property {Boolean} curly\n */\nvar encapsedpart = expression.extends(KIND$x, function EncapsedPart(\n  expression$1,\n  syntax,\n  curly,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$x, docs, location]);\n  this.expression = expression$1;\n  this.syntax = syntax;\n  this.curly = curly;\n});\n\nconst KIND$y = \"entry\";\n\n/**\n * An array entry - see [Array](#array)\n * @constructor Entry\n * @extends {Expression}\n * @property {Node|null} key The entry key/offset\n * @property {Node} value The entry value\n * @property {Boolean} byRef By reference\n * @property {Boolean} unpack Argument unpacking\n */\nvar entry = expression.extends(KIND$y, function Entry(\n  key,\n  value,\n  byRef,\n  unpack,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$y, docs, location]);\n  this.key = key;\n  this.value = value;\n  this.byRef = byRef;\n  this.unpack = unpack;\n});\n\nconst KIND$z = \"error\";\n\n/**\n * Defines an error node (used only on silentMode)\n * @constructor Error\n * @extends {Node}\n * @property {string} message\n * @property {number} line\n * @property {number|string} token\n * @property {string|array} expected\n */\nvar error = node.extends(KIND$z, function Error(\n  message,\n  token,\n  line,\n  expected,\n  docs,\n  location\n) {\n  node.apply(this, [KIND$z, docs, location]);\n  this.message = message;\n  this.token = token;\n  this.line = line;\n  this.expected = expected;\n});\n\nconst KIND$A = \"eval\";\n\n/**\n * Defines an eval statement\n * @constructor Eval\n * @extends {Expression}\n * @property {Node} source\n */\nvar _eval = expression.extends(KIND$A, function Eval(\n  source,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$A, docs, location]);\n  this.source = source;\n});\n\nconst KIND$B = \"exit\";\n\n/**\n * Defines an exit / die call\n * @constructor Exit\n * @extends {Expression}\n * @property {Node|null} expression\n * @property {Boolean} useDie\n */\nvar exit = expression.extends(KIND$B, function Exit(\n  expression$1,\n  useDie,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$B, docs, location]);\n  this.expression = expression$1;\n  this.useDie = useDie;\n});\n\nconst KIND$C = \"expressionstatement\";\n\n/**\n * Defines an expression based statement\n * @constructor ExpressionStatement\n * @extends {Statement}\n * @property {Expression} expression\n */\nvar expressionstatement = statement$1.extends(KIND$C, function ExpressionStatement(\n  expr,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$C, docs, location]);\n  this.expression = expr;\n});\n\nconst KIND$D = \"for\";\n\n/**\n * Defines a for iterator\n * @constructor For\n * @extends {Statement}\n * @property {Expression[]} init\n * @property {Expression[]} test\n * @property {Expression[]} increment\n * @property {Statement} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.for.php\n */\nvar _for = statement$1.extends(KIND$D, function For(\n  init,\n  test,\n  increment,\n  body,\n  shortForm,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$D, docs, location]);\n  this.init = init;\n  this.test = test;\n  this.increment = increment;\n  this.shortForm = shortForm;\n  this.body = body;\n});\n\nconst KIND$E = \"foreach\";\n\n/**\n * Defines a foreach iterator\n * @constructor Foreach\n * @extends {Statement}\n * @property {Expression} source\n * @property {Expression|null} key\n * @property {Expression} value\n * @property {Statement} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.foreach.php\n */\nvar foreach = statement$1.extends(KIND$E, function Foreach(\n  source,\n  key,\n  value,\n  body,\n  shortForm,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$E, docs, location]);\n  this.source = source;\n  this.key = key;\n  this.value = value;\n  this.shortForm = shortForm;\n  this.body = body;\n});\n\nconst KIND$F = \"function\";\n\n/**\n * Defines a classic function\n * @constructor Function\n * @extends {Declaration}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n */\nvar _function$1 = declaration.extends(KIND$F, function _Function(\n  name,\n  args,\n  byref,\n  type,\n  nullable,\n  docs,\n  location\n) {\n  declaration.apply(this, [KIND$F, name, docs, location]);\n  this.arguments = args;\n  this.byref = byref;\n  this.type = type;\n  this.nullable = nullable;\n  this.body = null;\n});\n\nconst KIND$G = \"global\";\n\n/**\n * Imports a variable from the global scope\n * @constructor Global\n * @extends {Statement}\n * @property {Variable[]} items\n */\nvar global = statement$1.extends(KIND$G, function Global(\n  items,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$G, docs, location]);\n  this.items = items;\n});\n\nconst KIND$H = \"goto\";\n\n/**\n * Defines goto statement\n * @constructor Goto\n * @extends {Statement}\n * @property {String} label\n * @see {Label}\n */\nvar goto_1 = statement$1.extends(KIND$H, function Goto(label, docs, location) {\n  statement$1.apply(this, [KIND$H, docs, location]);\n  this.label = label;\n});\n\nconst KIND$I = \"halt\";\n\n/**\n * Halts the compiler execution\n * @constructor Halt\n * @extends {Statement}\n * @property {String} after - String after the halt statement\n * @see http://php.net/manual/en/function.halt-compiler.php\n */\nvar halt = statement$1.extends(KIND$I, function Halt(after, docs, location) {\n  statement$1.apply(this, [KIND$I, docs, location]);\n  this.after = after;\n});\n\nconst KIND$J = \"identifier\";\n\n/**\n * Defines an identifier node\n * @constructor Identifier\n * @extends {Node}\n * @property {string} name\n */\nconst Identifier = node.extends(KIND$J, function Identifier(\n  name,\n  docs,\n  location\n) {\n  node.apply(this, [KIND$J, docs, location]);\n  this.name = name;\n});\n\nvar identifier = Identifier;\n\nconst KIND$K = \"if\";\n\n/**\n * Defines a if statement\n * @constructor If\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {Block|If|null} alternate\n * @property {boolean} shortForm\n */\nvar _if$1 = statement$1.extends(KIND$K, function If(\n  test,\n  body,\n  alternate,\n  shortForm,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$K, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.alternate = alternate;\n  this.shortForm = shortForm;\n});\n\nconst KIND$L = \"include\";\n\n/**\n * Defines system include call\n * @constructor Include\n * @extends {Expression}\n * @property {Node} target\n * @property {boolean} once\n * @property {boolean} require\n */\nvar include = expression.extends(KIND$L, function Include(\n  once,\n  require,\n  target,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$L, docs, location]);\n  this.once = once;\n  this.require = require;\n  this.target = target;\n});\n\nconst KIND$M = \"inline\";\n\n/**\n * Defines inline html output (treated as echo output)\n * @constructor Inline\n * @extends {Literal}\n */\nvar inline = literal.extends(KIND$M, function Inline(\n  value,\n  raw,\n  docs,\n  location\n) {\n  literal.apply(this, [KIND$M, value, raw, docs, location]);\n});\n\nconst KIND$N = \"interface\";\n\n/**\n * An interface definition\n * @constructor Interface\n * @extends {Declaration}\n * @property {Identifier[]} extends\n * @property {Declaration[]} body\n */\nvar _interface = declaration.extends(KIND$N, function Interface(\n  name,\n  ext,\n  body,\n  docs,\n  location\n) {\n  declaration.apply(this, [KIND$N, name, docs, location]);\n  this.extends = ext;\n  this.body = body;\n});\n\nconst KIND$O = \"isset\";\n\n/**\n * Defines an isset call\n * @constructor Isset\n * @extends {Expression}\n */\nvar isset = expression.extends(KIND$O, function Isset(\n  variables,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$O, docs, location]);\n  this.variables = variables;\n});\n\nconst KIND$P = \"label\";\n\n/**\n * A label statement (referenced by goto)\n * @constructor Label\n * @extends {Statement}\n * @property {String} name\n */\nvar label = statement$1.extends(KIND$P, function Label(name, docs, location) {\n  statement$1.apply(this, [KIND$P, docs, location]);\n  this.name = name;\n});\n\nconst KIND$Q = \"list\";\n\n/**\n * Defines list assignment\n * @constructor List\n * @extends {Expression}\n * @property {boolean} shortForm\n */\nvar list = expression.extends(KIND$Q, function List(\n  items,\n  shortForm,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$Q, docs, location]);\n  this.items = items;\n  this.shortForm = shortForm;\n});\n\nconst KIND$R = \"lookup\";\n\n/**\n * Lookup on an offset in the specified object\n * @constructor Lookup\n * @extends {Expression}\n * @property {Expression} what\n * @property {Expression} offset\n */\nvar lookup = expression.extends(KIND$R, function Lookup(\n  kind,\n  what,\n  offset,\n  docs,\n  location\n) {\n  expression.apply(this, [kind || KIND$R, docs, location]);\n  this.what = what;\n  this.offset = offset;\n});\n\nconst KIND$S = \"magic\";\n\n/**\n * Defines magic constant\n * @constructor Magic\n * @extends {Literal}\n */\nvar magic = literal.extends(KIND$S, function Magic(\n  value,\n  raw,\n  docs,\n  location\n) {\n  literal.apply(this, [KIND$S, value, raw, docs, location]);\n});\n\nconst KIND$T = \"method\";\n\n/**\n * Defines a class/interface/trait method\n * @constructor Method\n * @extends {_Function}\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n * @property {boolean} isStatic\n * @property {string} visibility\n */\nvar method = _function$1.extends(KIND$T, function Method() {\n  _function$1.apply(this, arguments);\n  this.kind = KIND$T;\n});\n\nconst KIND$U = \"reference\";\n\n/**\n * Defines a reference node\n * @constructor Reference\n * @extends {Node}\n */\nconst Reference = node.extends(KIND$U, function Reference(kind, docs, location) {\n  node.apply(this, [kind || KIND$U, docs, location]);\n});\n\nvar reference = Reference;\n\nconst KIND$V = \"name\";\n\n/**\n * Defines a class reference node\n * @constructor Name\n * @extends {Reference}\n * @property {string} name\n * @property {string} resolution\n */\nconst Name = reference.extends(KIND$V, function Name(\n  name,\n  isRelative,\n  docs,\n  location\n) {\n  reference.apply(this, [KIND$V, docs, location]);\n  if (isRelative) {\n    this.resolution = Name.RELATIVE_NAME;\n  } else if (name.length === 1) {\n    this.resolution = Name.UNQUALIFIED_NAME;\n  } else if (!name[0]) {\n    this.resolution = Name.FULL_QUALIFIED_NAME;\n  } else {\n    this.resolution = Name.QUALIFIED_NAME;\n  }\n  this.name = name.join(\"\\\\\");\n});\n\n/**\n * This is an identifier without a namespace separator, such as Foo\n * @constant {String} UNQUALIFIED_NAME\n */\nName.UNQUALIFIED_NAME = \"uqn\";\n/**\n * This is an identifier with a namespace separator, such as Foo\\Bar\n * @constant {String} QUALIFIED_NAME\n */\nName.QUALIFIED_NAME = \"qn\";\n/**\n * This is an identifier with a namespace separator that begins with\n * a namespace separator, such as \\Foo\\Bar. The namespace \\Foo is also\n * a fully qualified name.\n * @constant {String} FULL_QUALIFIED_NAME\n */\nName.FULL_QUALIFIED_NAME = \"fqn\";\n/**\n * This is an identifier starting with namespace, such as namespace\\Foo\\Bar.\n * @constant {String} RELATIVE_NAME\n */\nName.RELATIVE_NAME = \"rn\";\n\nvar name = Name;\n\nconst KIND$W = \"namespace\";\n\n/**\n * The main program node\n * @constructor Namespace\n * @extends {Block}\n * @property {String} name\n * @property {Boolean} withBrackets\n */\nvar namespace$1 = block.extends(KIND$W, function Namespace(\n  name,\n  children,\n  withBrackets,\n  docs,\n  location\n) {\n  block.apply(this, [KIND$W, children, docs, location]);\n  this.name = name;\n  this.withBrackets = withBrackets || false;\n});\n\nconst KIND$X = \"new\";\n\n/**\n * Creates a new instance of the specified class\n * @constructor New\n * @extends {Expression}\n * @property {Identifier|Variable|Class} what\n * @property {Arguments[]} arguments\n */\nvar _new = expression.extends(KIND$X, function New(\n  what,\n  args,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$X, docs, location]);\n  this.what = what;\n  this.arguments = args;\n});\n\nconst KIND$Y = \"noop\";\n\n/**\n * Ignore this node, it implies a no operation block, for example :\n * [$foo, $bar, /* here a noop node * /]\n * @constructor Noop\n * @extends {Node}\n */\nvar noop = node.extends(KIND$Y, function Noop(docs, location) {\n  node.apply(this, [KIND$Y, docs, location]);\n});\n\nconst KIND$Z = \"nowdoc\";\n\n/**\n * Defines a nowdoc string\n * @constructor NowDoc\n * @extends {Literal}\n * @property {String} label\n * @property {String} raw\n */\nvar nowdoc = literal.extends(KIND$Z, function Nowdoc(\n  value,\n  raw,\n  label,\n  docs,\n  location\n) {\n  literal.apply(this, [KIND$Z, value, raw, docs, location]);\n  this.label = label;\n});\n\nconst KIND$_ = \"nullkeyword\";\n\n/**\n * Represents the null keyword\n * @constructor NullKeyword\n * @extends {Node}\n */\nvar nullkeyword = node.extends(KIND$_, function NullKeyword(raw, docs, location) {\n  node.apply(this, [KIND$_, docs, location]);\n  this.raw = raw;\n});\n\nconst KIND$$ = \"number\";\n\n/**\n * Defines a numeric value\n * @constructor Number\n * @extends {Literal}\n */\nvar number = literal.extends(KIND$$, function Number(\n  value,\n  raw,\n  docs,\n  location\n) {\n  literal.apply(this, [KIND$$, value, raw, docs, location]);\n});\n\nconst KIND$10 = \"offsetlookup\";\n\n/**\n * Lookup on an offset in an array\n * @constructor OffsetLookup\n * @extends {Lookup}\n */\nvar offsetlookup = lookup.extends(KIND$10, function OffsetLookup(\n  what,\n  offset,\n  docs,\n  location\n) {\n  lookup.apply(this, [KIND$10, what, offset, docs, location]);\n});\n\nconst KIND$11 = \"parameter\";\n\n/**\n * Defines a function parameter\n * @constructor Parameter\n * @extends {Declaration}\n * @property {Identifier|null} type\n * @property {Node|null} value\n * @property {boolean} byref\n * @property {boolean} variadic\n * @property {boolean} nullable\n */\nvar parameter = declaration.extends(KIND$11, function Parameter(\n  name,\n  type,\n  value,\n  isRef,\n  isVariadic,\n  nullable,\n  docs,\n  location\n) {\n  declaration.apply(this, [KIND$11, name, docs, location]);\n  this.value = value;\n  this.type = type;\n  this.byref = isRef;\n  this.variadic = isVariadic;\n  this.nullable = nullable;\n});\n\nconst KIND$12 = \"parentreference\";\n\n/**\n * Defines a class reference node\n * @constructor ParentReference\n * @extends {Reference}\n */\nconst ParentReference = reference.extends(KIND$12, function ParentReference(\n  raw,\n  docs,\n  location\n) {\n  reference.apply(this, [KIND$12, docs, location]);\n  this.raw = raw;\n});\nvar parentreference = ParentReference;\n\nconst KIND$13 = \"post\";\n\n/**\n * Defines a post operation `$i++` or `$i--`\n * @constructor Post\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\nvar post = operation.extends(KIND$13, function Post(\n  type,\n  what,\n  docs,\n  location\n) {\n  operation.apply(this, [KIND$13, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n\nconst KIND$14 = \"pre\";\n\n/**\n * Defines a pre operation `++$i` or `--$i`\n * @constructor Pre\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\nvar pre = operation.extends(KIND$14, function Pre(\n  type,\n  what,\n  docs,\n  location\n) {\n  operation.apply(this, [KIND$14, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n\nconst KIND$15 = \"print\";\n\n/**\n * Outputs\n * @constructor Print\n * @extends {Expression}\n */\nvar print = expression.extends(KIND$15, function Print(\n  expression$1,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$15, docs, location]);\n  this.expression = expression$1;\n});\n\nconst KIND$16 = \"program\";\n\n/**\n * The main program node\n * @constructor Program\n * @extends {Block}\n * @property {Error[]} errors\n * @property {Doc[]?} comments\n * @property {String[]?} tokens\n */\nvar program = block.extends(KIND$16, function Program(\n  children,\n  errors,\n  comments,\n  tokens,\n  docs,\n  location\n) {\n  block.apply(this, [KIND$16, children, docs, location]);\n  this.errors = errors;\n  if (comments) {\n    this.comments = comments;\n  }\n  if (tokens) {\n    this.tokens = tokens;\n  }\n});\n\nconst KIND$17 = \"property\";\n\n/**\n * Defines a class property\n * @constructor Property\n * @extends {Statement}\n * @property {string} name\n * @property {Node|null} value\n * @property {boolean} nullable\n * @property {Identifier|Array<Identifier>|null} type\n */\nvar property$1 = statement$1.extends(KIND$17, function Property(\n  name,\n  value,\n  nullable,\n  type,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$17, docs, location]);\n  this.name = name;\n  this.value = value;\n  this.nullable = nullable;\n  this.type = type;\n});\n\nconst KIND$18 = \"propertylookup\";\n\n/**\n * Lookup to an object property\n * @constructor PropertyLookup\n * @extends {Lookup}\n */\nvar propertylookup = lookup.extends(KIND$18, function PropertyLookup(\n  what,\n  offset,\n  docs,\n  location\n) {\n  lookup.apply(this, [KIND$18, what, offset, docs, location]);\n});\n\nconst KIND$19 = \"propertystatement\";\n\nconst IS_UNDEFINED$2 = \"\";\nconst IS_PUBLIC$2 = \"public\";\nconst IS_PROTECTED$2 = \"protected\";\nconst IS_PRIVATE$2 = \"private\";\n\n/**\n * Declares a properties into the current scope\n * @constructor PropertyStatement\n * @extends {Statement}\n * @property {Property[]} properties\n */\nconst PropertyStatement = statement$1.extends(KIND$19, function PropertyStatement(\n  kind,\n  properties,\n  flags,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$19, docs, location]);\n  this.properties = properties;\n  this.parseFlags(flags);\n});\n\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\nPropertyStatement.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED$2;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC$2;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED$2;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE$2;\n  }\n\n  this.isStatic = flags[1] === 1;\n};\n\nvar propertystatement = PropertyStatement;\n\nconst KIND$1a = \"retif\";\n\n/**\n * Defines a short if statement that returns a value\n * @constructor RetIf\n * @extends {Expression}\n * @property {Expression} test\n * @property {Expression} trueExpr\n * @property {Expression} falseExpr\n */\nvar retif = expression.extends(KIND$1a, function RetIf(\n  test,\n  trueExpr,\n  falseExpr,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$1a, docs, location]);\n  this.test = test;\n  this.trueExpr = trueExpr;\n  this.falseExpr = falseExpr;\n});\n\nconst KIND$1b = \"return\";\n\n/**\n * A continue statement\n * @constructor Return\n * @extends {Statement}\n * @property {Expression|null} expr\n */\nvar _return = statement$1.extends(KIND$1b, function Return(expr, docs, location) {\n  statement$1.apply(this, [KIND$1b, docs, location]);\n  this.expr = expr;\n});\n\nconst KIND$1c = \"selfreference\";\n\n/**\n * Defines a class reference node\n * @constructor SelfReference\n * @extends {Reference}\n */\nconst SelfReference = reference.extends(KIND$1c, function SelfReference(\n  raw,\n  docs,\n  location\n) {\n  reference.apply(this, [KIND$1c, docs, location]);\n  this.raw = raw;\n});\nvar selfreference = SelfReference;\n\nconst KIND$1d = \"silent\";\n\n/**\n * Avoids to show/log warnings & notices from the inner expression\n * @constructor Silent\n * @extends {Expression}\n * @property {Expression} expr\n */\nvar silent = expression.extends(KIND$1d, function Silent(\n  expr,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$1d, docs, location]);\n  this.expr = expr;\n});\n\nconst KIND$1e = \"static\";\n\n/**\n * Declares a static variable into the current scope\n * @constructor Static\n * @extends {Statement}\n * @property {StaticVariable[]} variables\n */\nvar _static = statement$1.extends(KIND$1e, function Static(\n  variables,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$1e, docs, location]);\n  this.variables = variables;\n});\n\nconst KIND$1f = \"staticvariable\";\n\n/**\n * Defines a constant\n * @constructor StaticVariable\n * @extends {Node}\n * @property {Variable} variable\n * @property {Node|string|number|boolean|null} defaultValue\n */\nvar staticvariable = node.extends(KIND$1f, function StaticVariable(\n  variable,\n  defaultValue,\n  docs,\n  location\n) {\n  node.apply(this, [KIND$1f, docs, location]);\n  this.variable = variable;\n  this.defaultValue = defaultValue;\n});\n\nconst KIND$1g = \"staticlookup\";\n\n/**\n * Lookup to a static property\n * @constructor StaticLookup\n * @extends {Lookup}\n */\nvar staticlookup = lookup.extends(KIND$1g, function StaticLookup(\n  what,\n  offset,\n  docs,\n  location\n) {\n  lookup.apply(this, [KIND$1g, what, offset, docs, location]);\n});\n\nconst KIND$1h = \"staticreference\";\n\n/**\n * Defines a class reference node\n * @constructor StaticReference\n * @extends {Reference}\n */\nconst StaticReference = reference.extends(KIND$1h, function StaticReference(\n  raw,\n  docs,\n  location\n) {\n  reference.apply(this, [KIND$1h, docs, location]);\n  this.raw = raw;\n});\nvar staticreference = StaticReference;\n\nconst KIND$1i = \"string\";\n\n/**\n * Defines a string (simple ou double quoted) - chars are already escaped\n * @constructor String\n * @extends {Literal}\n * @property {boolean} unicode\n * @property {boolean} isDoubleQuote\n * @see {Encapsed}\n */\nvar string = literal.extends(KIND$1i, function String(\n  isDoubleQuote,\n  value,\n  unicode,\n  raw,\n  docs,\n  location\n) {\n  literal.apply(this, [KIND$1i, value, raw, docs, location]);\n  this.unicode = unicode;\n  this.isDoubleQuote = isDoubleQuote;\n});\n\nconst KIND$1j = \"switch\";\n\n/**\n * Defines a switch statement\n * @constructor Switch\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {boolean} shortForm\n */\nvar _switch$1 = statement$1.extends(KIND$1j, function Switch(\n  test,\n  body,\n  shortForm,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$1j, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.shortForm = shortForm;\n});\n\nconst KIND$1k = \"throw\";\n\n/**\n * Defines a throw statement\n * @constructor Throw\n * @extends {Statement}\n * @property {Expression} what\n */\nvar _throw = statement$1.extends(KIND$1k, function Throw(what, docs, location) {\n  statement$1.apply(this, [KIND$1k, docs, location]);\n  this.what = what;\n});\n\nconst KIND$1l = \"trait\";\n\n/**\n * A trait definition\n * @constructor Trait\n * @extends {Declaration}\n * @property {Declaration[]} body\n */\nvar trait = declaration.extends(KIND$1l, function Trait(\n  name,\n  body,\n  docs,\n  location\n) {\n  declaration.apply(this, [KIND$1l, name, docs, location]);\n  this.body = body;\n});\n\nconst KIND$1m = \"traitalias\";\n\nconst IS_UNDEFINED$3 = \"\";\nconst IS_PUBLIC$3 = \"public\";\nconst IS_PROTECTED$3 = \"protected\";\nconst IS_PRIVATE$3 = \"private\";\n\n/**\n * Defines a trait alias\n * @constructor TraitAlias\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier|null} as\n * @property {string|null} visibility\n */\nvar traitalias = node.extends(KIND$1m, function TraitAlias(\n  trait,\n  method,\n  as,\n  flags,\n  docs,\n  location\n) {\n  node.apply(this, [KIND$1m, docs, location]);\n  this.trait = trait;\n  this.method = method;\n  this.as = as;\n  this.visibility = IS_UNDEFINED$3;\n  if (flags) {\n    if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC$3;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED$3;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE$3;\n    }\n  }\n});\n\nconst KIND$1n = \"traitprecedence\";\n\n/**\n * Defines a trait alias\n * @constructor TraitPrecedence\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier[]} instead\n */\nvar traitprecedence = node.extends(KIND$1n, function TraitPrecedence(\n  trait,\n  method,\n  instead,\n  docs,\n  location\n) {\n  node.apply(this, [KIND$1n, docs, location]);\n  this.trait = trait;\n  this.method = method;\n  this.instead = instead;\n});\n\nconst KIND$1o = \"traituse\";\n\n/**\n * Defines a trait usage\n * @constructor TraitUse\n * @extends {Node}\n * @property {Identifier[]} traits\n * @property {Node[]|null} adaptations\n */\nvar traituse = node.extends(KIND$1o, function TraitUse(\n  traits,\n  adaptations,\n  docs,\n  location\n) {\n  node.apply(this, [KIND$1o, docs, location]);\n  this.traits = traits;\n  this.adaptations = adaptations;\n});\n\nconst KIND$1p = \"try\";\n\n/**\n * Defines a try statement\n * @constructor Try\n * @extends {Statement}\n * @property {Block} body\n * @property {Catch[]} catches\n * @property {Block} allways\n */\nvar _try$1 = statement$1.extends(KIND$1p, function Try(\n  body,\n  catches,\n  always,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$1p, docs, location]);\n  this.body = body;\n  this.catches = catches;\n  this.always = always;\n});\n\nconst KIND$1q = \"typereference\";\n\n/**\n * Defines a class reference node\n * @constructor TypeReference\n * @extends {Reference}\n * @property {string} name\n */\nconst TypeReference = reference.extends(KIND$1q, function TypeReference(\n  name,\n  raw,\n  docs,\n  location\n) {\n  reference.apply(this, [KIND$1q, docs, location]);\n  this.name = name;\n  this.raw = raw;\n});\n\nTypeReference.types = [\n  \"int\",\n  \"float\",\n  \"string\",\n  \"bool\",\n  \"object\",\n  \"array\",\n  \"callable\",\n  \"iterable\",\n  \"void\",\n];\n\nvar typereference = TypeReference;\n\nconst KIND$1r = \"unary\";\n\n/**\n * Unary operations\n * @constructor Unary\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} what\n */\nvar unary = operation.extends(KIND$1r, function Unary(\n  type,\n  what,\n  docs,\n  location\n) {\n  operation.apply(this, [KIND$1r, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n\nconst KIND$1s = \"unset\";\n\n/**\n * Deletes references to a list of variables\n * @constructor Unset\n * @extends {Statement}\n */\nvar unset = statement$1.extends(KIND$1s, function Unset(\n  variables,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$1s, docs, location]);\n  this.variables = variables;\n});\n\nconst KIND$1t = \"usegroup\";\n\n/**\n * Defines a use statement (with a list of use items)\n * @constructor UseGroup\n * @extends {Statement}\n * @property {String|null} name\n * @property {String|null} type - Possible value : function, const\n * @property {UseItem[]} item\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nvar usegroup = statement$1.extends(KIND$1t, function UseGroup(\n  name,\n  type,\n  items,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$1t, docs, location]);\n  this.name = name;\n  this.type = type;\n  this.items = items;\n});\n\nconst KIND$1u = \"useitem\";\n\n/**\n * Defines a use statement (from namespace)\n * @constructor UseItem\n * @extends {Statement}\n * @property {String} name\n * @property {String|null} type - Possible value : function, const\n * @property {Identifier|null} alias\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nconst UseItem = statement$1.extends(KIND$1u, function UseItem(\n  name,\n  alias,\n  type,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$1u, docs, location]);\n  this.name = name;\n  this.alias = alias;\n  this.type = type;\n});\n\n/**\n * Importing a constant\n * @constant {String} TYPE_CONST\n */\nUseItem.TYPE_CONST = \"const\";\n/**\n * Importing a function\n * @constant {String} TYPE_FUNC\n */\nUseItem.TYPE_FUNCTION = \"function\";\n\nvar useitem = UseItem;\n\nconst KIND$1v = \"variable\";\n\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Variable\n * @extends {Expression}\n * @example\n * // PHP code :\n * $foo\n * // AST output\n * {\n *  \"kind\": \"variable\",\n *  \"name\": \"foo\",\n *  \"curly\": false\n * }\n * @property {String|Node} name The variable name (can be a complex expression when the name is resolved dynamically)\n * @property {boolean} curly Indicate if the name is defined between curlies, ex `${foo}`\n */\nvar variable$1 = expression.extends(KIND$1v, function Variable(\n  name,\n  curly,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$1v, docs, location]);\n  this.name = name;\n  this.curly = curly || false;\n});\n\nconst KIND$1w = \"variadic\";\n\n/**\n * Introduce a list of items into the arguments of the call\n * @constructor variadic\n * @extends {Expression}\n * @property {Array|Expression} what\n * @see https://wiki.php.net/rfc/argument_unpacking\n */\nvar variadic = expression.extends(KIND$1w, function variadic(\n  what,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$1w, docs, location]);\n  this.what = what;\n});\n\nconst KIND$1x = \"while\";\n\n/**\n * Defines a while statement\n * @constructor While\n * @extends {Statement}\n * @property {Expression} test\n * @property {Statement} body\n * @property {boolean} shortForm\n */\nvar _while = statement$1.extends(KIND$1x, function While(\n  test,\n  body,\n  shortForm,\n  docs,\n  location\n) {\n  statement$1.apply(this, [KIND$1x, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.shortForm = shortForm;\n});\n\nconst KIND$1y = \"yield\";\n\n/**\n * Defines a yield generator statement\n * @constructor Yield\n * @extends {Expression}\n * @property {Expression|Null} value\n * @property {Expression|Null} key\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\nvar _yield = expression.extends(KIND$1y, function Yield(\n  value,\n  key,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$1y, docs, location]);\n  this.value = value;\n  this.key = key;\n});\n\nconst KIND$1z = \"yieldfrom\";\n\n/**\n * Defines a yield from generator statement\n * @constructor YieldFrom\n * @extends {Expression}\n * @property {Expression} value\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\nvar yieldfrom = expression.extends(KIND$1z, function YieldFrom(\n  value,\n  docs,\n  location\n) {\n  expression.apply(this, [KIND$1z, docs, location]);\n  this.value = value;\n});\n\n/**\n * ## Class hierarchy\n *\n * - [Location](#location)\n * - [Position](#position)\n * - [Node](#node)\n *   - [Noop](#noop)\n *   - [NullKeyword](#nullkeyword)\n *   - [StaticVariable](#staticvariable)\n *   - [EncapsedPart](#encapsedpart)\n *   - [Constant](#constant)\n *   - [Identifier](#identifier)\n *   - [Reference](#reference)\n *     - [TypeReference](#typereference)\n *     - [ParentReference](#parentreference)\n *     - [StaticReference](#staticreference)\n *     - [SelfReference](#selfreference)\n *     - [Name](#name)\n *   - [TraitUse](#traituse)\n *   - [TraitAlias](#traitalias)\n *   - [TraitPrecedence](#traitprecedence)\n *   - [Comment](#comment)\n *     - [CommentLine](#commentline)\n *     - [CommentBlock](#commentblock)\n *   - [Error](#error)\n *   - [Expression](#expression)\n *     - [Entry](#entry)\n *     - [ArrowFunc](#arrowfunc)\n *     - [Closure](#closure)\n *     - [ByRef](#byref)\n *     - [Silent](#silent)\n *     - [RetIf](#retif)\n *     - [New](#new)\n *     - [Include](#include)\n *     - [Call](#call)\n *     - [Eval](#eval)\n *     - [Exit](#exit)\n *     - [Clone](#clone)\n *     - [Assign](#assign)\n *     - [AssignRef](#assignref)\n *     - [Array](#array)\n *     - [List](#list)\n *     - [Variable](#variable)\n *     - [Variadic](#variadic)\n *     - [Yield](#yield)\n *     - [YieldFrom](#yieldfrom)\n *     - [Print](#print)\n *     - [Isset](#isset)\n *     - [Empty](#empty)\n *     - [Lookup](#lookup)\n *       - [PropertyLookup](#propertylookup)\n *       - [StaticLookup](#staticlookup)\n *       - [OffsetLookup](#offsetlookup)\n *     - [Operation](#operation)\n *       - [Pre](#pre)\n *       - [Post](#post)\n *       - [Bin](#bin)\n *       - [Unary](#unary)\n *       - [Cast](#cast)\n *     - [Literal](#literal)\n *       - [Boolean](#boolean)\n *       - [String](#string)\n *       - [Number](#number)\n *       - [Inline](#inline)\n *       - [Magic](#magic)\n *       - [Nowdoc](#nowdoc)\n *       - [Encapsed](#encapsed)\n *   - [Statement](#statement)\n *     - [ConstantStatement](#constantstatement)\n *       - [ClassConstant](#classconstant)\n *     - [Return](#return)\n *     - [Label](#label)\n *     - [Continue](#continue)\n *     - [Case](#case)\n *     - [Break](#break)\n *     - [Echo](#echo)\n *     - [Unset](#unset)\n *     - [Halt](#halt)\n *     - [Declare](#declare)\n *     - [Global](#global)\n *     - [Static](#static)\n *     - [If](#if)\n *     - [Do](#do)\n *     - [While](#while)\n *     - [For](#for)\n *     - [Foreach](#foreach)\n *     - [Switch](#switch)\n *     - [Goto](#goto)\n *     - [Try](#try)\n *     - [Catch](#catch)\n *     - [Throw](#throw)\n *     - [UseGroup](#usegroup)\n *     - [UseItem](#useitem)\n *     - [Block](#block)\n *       - [Program](#program)\n *       - [Namespace](#namespace)\n *     - [PropertyStatement](#propertystatement)\n *     - [Property](#property)\n *     - [Declaration](#declaration)\n *       - [Class](#class)\n *       - [Interface](#interface)\n *       - [Trait](#trait)\n *       - [Function](#function)\n *         - [Method](#method)\n *       - [Parameter](#parameter)\n * ---\n */\n\n/**\n * The AST builder class\n * @constructor AST\n * @tutorial AST\n * @property {Boolean} withPositions - Should locate any node (by default false)\n * @property {Boolean} withSource - Should extract the node original code (by default false)\n */\nconst AST = function (withPositions, withSource) {\n  this.withPositions = withPositions;\n  this.withSource = withSource;\n};\n\n/**\n * Create a position node from specified parser\n * including it's lexer current state\n * @param {Parser}\n * @return {Position}\n * @private\n */\nAST.prototype.position = function (parser) {\n  return new position(\n    parser.lexer.yylloc.first_line,\n    parser.lexer.yylloc.first_column,\n    parser.lexer.yylloc.first_offset\n  );\n};\n\n// operators in ascending order of precedence\nAST.precedence = {};\n[\n  [\"or\"],\n  [\"xor\"],\n  [\"and\"],\n  [\"=\"],\n  [\"?\"],\n  [\"??\"],\n  [\"||\"],\n  [\"&&\"],\n  [\"|\"],\n  [\"^\"],\n  [\"&\"],\n  [\"==\", \"!=\", \"===\", \"!==\", /* '<>', */ \"<=>\"],\n  [\"<\", \"<=\", \">\", \">=\"],\n  [\"<<\", \">>\"],\n  [\"+\", \"-\", \".\"],\n  [\"*\", \"/\", \"%\"],\n  [\"!\"],\n  [\"instanceof\"],\n  [\"cast\", \"silent\"],\n  [\"**\"],\n  // TODO: [ (array)\n  // TODO: clone, new\n].forEach(function (list, index) {\n  list.forEach(function (operator) {\n    AST.precedence[operator] = index + 1;\n  });\n});\n\nAST.prototype.isRightAssociative = function (operator) {\n  return operator === \"**\" || operator === \"??\";\n};\n\n/**\n * Change parent node informations after swapping childs\n */\nAST.prototype.swapLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    target.loc.start = first.loc.start;\n    target.loc.end = last.loc.end;\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(\n        target.loc.start.offset,\n        target.loc.end.offset\n      );\n    }\n  }\n};\n\n/**\n * Includes locations from first & last into the target\n */\nAST.prototype.resolveLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    if (target.loc.start.offset > first.loc.start.offset) {\n      target.loc.start = first.loc.start;\n    }\n    if (target.loc.end.offset < last.loc.end.offset) {\n      target.loc.end = last.loc.end;\n    }\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(\n        target.loc.start.offset,\n        target.loc.end.offset\n      );\n    }\n  }\n};\n\n/**\n * Check and fix precence, by default using right\n */\nAST.prototype.resolvePrecedence = function (result, parser) {\n  let buffer, lLevel, rLevel;\n  // handling precendence\n  if (result.kind === \"call\") {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result, parser);\n  } else if (\n    result.kind === \"propertylookup\" ||\n    result.kind === \"staticlookup\" ||\n    (result.kind === \"offsetlookup\" && result.offset)\n  ) {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result.offset, parser);\n  } else if (result.kind === \"bin\") {\n    if (result.right && !result.right.parenthesizedExpression) {\n      if (result.right.kind === \"bin\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[result.right.type];\n        if (\n          lLevel &&\n          rLevel &&\n          rLevel <= lLevel &&\n          !this.isRightAssociative(result.type)\n        ) {\n          // https://github.com/glayzzle/php-parser/issues/79\n          // shift precedence\n          buffer = result.right;\n          result.right = result.right.left;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.left = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.left, buffer.right, parser);\n          result = buffer;\n        }\n      } else if (result.right.kind === \"retif\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[\"?\"];\n        if (lLevel && rLevel && rLevel <= lLevel) {\n          buffer = result.right;\n          result.right = result.right.test;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.test = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n          result = buffer;\n        }\n      }\n    }\n  } else if (\n    (result.kind === \"silent\" || result.kind === \"cast\") &&\n    result.expr &&\n    !result.expr.parenthesizedExpression\n  ) {\n    // https://github.com/glayzzle/php-parser/issues/172\n    if (result.expr.kind === \"bin\") {\n      buffer = result.expr;\n      result.expr = result.expr.left;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.left = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.left, buffer.right, parser);\n      result = buffer;\n    } else if (result.expr.kind === \"retif\") {\n      buffer = result.expr;\n      result.expr = result.expr.test;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"unary\") {\n    // https://github.com/glayzzle/php-parser/issues/75\n    if (result.what && !result.what.parenthesizedExpression) {\n      // unary precedence is allways lower\n      if (result.what.kind === \"bin\") {\n        buffer = result.what;\n        result.what = result.what.left;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.left = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.left, buffer.right, parser);\n        result = buffer;\n      } else if (result.what.kind === \"retif\") {\n        buffer = result.what;\n        result.what = result.what.test;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.test = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"retif\") {\n    // https://github.com/glayzzle/php-parser/issues/77\n    if (\n      result.falseExpr &&\n      result.falseExpr.kind === \"retif\" &&\n      !result.falseExpr.parenthesizedExpression\n    ) {\n      buffer = result.falseExpr;\n      result.falseExpr = buffer.test;\n      this.swapLocations(result, result.test, result.falseExpr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"assign\") {\n    // https://github.com/glayzzle/php-parser/issues/81\n    if (\n      result.right &&\n      result.right.kind === \"bin\" &&\n      !result.right.parenthesizedExpression\n    ) {\n      lLevel = AST.precedence[\"=\"];\n      rLevel = AST.precedence[result.right.type];\n      // only shifts with and, xor, or\n      if (lLevel && rLevel && rLevel < lLevel) {\n        buffer = result.right;\n        result.right = result.right.left;\n        buffer.left = result;\n        this.swapLocations(buffer, buffer.left, result.right, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"expressionstatement\") {\n    this.swapLocations(result, result.expression, result, parser);\n  }\n  return result;\n};\n\n/**\n * Prepares an AST node\n * @param {String|null} kind - Defines the node type\n * (if null, the kind must be passed at the function call)\n * @param {Parser} parser - The parser instance (use for extracting locations)\n * @return {Function}\n */\nAST.prototype.prepare = function (kind, docs, parser) {\n  let start = null;\n  if (this.withPositions || this.withSource) {\n    start = this.position(parser);\n  }\n  const self = this;\n  // returns the node\n  const result = function () {\n    let location = null;\n    const args = Array.prototype.slice.call(arguments);\n    args.push(docs);\n    if (self.withPositions || self.withSource) {\n      let src = null;\n      if (self.withSource) {\n        src = parser.lexer._input.substring(start.offset, parser.prev[2]);\n      }\n      // if with source, need location on swapLocations function\n      location = new location_1(\n        src,\n        start,\n        new position(parser.prev[0], parser.prev[1], parser.prev[2])\n      );\n      // last argument is allways the location\n      args.push(location);\n    }\n    // handle lazy kind definitions\n    if (!kind) {\n      kind = args.shift();\n    }\n    // build the object\n    const node = self[kind];\n    if (typeof node !== \"function\") {\n      throw new Error('Undefined node \"' + kind + '\"');\n    }\n    const astNode = Object.create(node.prototype);\n    node.apply(astNode, args);\n    result.instance = astNode;\n    if (result.trailingComments) {\n      // buffer of trailingComments\n      astNode.trailingComments = result.trailingComments;\n    }\n    if (typeof result.postBuild === \"function\") {\n      result.postBuild(astNode);\n    }\n    if (parser.debug) {\n      delete AST.stack[result.stackUid];\n    }\n    return self.resolvePrecedence(astNode, parser);\n  };\n  if (parser.debug) {\n    if (!AST.stack) {\n      AST.stack = {};\n      AST.stackUid = 1;\n    }\n    AST.stack[++AST.stackUid] = {\n      position: start,\n      stack: new Error().stack.split(\"\\n\").slice(3, 5),\n    };\n    result.stackUid = AST.stackUid;\n  }\n\n  /**\n   * Sets a list of trailing comments\n   * @param {*} docs\n   */\n  result.setTrailingComments = function (docs) {\n    if (result.instance) {\n      // already created\n      result.instance.setTrailingComments(docs);\n    } else {\n      result.trailingComments = docs;\n    }\n  };\n\n  /**\n   * Release a node without using it on the AST\n   */\n  result.destroy = function (target) {\n    if (docs) {\n      // release current docs stack\n      if (target) {\n        if (!target.leadingComments) {\n          target.leadingComments = docs;\n        } else {\n          target.leadingComments = docs.concat(target.leadingComments);\n        }\n      } else {\n        parser._docIndex = parser._docs.length - docs.length;\n      }\n    }\n    if (parser.debug) {\n      delete AST.stack[result.stackUid];\n    }\n  };\n  return result;\n};\n\nAST.prototype.checkNodes = function () {\n  const errors = [];\n  for (const k in AST.stack) {\n    if (AST.stack.hasOwnProperty(k)) {\n      errors.push(AST.stack[k]);\n    }\n  }\n  AST.stack = {};\n  return errors;\n};\n\n// Define all AST nodes\n[\n  array$1,\n  arrowfunc,\n  assign,\n  assignref,\n  bin,\n  block,\n  boolean_1,\n  _break,\n  byref,\n  call,\n  _case,\n  cast,\n  _catch,\n  _class$1,\n  classconstant,\n  clone,\n  closure,\n  comment$1,\n  commentblock,\n  commentline,\n  constant,\n  constantstatement,\n  _continue,\n  declaration,\n  declare,\n  declaredirective,\n  _do,\n  echo,\n  empty,\n  encapsed,\n  encapsedpart,\n  entry,\n  error,\n  _eval,\n  exit,\n  expression,\n  expressionstatement,\n  _for,\n  foreach,\n  _function$1,\n  global,\n  goto_1,\n  halt,\n  identifier,\n  _if$1,\n  include,\n  inline,\n  _interface,\n  isset,\n  label,\n  list,\n  literal,\n  lookup,\n  magic,\n  method,\n  name,\n  namespace$1,\n  _new,\n  node,\n  noop,\n  nowdoc,\n  nullkeyword,\n  number,\n  offsetlookup,\n  operation,\n  parameter,\n  parentreference,\n  post,\n  pre,\n  print,\n  program,\n  property$1,\n  propertylookup,\n  propertystatement,\n  reference,\n  retif,\n  _return,\n  selfreference,\n  silent,\n  statement$1,\n  _static,\n  staticvariable,\n  staticlookup,\n  staticreference,\n  string,\n  _switch$1,\n  _throw,\n  trait,\n  traitalias,\n  traitprecedence,\n  traituse,\n  _try$1,\n  typereference,\n  unary,\n  unset,\n  usegroup,\n  useitem,\n  variable$1,\n  variadic,\n  _while,\n  _yield,\n  yieldfrom,\n].forEach(function (ctor) {\n  AST.prototype[ctor.kind] = ctor;\n});\n\nvar ast = AST;\n\n/**\n * @private\n */\nfunction combine(src, to) {\n  const keys = Object.keys(src);\n  let i = keys.length;\n  while (i--) {\n    const k = keys[i];\n    const val = src[k];\n    if (val === null) {\n      delete to[k];\n    } else if (typeof val === \"function\") {\n      to[k] = val.bind(to);\n    } else if (Array.isArray(val)) {\n      to[k] = Array.isArray(to[k]) ? to[k].concat(val) : val;\n    } else if (typeof val === \"object\") {\n      to[k] = typeof to[k] === \"object\" ? combine(val, to[k]) : val;\n    } else {\n      to[k] = val;\n    }\n  }\n  return to;\n}\n\n/**\n * Initialise a new parser instance with the specified options\n *\n * @class\n * @tutorial Engine\n * @example\n * var parser = require('php-parser');\n * var instance = new parser({\n *   parser: {\n *     extractDoc: true,\n *     suppressErrors: true,\n *     version: 704 // or '7.4'\n *   },\n *   ast: {\n *     withPositions: true\n *   },\n *   lexer: {\n *     short_tags: true,\n *     asp_tags: true\n *   }\n * });\n *\n * var evalAST = instance.parseEval('some php code');\n * var codeAST = instance.parseCode('<?php some php code', 'foo.php');\n * var tokens = instance.tokenGetAll('<?php some php code');\n *\n * @param {Object} options - List of options\n * @property {Lexer} lexer\n * @property {Parser} parser\n * @property {AST} ast\n * @property {Object} tokens\n */\nconst engine = function (options) {\n  if (typeof this === \"function\") {\n    return new this(options);\n  }\n  this.tokens = tokens$2;\n  this.lexer = new lexer_1(this);\n  this.ast = new ast();\n  this.parser = new parser_1(this.lexer, this.ast);\n  if (options && typeof options === \"object\") {\n    // disable php7 from lexer if already disabled from parser\n    if (options.parser) {\n      if (!options.lexer) {\n        options.lexer = {};\n      }\n      if (options.parser.version) {\n        if (typeof options.parser.version === \"string\") {\n          let version = options.parser.version.split(\".\");\n          version = parseInt(version[0]) * 100 + parseInt(version[1]);\n          if (isNaN(version)) {\n            throw new Error(\"Bad version number : \" + options.parser.version);\n          } else {\n            options.parser.version = version;\n          }\n        } else if (typeof options.parser.version !== \"number\") {\n          throw new Error(\"Expecting a number for version\");\n        }\n        if (options.parser.version < 500 || options.parser.version > 704) {\n          throw new Error(\"Can only handle versions between 5.x to 7.x\");\n        }\n      }\n    }\n    combine(options, this);\n\n    // same version flags based on parser options\n    this.lexer.version = this.parser.version;\n  }\n};\n\n/**\n * Check if the inpyt is a buffer or a string\n * @param  {Buffer|String} buffer Input value that can be either a buffer or a string\n * @return {String}   Returns the string from input\n */\nconst getStringBuffer = function (buffer) {\n  return typeof buffer.write === \"function\" ? buffer.toString() : buffer;\n};\n\n/**\n * Creates a new instance (Helper)\n * @param {Object} options\n * @return {Engine}\n * @private\n */\nengine.create = function (options) {\n  return new engine(options);\n};\n\n/**\n * Evaluate the buffer\n * @private\n */\nengine.parseEval = function (buffer, options) {\n  const self = new engine(options);\n  return self.parseEval(buffer);\n};\n\n/**\n * Parse an evaluating mode string (no need to open php tags)\n * @param {String} buffer\n * @return {Program}\n */\nengine.prototype.parseEval = function (buffer) {\n  this.lexer.mode_eval = true;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, \"eval\");\n};\n\n/**\n * Static function that parse a php code with open/close tags\n * @private\n */\nengine.parseCode = function (buffer, filename, options) {\n  if (typeof filename === \"object\" && !options) {\n    // retro-compatibility\n    options = filename;\n    filename = \"unknown\";\n  }\n  const self = new engine(options);\n  return self.parseCode(buffer, filename);\n};\n\n/**\n * Function that parse a php code with open/close tags\n *\n * Sample code :\n * ```php\n * <?php $x = 1;\n * ```\n *\n * Usage :\n * ```js\n * var parser = require('php-parser');\n * var phpParser = new parser({\n *   // some options\n * });\n * var ast = phpParser.parseCode('...php code...', 'foo.php');\n * ```\n * @param {String} buffer - The code to be parsed\n * @param {String} filename - Filename\n * @return {Program}\n */\nengine.prototype.parseCode = function (buffer, filename) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, filename);\n};\n\n/**\n * Split the buffer into tokens\n * @private\n */\nengine.tokenGetAll = function (buffer, options) {\n  const self = new engine(options);\n  return self.tokenGetAll(buffer);\n};\n\n/**\n * Extract tokens from the specified buffer.\n * > Note that the output tokens are *STRICLY* similar to PHP function `token_get_all`\n * @param {String} buffer\n * @return {String[]} - Each item can be a string or an array with following informations [token_name, text, line_number]\n */\nengine.prototype.tokenGetAll = function (buffer) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = true;\n  buffer = getStringBuffer(buffer);\n  const EOF = this.lexer.EOF;\n  const names = this.tokens.values;\n  this.lexer.setInput(buffer);\n  let token = this.lexer.lex() || EOF;\n  const result = [];\n  while (token != EOF) {\n    let entry = this.lexer.yytext;\n    if (names.hasOwnProperty(token)) {\n      entry = [names[token], entry, this.lexer.yylloc.first_line];\n    }\n    result.push(entry);\n    token = this.lexer.lex() || EOF;\n  }\n  return result;\n};\n\n// exports the function\nvar src = engine;\n\n// makes libraries public\nvar tokens_1 = tokens$2;\nvar lexer_1$1 = lexer_1;\nvar AST_1 = ast;\nvar parser_1$1 = parser_1;\nvar combine_1 = combine;\n\n// allow the default export in index.d.ts\nvar default_1 = engine;\nsrc.tokens = tokens_1;\nsrc.lexer = lexer_1$1;\nsrc.AST = AST_1;\nsrc.parser = parser_1$1;\nsrc.combine = combine_1;\nsrc.default = default_1;\n\nvar laravel2jsClb = function laravel2jsClb(str, cb) {\n  if (typeof str !== 'string') {\n    var err = new Error('The first parameter was not a string');\n    if (!cb) throw err;\n    return cb(err);\n  }\n\n  var parser = new src({\n    parser: {\n      extractDoc: false,\n      php7: true\n    },\n    ast: {\n      withPositions: false\n    }\n  });\n\n  try {\n    var result = {};\n    var ast = parser.parseCode(str);\n\n    if (ast && ast.children && ast.children.length > 0) {\n      var returnElem = ast.children.find(function (ele) {\n        return ele.kind === 'return';\n      });\n\n      if (returnElem && returnElem.expr && returnElem.expr.kind === 'array' && returnElem.expr.items) {\n        ;\n\n        (function parseArr(items, parent) {\n          items.forEach(function (item) {\n            if (item && item.kind === 'entry' && item.key && item.key.kind === 'string' && item.key.value && item.value) {\n              if (item.value.kind === 'string') {\n                parent[item.key.value] = item.value.value || '';\n              }\n\n              if (item.value.kind === 'array' && item.value.items) {\n                parent[item.key.value] = {};\n                parseArr(item.value.items, parent[item.key.value]);\n              }\n            }\n          });\n        })(returnElem.expr.items, result);\n      }\n    }\n\n    if (cb) return cb(null, result);\n    return result;\n  } catch (e) {\n    if (cb) return cb(e);\n    throw e;\n  }\n};\n\nfunction laravel2js(str, cb) {\n  if (!cb) {\n    return new Promise(function (resolve, reject) {\n      return laravel2jsClb(str, function (err, ret) {\n        return err ? reject(err) : resolve(ret);\n      });\n    });\n  }\n\n  return laravel2jsClb(str, cb);\n}\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar js2laravelClb = function js2laravelClb(resources, cb) {\n  var result = \"<?php\\n  return [\";\n  var end = '  ];';\n\n  (function stringifyJs(obj, level) {\n    if (obj) {\n      var keys = Object.keys(obj);\n      keys.forEach(function (key, index) {\n        var value = obj[key] || '';\n\n        if (typeof value === 'string') {\n          value = value.replace(/'/g, '\\\\\\'');\n          result += \"\\n  \".concat('  '.repeat(level), \"'\").concat(key, \"' => '\").concat(value, \"'\");\n        }\n\n        if (_typeof(value) === 'object') {\n          result += \"\\n  \".concat('  '.repeat(level), \"'\").concat(key, \"' => [\");\n          stringifyJs(value, level + 1);\n          result += \"\\n  \".concat('  '.repeat(level), \"]\");\n        }\n\n        if (index + 1 < keys.length) {\n          result += ',';\n        }\n      });\n    }\n  })(resources, 1);\n\n  result += \"\\n\".concat(end);\n  if (cb) return cb(null, result);\n  return result;\n};\n\nfunction js2laravel(resources, cb) {\n  if (!cb) {\n    return new Promise(function (resolve, reject) {\n      return js2laravelClb(resources, function (err, ret) {\n        return err ? reject(err) : resolve(ret);\n      });\n    });\n  }\n\n  return js2laravelClb(resources, cb);\n}\n\nvar index = {\n  laravel2js: laravel2js,\n  js2laravel: js2laravel\n};\n\nexport default index;\nexport { js2laravel, laravel2js };\n"],"names":["MAX_LENGTH_OF_LONG","long_min_digits","process","arch","numbers","consume_NUM","ch","this","yytext","hasPoint","input","is_HEX","consume_HNUM","unput","consume_BNUM","is_NUM","offset","size","prev","undo","is_NUM_START","consume_LNUM","tok","T_DNUMBER","length","T_LNUMBER","property","matchST_LOOKING_FOR_PROPERTY","T_OBJECT_OPERATOR","is_WHITESPACE","T_WHITESPACE","is_LABEL_START","consume_LABEL","popState","T_STRING","matchST_LOOKING_FOR_VARNAME","begin","T_STRING_VARNAME","matchST_VAR_OFFSET","T_NUM_STRING","T_VARIABLE","Error","T_ENCAPSED_AND_WHITESPACE","is_TOKEN","scripting","matchST_IN_SCRIPTING","T_COMMENT","_input","T_DOC_COMMENT","consume_TOKEN","T_CONSTANT_ENCAPSED_STRING","ST_DOUBLE_QUOTES","aspTagMode","tryMatch","nextCH","conditionStack","T_CLOSE_TAG","yylineno","newline","valid_after_heredoc","valid_after_heredoc_73","concat","strings","is_HEREDOC","revert","is_TABSPACE","tChar","yyoffset","is_LABEL","yylabel","substring","includes","heredoc_label","label","finished","consume","prematch_ENDOFDOC","T_START_HEREDOC","prefix","appendToken","isDOC_MATCH","consumeLeadingSpaces","prev_ch","indentation_uses_spaces","indentation_uses_tabs","indentation","leading_ch","version","first_encaps_node","matchST_NOWDOC","T_END_HEREDOC","matchST_HEREDOC","T_DOLLAR_OPEN_CURLY_BRACES","next","consume_VARIABLE","T_CURLY_OPEN","matchST_BACKQUOTE","matchST_DOUBLE_QUOTES","utils","charCodeAt","indexOf","consume_TABSPACE","lexer","engine","tokens","names","EOF","debug","all_tokens","comment_tokens","mode_eval","asp_tags","short_tags","yyprevcol","keywords","__class__","T_CLASS_C","__trait__","T_TRAIT_C","__function__","T_FUNC_C","__method__","T_METHOD_C","__line__","T_LINE","__file__","T_FILE","__dir__","T_DIR","__namespace__","T_NS_C","exit","T_EXIT","die","function","T_FUNCTION","const","T_CONST","return","T_RETURN","try","T_TRY","catch","T_CATCH","finally","T_FINALLY","throw","T_THROW","if","T_IF","elseif","T_ELSEIF","endif","T_ENDIF","else","T_ELSE","while","T_WHILE","endwhile","T_ENDWHILE","do","T_DO","for","T_FOR","endfor","T_ENDFOR","foreach","T_FOREACH","endforeach","T_ENDFOREACH","declare","T_DECLARE","enddeclare","T_ENDDECLARE","instanceof","T_INSTANCEOF","as","T_AS","switch","T_SWITCH","endswitch","T_ENDSWITCH","case","T_CASE","default","T_DEFAULT","break","T_BREAK","continue","T_CONTINUE","goto","T_GOTO","echo","T_ECHO","print","T_PRINT","class","T_CLASS","interface","T_INTERFACE","trait","T_TRAIT","extends","T_EXTENDS","implements","T_IMPLEMENTS","new","T_NEW","clone","T_CLONE","var","T_VAR","eval","T_EVAL","include","T_INCLUDE","include_once","T_INCLUDE_ONCE","require","T_REQUIRE","require_once","T_REQUIRE_ONCE","namespace","T_NAMESPACE","use","T_USE","insteadof","T_INSTEADOF","global","T_GLOBAL","isset","T_ISSET","empty","T_EMPTY","__halt_compiler","T_HALT_COMPILER","static","T_STATIC","abstract","T_ABSTRACT","final","T_FINAL","private","T_PRIVATE","protected","T_PROTECTED","public","T_PUBLIC","unset","T_UNSET","list","T_LIST","array","T_ARRAY","callable","T_CALLABLE","or","T_LOGICAL_OR","and","T_LOGICAL_AND","xor","T_LOGICAL_XOR","castKeywords","int","T_INT_CAST","integer","real","T_DOUBLE_CAST","double","float","string","T_STRING_CAST","binary","T_ARRAY_CAST","object","T_OBJECT_CAST","bool","T_BOOL_CAST","boolean","T_UNSET_CAST","prototype","setInput","yylloc","first_offset","first_line","first_column","prev_offset","prev_line","prev_column","last_line","last_column","fn","T_FN","done","toString","i","c","text","ahead","tryMatchCaseless","toLowerCase","getState","setState","state","value","push","lex","token","T_OPEN_TAG","T_OPEN_TAG_WITH_ECHO","condition","curCondition","stateCb","pop","shift","apply","tName","values","e","console","error","stack","nextINITIAL","matchINITIAL","T_INLINE_HTML","id","T_YIELD_FROM","T_YIELD","tokenTerminals","$","nchar","T_DEC","T_MINUS_EQUAL","T_NS_SEPARATOR","T_DIV_EQUAL","T_DOUBLE_COLON","initial","yylen","castToken","castId","T_DOUBLE_ARROW","T_IS_IDENTICAL","T_IS_EQUAL","T_INC","T_PLUS_EQUAL","T_IS_NOT_IDENTICAL","T_IS_NOT_EQUAL","T_COALESCE_EQUAL","T_COALESCE","T_SL_EQUAL","T_SL","T_SPACESHIP","T_IS_SMALLER_OR_EQUAL","T_IS_GREATER_OR_EQUAL","T_SR_EQUAL","T_SR","T_MUL_EQUAL","T_POW_EQUAL","T_POW","T_CONCAT_EQUAL","T_ELLIPSIS","T_MOD_EQUAL","T_AND_EQUAL","T_BOOLEAN_AND","T_OR_EQUAL","T_BOOLEAN_OR","T_XOR_EQUAL","forEach","ext","k","lexer_1","_class","read_class_declaration_statement","result","node","flag","read_class_modifiers","expect","propName","name","propExtends","read_extends_from","propImplements","read_implements_list","read_class_body","read_class_modifier","flags","read_member_flags","read_function","variables","read_variable_list","constants","read_constant_list","read_trait_use_statement","read_doc_comment","read_comment","properties","read_list","read_optional_type","nullable","type","read_expr","items","constName","is","asInterface","idx","val","read_type","raiseError","variant","read_interface_declaration_statement","read_interface_extends_list","read_interface_body","method","read_function_declaration","parseFlags","read_trait_declaration_statement","traits","read_namespace_name","adaptations","read_trait_use_alias","methodName","read_name_list","alias","specialChar","n","r","t","f","String","fromCharCode","v","scalar","resolve_special_chars","doubleQuote","replace","$match","p1","p2","fromCodePoint","parseInt","substr","remove_heredoc_leading_whitespace_chars","check_heredoc_indentation_level","matchedChar","removementRegExp","RegExp","removementFirstEncapsNodeRegExp","textSize","leadingWhitespaceCharCount","inCoutingState","chToCheck","inCheckState","read_dereferencable_scalar","isDoubleQuote","read_static_getter","read_array","read_scalar","get_magic_constant","start","lastCh","raw","read_encapsed_string","err","read_dereferencable","expr","read_encapsed_string_item","encapsedPart","syntax","curly","varName","destroy","read_variable","read_simple_variable","read_encaps_var_offset","what","isBinary","labelStart","ast","encapsed","TYPE_SHELL","TYPE_STRING","TYPE_HEREDOC","kind","expression","toUpperCase","statement","read_top_statements","read_top_statement","Array","isArray","read_use_statement","read_const_list","expectEndOfStatement","read_namespace","read_statement","read_inner_statements","read_inner_statement","read_declare_list","directive","key","read_code_block","read_if","read_switch","read_for","read_foreach","read_while","read_do","read_optional_expr","level","current","read_variable_declarations","shortForm","expressions","read_function_list","prevChar","fixFirstLine","mode","body","directives","extractDoc","_docs","_docIndex","MODE_SHORT","MODE_BLOCK","MODE_NONE","read_try","labelNameText","labelName","top","variable","read_only","read_byref","bind","read_reference_variable","literal","recursive_variable_chain_scan","read_what","is_static_lookup","recursive_scan_loop","read_argument_list","isSquareBracket","num","isNumber","isNaN","parseFloat","isFinite","parser","extractTokens","suppressErrors","mapIt","item","entries","IDENTIFIER","Map","map","VARIABLE","SCALAR","T_MAGIC_CONST","T_MEMBER_FLAGS","EOS","EXPR","getTokenName","parse","code","filename","_errors","currentNamespace","_tokens","_lastNode","innerList","innerListForm","program","childs","read_start","errors","checkNodes","position","log","line","column","join","message","msgExpect","SyntaxError","lineNumber","fileName","columnNumber","prepare","msg","symbol","docs","slice","postBuild","self","max","setTrailingComments","includeToken","ignoreStack","showlog","split","trim","found","entry","hasOwnProperty","has","read_array_pair_list","read_array_pair","byRef","unpack","read_expr_item","read_class_name_reference","trueArg","read_expr_cast","read_isset_variable","read_isset_variables","read_internal_functions_in_yacc","stopToken","read_exit_expr","parenthesizedExpression","handleDereferencable","assign","isInner","assignList","hasItem","read_new_expr","useDie","read_inline_function","backup","isConst","read_assignref","loc","left","right","isRef","is_reference","params","read_parameter_list","returnType","args","read_new_class_name","is_variadic","closure","end","isStatic","nodeName","nameNode","read_lexical_vars","read_lexical_var_list","read_lexical_var","read_parameter","parameterName","isVariadic","read_non_empty_argument_list","wasVariadic","argument","read_argument","typereference","types","test","read_if_expr","alternate","read_elseif_short","read_else_short","read_short_form","init","increment","source","read_foreach_variable","isShort","resolution","reference","RELATIVE_NAME","resolveReference","relative","read_use_type","read_use_declaration","read_use_declarations","typed","read_use_alias","aliasName","useitem","TYPE_FUNCTION","TYPE_CONST","read_switch_case_list","read_case_list","always","catches","separator","preserveFirstSeparator","itemResult","cb","byref","swapLocations","parser_1","tokens$2","location_1","Node","location","leadingComments","trailingComments","withSource","constructor","Object","create","KIND","KIND$1","array$1","KIND$2","arrowfunc","arguments","KIND$3","operator","KIND$4","assignref","KIND$5","operation","bin","KIND$7","statement$1","KIND$8","block","children","filter","Boolean","KIND$9","KIND$a","boolean_1","KIND$b","_break","KIND$c","KIND$d","call","KIND$e","_case","KIND$f","cast","KIND$g","_catch","KIND$h","Declaration","isAbstract","isFinal","visibility","declaration","KIND$i","_class$1","impl","isAnonymous","KIND$j","constantstatement","KIND$k","ClassConstant","classconstant","KIND$l","KIND$m","uses","comment$1","KIND$n","commentblock","KIND$o","commentline","KIND$p","constant","KIND$q","_continue","KIND$r","Declare","KIND$s","declaredirective","_do","KIND$u","KIND$v","expression$1","KIND$w","Encapsed","TYPE_OFFSET","KIND$x","encapsedpart","KIND$y","KIND$z","expected","KIND$A","_eval","KIND$B","KIND$C","expressionstatement","_for","KIND$E","KIND$F","_function$1","KIND$G","KIND$H","goto_1","KIND$I","halt","after","KIND$J","Identifier","identifier","_if$1","KIND$L","once","target","KIND$M","inline","KIND$N","_interface","KIND$O","KIND$P","KIND$Q","KIND$R","lookup","KIND$S","magic","KIND$T","KIND$U","KIND$V","Name","isRelative","UNQUALIFIED_NAME","QUALIFIED_NAME","FULL_QUALIFIED_NAME","KIND$W","namespace$1","withBrackets","_new","KIND$Y","noop","KIND$Z","nowdoc","KIND$_","nullkeyword","KIND$$","number","KIND$10","offsetlookup","KIND$11","parameter","variadic","KIND$12","parentreference","KIND$13","post","pre","KIND$15","KIND$16","comments","KIND$17","property$1","KIND$18","propertylookup","KIND$19","PropertyStatement","propertystatement","KIND$1a","retif","trueExpr","falseExpr","KIND$1b","_return","KIND$1c","selfreference","KIND$1d","silent","KIND$1e","_static","KIND$1f","staticvariable","defaultValue","KIND$1g","staticlookup","KIND$1h","staticreference","KIND$1i","unicode","KIND$1j","_switch$1","KIND$1k","_throw","KIND$1l","KIND$1m","traitalias","KIND$1n","traitprecedence","instead","KIND$1o","traituse","_try$1","KIND$1q","TypeReference","KIND$1r","unary","KIND$1s","KIND$1t","usegroup","KIND$1u","UseItem","KIND$1v","variable$1","KIND$1w","KIND$1x","_while","KIND$1y","_yield","KIND$1z","yieldfrom","AST","withPositions","precedence","index","isRightAssociative","first","last","resolveLocations","resolvePrecedence","buffer","lLevel","rLevel","src","astNode","instance","stackUid","ctor","combine","to","keys","options","getStringBuffer","write","parseEval","parseCode","tokenGetAll","tokens_1","lexer_1$1","AST_1","parser_1$1","combine_1","default_1","laravel2jsClb","str","php7","returnElem","find","ele","parseArr","parent","laravel2js","Promise","resolve","reject","ret","_typeof","obj","Symbol","iterator","js2laravelClb","resources","stringifyJs","repeat","js2laravel"],"sourceRoot":""}