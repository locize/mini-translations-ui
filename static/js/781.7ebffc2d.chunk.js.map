{"version":3,"file":"static/js/781.7ebffc2d.chunk.js","mappings":"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","sources":["../../../node_modules/iconv-lite/encodings/dbcs-codec.js","../../../node_modules/iconv-lite/encodings/dbcs-data.js","../../../node_modules/iconv-lite/encodings/index.js","../../../node_modules/iconv-lite/encodings/internal.js","../../../node_modules/iconv-lite/encodings/sbcs-codec.js","../../../node_modules/iconv-lite/encodings/sbcs-data-generated.js","../../../node_modules/iconv-lite/encodings/sbcs-data.js","../../../node_modules/iconv-lite/encodings/utf16.js","../../../node_modules/iconv-lite/encodings/utf7.js","../../../node_modules/iconv-lite/lib/bom-handling.js","../../../node_modules/iconv-lite/lib/index.js","../../../node_modules/safer-buffer/safer.js"],"sourcesContent":["\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.\n// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.\n// To save memory and loading time, we read table files only when requested.\n\nexports._dbcs = DBCSCodec;\n\nvar UNASSIGNED = -1,\n    GB18030_CODE = -2,\n    SEQ_START  = -10,\n    NODE_START = -1000,\n    UNASSIGNED_NODE = new Array(0x100),\n    DEF_CHAR = -1;\n\nfor (var i = 0; i < 0x100; i++)\n    UNASSIGNED_NODE[i] = UNASSIGNED;\n\n\n// Class DBCSCodec reads and initializes mapping tables.\nfunction DBCSCodec(codecOptions, iconv) {\n    this.encodingName = codecOptions.encodingName;\n    if (!codecOptions)\n        throw new Error(\"DBCS codec is called without the data.\")\n    if (!codecOptions.table)\n        throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\n\n    // Load tables.\n    var mappingTable = codecOptions.table();\n\n\n    // Decode tables: MBCS -> Unicode.\n\n    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.\n    // Trie root is decodeTables[0].\n    // Values: >=  0 -> unicode character code. can be > 0xFFFF\n    //         == UNASSIGNED -> unknown/unassigned sequence.\n    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.\n    //         <= NODE_START -> index of the next node in our trie to process next byte.\n    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.\n    this.decodeTables = [];\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.\n\n    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. \n    this.decodeTableSeq = [];\n\n    // Actual mapping tables consist of chunks. Use them to fill up decode tables.\n    for (var i = 0; i < mappingTable.length; i++)\n        this._addDecodeChunk(mappingTable[i]);\n\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\n\n    \n    // Encode tables: Unicode -> DBCS.\n\n    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.\n    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.\n    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).\n    //         == UNASSIGNED -> no conversion found. Output a default char.\n    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.\n    this.encodeTable = [];\n    \n    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of\n    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key\n    // means end of sequence (needed when one sequence is a strict subsequence of another).\n    // Objects are kept separately from encodeTable to increase performance.\n    this.encodeTableSeq = [];\n\n    // Some chars can be decoded, but need not be encoded.\n    var skipEncodeChars = {};\n    if (codecOptions.encodeSkipVals)\n        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\n            var val = codecOptions.encodeSkipVals[i];\n            if (typeof val === 'number')\n                skipEncodeChars[val] = true;\n            else\n                for (var j = val.from; j <= val.to; j++)\n                    skipEncodeChars[j] = true;\n        }\n        \n    // Use decode trie to recursively fill out encode tables.\n    this._fillEncodeTable(0, 0, skipEncodeChars);\n\n    // Add more encoding pairs when needed.\n    if (codecOptions.encodeAdd) {\n        for (var uChar in codecOptions.encodeAdd)\n            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\n                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\n    }\n\n    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = \"?\".charCodeAt(0);\n\n\n    // Load & create GB18030 tables when needed.\n    if (typeof codecOptions.gb18030 === 'function') {\n        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.\n\n        // Add GB18030 decode tables.\n        var thirdByteNodeIdx = this.decodeTables.length;\n        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        var fourthByteNodeIdx = this.decodeTables.length;\n        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        for (var i = 0x81; i <= 0xFE; i++) {\n            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];\n            var secondByteNode = this.decodeTables[secondByteNodeIdx];\n            for (var j = 0x30; j <= 0x39; j++)\n                secondByteNode[j] = NODE_START - thirdByteNodeIdx;\n        }\n        for (var i = 0x81; i <= 0xFE; i++)\n            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;\n        for (var i = 0x30; i <= 0x39; i++)\n            fourthByteNode[i] = GB18030_CODE\n    }        \n}\n\nDBCSCodec.prototype.encoder = DBCSEncoder;\nDBCSCodec.prototype.decoder = DBCSDecoder;\n\n// Decoder helpers\nDBCSCodec.prototype._getDecodeTrieNode = function(addr) {\n    var bytes = [];\n    for (; addr > 0; addr >>= 8)\n        bytes.push(addr & 0xFF);\n    if (bytes.length == 0)\n        bytes.push(0);\n\n    var node = this.decodeTables[0];\n    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.\n        var val = node[bytes[i]];\n\n        if (val == UNASSIGNED) { // Create new node.\n            node[bytes[i]] = NODE_START - this.decodeTables.length;\n            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\n        }\n        else if (val <= NODE_START) { // Existing node.\n            node = this.decodeTables[NODE_START - val];\n        }\n        else\n            throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\n    }\n    return node;\n}\n\n\nDBCSCodec.prototype._addDecodeChunk = function(chunk) {\n    // First element of chunk is the hex mbcs code where we start.\n    var curAddr = parseInt(chunk[0], 16);\n\n    // Choose the decoding node where we'll write our chars.\n    var writeTable = this._getDecodeTrieNode(curAddr);\n    curAddr = curAddr & 0xFF;\n\n    // Write all other elements of the chunk to the table.\n    for (var k = 1; k < chunk.length; k++) {\n        var part = chunk[k];\n        if (typeof part === \"string\") { // String, write as-is.\n            for (var l = 0; l < part.length;) {\n                var code = part.charCodeAt(l++);\n                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate\n                    var codeTrail = part.charCodeAt(l++);\n                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)\n                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\n                    else\n                        throw new Error(\"Incorrect surrogate pair in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n                }\n                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)\n                    var len = 0xFFF - code + 2;\n                    var seq = [];\n                    for (var m = 0; m < len; m++)\n                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.\n\n                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\n                    this.decodeTableSeq.push(seq);\n                }\n                else\n                    writeTable[curAddr++] = code; // Basic char\n            }\n        } \n        else if (typeof part === \"number\") { // Integer, meaning increasing sequence starting with prev character.\n            var charCode = writeTable[curAddr - 1] + 1;\n            for (var l = 0; l < part; l++)\n                writeTable[curAddr++] = charCode++;\n        }\n        else\n            throw new Error(\"Incorrect type '\" + typeof part + \"' given in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n    }\n    if (curAddr > 0xFF)\n        throw new Error(\"Incorrect chunk in \"  + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\n}\n\n// Encoder helpers\nDBCSCodec.prototype._getEncodeBucket = function(uCode) {\n    var high = uCode >> 8; // This could be > 0xFF because of astral characters.\n    if (this.encodeTable[high] === undefined)\n        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.\n    return this.encodeTable[high];\n}\n\nDBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    if (bucket[low] <= SEQ_START)\n        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.\n    else if (bucket[low] == UNASSIGNED)\n        bucket[low] = dbcsCode;\n}\n\nDBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\n    \n    // Get the root of character tree according to first character of the sequence.\n    var uCode = seq[0];\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n\n    var node;\n    if (bucket[low] <= SEQ_START) {\n        // There's already a sequence with  - use it.\n        node = this.encodeTableSeq[SEQ_START-bucket[low]];\n    }\n    else {\n        // There was no sequence object - allocate a new one.\n        node = {};\n        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.\n        bucket[low] = SEQ_START - this.encodeTableSeq.length;\n        this.encodeTableSeq.push(node);\n    }\n\n    // Traverse the character tree, allocating new nodes as needed.\n    for (var j = 1; j < seq.length-1; j++) {\n        var oldVal = node[uCode];\n        if (typeof oldVal === 'object')\n            node = oldVal;\n        else {\n            node = node[uCode] = {}\n            if (oldVal !== undefined)\n                node[DEF_CHAR] = oldVal\n        }\n    }\n\n    // Set the leaf to given dbcsCode.\n    uCode = seq[seq.length-1];\n    node[uCode] = dbcsCode;\n}\n\nDBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\n    var node = this.decodeTables[nodeIdx];\n    for (var i = 0; i < 0x100; i++) {\n        var uCode = node[i];\n        var mbCode = prefix + i;\n        if (skipEncodeChars[mbCode])\n            continue;\n\n        if (uCode >= 0)\n            this._setEncodeChar(uCode, mbCode);\n        else if (uCode <= NODE_START)\n            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);\n        else if (uCode <= SEQ_START)\n            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\n    }\n}\n\n\n\n// == Encoder ==================================================================\n\nfunction DBCSEncoder(options, codec) {\n    // Encoder state\n    this.leadSurrogate = -1;\n    this.seqObj = undefined;\n    \n    // Static data\n    this.encodeTable = codec.encodeTable;\n    this.encodeTableSeq = codec.encodeTableSeq;\n    this.defaultCharSingleByte = codec.defCharSB;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSEncoder.prototype.write = function(str) {\n    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),\n        leadSurrogate = this.leadSurrogate,\n        seqObj = this.seqObj, nextChar = -1,\n        i = 0, j = 0;\n\n    while (true) {\n        // 0. Get next character.\n        if (nextChar === -1) {\n            if (i == str.length) break;\n            var uCode = str.charCodeAt(i++);\n        }\n        else {\n            var uCode = nextChar;\n            nextChar = -1;    \n        }\n\n        // 1. Handle surrogates.\n        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.\n            if (uCode < 0xDC00) { // We've got lead surrogate.\n                if (leadSurrogate === -1) {\n                    leadSurrogate = uCode;\n                    continue;\n                } else {\n                    leadSurrogate = uCode;\n                    // Double lead surrogate found.\n                    uCode = UNASSIGNED;\n                }\n            } else { // We've got trail surrogate.\n                if (leadSurrogate !== -1) {\n                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\n                    leadSurrogate = -1;\n                } else {\n                    // Incomplete surrogate pair - only trail surrogate found.\n                    uCode = UNASSIGNED;\n                }\n                \n            }\n        }\n        else if (leadSurrogate !== -1) {\n            // Incomplete surrogate pair - only lead surrogate found.\n            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.\n            leadSurrogate = -1;\n        }\n\n        // 2. Convert uCode character.\n        var dbcsCode = UNASSIGNED;\n        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence\n            var resCode = seqObj[uCode];\n            if (typeof resCode === 'object') { // Sequence continues.\n                seqObj = resCode;\n                continue;\n\n            } else if (typeof resCode == 'number') { // Sequence finished. Write it.\n                dbcsCode = resCode;\n\n            } else if (resCode == undefined) { // Current character is not part of the sequence.\n\n                // Try default character for this sequence\n                resCode = seqObj[DEF_CHAR];\n                if (resCode !== undefined) {\n                    dbcsCode = resCode; // Found. Write it.\n                    nextChar = uCode; // Current character will be written too in the next iteration.\n\n                } else {\n                    // TODO: What if we have no default? (resCode == undefined)\n                    // Then, we should write first char of the sequence as-is and try the rest recursively.\n                    // Didn't do it for now because no encoding has this situation yet.\n                    // Currently, just skip the sequence and write current char.\n                }\n            }\n            seqObj = undefined;\n        }\n        else if (uCode >= 0) {  // Regular character\n            var subtable = this.encodeTable[uCode >> 8];\n            if (subtable !== undefined)\n                dbcsCode = subtable[uCode & 0xFF];\n            \n            if (dbcsCode <= SEQ_START) { // Sequence start\n                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];\n                continue;\n            }\n\n            if (dbcsCode == UNASSIGNED && this.gb18030) {\n                // Use GB18030 algorithm to find character(s) to write.\n                var idx = findIdx(this.gb18030.uChars, uCode);\n                if (idx != -1) {\n                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;\n                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;\n                    newBuf[j++] = 0x30 + dbcsCode;\n                    continue;\n                }\n            }\n        }\n\n        // 3. Write dbcsCode character.\n        if (dbcsCode === UNASSIGNED)\n            dbcsCode = this.defaultCharSingleByte;\n        \n        if (dbcsCode < 0x100) {\n            newBuf[j++] = dbcsCode;\n        }\n        else if (dbcsCode < 0x10000) {\n            newBuf[j++] = dbcsCode >> 8;   // high byte\n            newBuf[j++] = dbcsCode & 0xFF; // low byte\n        }\n        else {\n            newBuf[j++] = dbcsCode >> 16;\n            newBuf[j++] = (dbcsCode >> 8) & 0xFF;\n            newBuf[j++] = dbcsCode & 0xFF;\n        }\n    }\n\n    this.seqObj = seqObj;\n    this.leadSurrogate = leadSurrogate;\n    return newBuf.slice(0, j);\n}\n\nDBCSEncoder.prototype.end = function() {\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\n        return; // All clean. Most often case.\n\n    var newBuf = Buffer.alloc(10), j = 0;\n\n    if (this.seqObj) { // We're in the sequence.\n        var dbcsCode = this.seqObj[DEF_CHAR];\n        if (dbcsCode !== undefined) { // Write beginning of the sequence.\n            if (dbcsCode < 0x100) {\n                newBuf[j++] = dbcsCode;\n            }\n            else {\n                newBuf[j++] = dbcsCode >> 8;   // high byte\n                newBuf[j++] = dbcsCode & 0xFF; // low byte\n            }\n        } else {\n            // See todo above.\n        }\n        this.seqObj = undefined;\n    }\n\n    if (this.leadSurrogate !== -1) {\n        // Incomplete surrogate pair - only lead surrogate found.\n        newBuf[j++] = this.defaultCharSingleByte;\n        this.leadSurrogate = -1;\n    }\n    \n    return newBuf.slice(0, j);\n}\n\n// Export for testing\nDBCSEncoder.prototype.findIdx = findIdx;\n\n\n// == Decoder ==================================================================\n\nfunction DBCSDecoder(options, codec) {\n    // Decoder state\n    this.nodeIdx = 0;\n    this.prevBuf = Buffer.alloc(0);\n\n    // Static data\n    this.decodeTables = codec.decodeTables;\n    this.decodeTableSeq = codec.decodeTableSeq;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSDecoder.prototype.write = function(buf) {\n    var newBuf = Buffer.alloc(buf.length*2),\n        nodeIdx = this.nodeIdx, \n        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,\n        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.\n        uCode;\n\n    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.\n        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);\n    \n    for (var i = 0, j = 0; i < buf.length; i++) {\n        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];\n\n        // Lookup in current trie node.\n        var uCode = this.decodeTables[nodeIdx][curByte];\n\n        if (uCode >= 0) { \n            // Normal character, just use it.\n        }\n        else if (uCode === UNASSIGNED) { // Unknown char.\n            // TODO: Callback with seq.\n            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).\n            uCode = this.defaultCharUnicode.charCodeAt(0);\n        }\n        else if (uCode === GB18030_CODE) {\n            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);\n            var idx = findIdx(this.gb18030.gbChars, ptr);\n            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\n        }\n        else if (uCode <= NODE_START) { // Go to next trie node.\n            nodeIdx = NODE_START - uCode;\n            continue;\n        }\n        else if (uCode <= SEQ_START) { // Output a sequence of chars.\n            var seq = this.decodeTableSeq[SEQ_START - uCode];\n            for (var k = 0; k < seq.length - 1; k++) {\n                uCode = seq[k];\n                newBuf[j++] = uCode & 0xFF;\n                newBuf[j++] = uCode >> 8;\n            }\n            uCode = seq[seq.length-1];\n        }\n        else\n            throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\n\n        // Write the character to buffer, handling higher planes using surrogate pair.\n        if (uCode > 0xFFFF) { \n            uCode -= 0x10000;\n            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);\n            newBuf[j++] = uCodeLead & 0xFF;\n            newBuf[j++] = uCodeLead >> 8;\n\n            uCode = 0xDC00 + uCode % 0x400;\n        }\n        newBuf[j++] = uCode & 0xFF;\n        newBuf[j++] = uCode >> 8;\n\n        // Reset trie node.\n        nodeIdx = 0; seqStart = i+1;\n    }\n\n    this.nodeIdx = nodeIdx;\n    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);\n    return newBuf.slice(0, j).toString('ucs2');\n}\n\nDBCSDecoder.prototype.end = function() {\n    var ret = '';\n\n    // Try to parse all remaining chars.\n    while (this.prevBuf.length > 0) {\n        // Skip 1 character in the buffer.\n        ret += this.defaultCharUnicode;\n        var buf = this.prevBuf.slice(1);\n\n        // Parse remaining as usual.\n        this.prevBuf = Buffer.alloc(0);\n        this.nodeIdx = 0;\n        if (buf.length > 0)\n            ret += this.write(buf);\n    }\n\n    this.nodeIdx = 0;\n    return ret;\n}\n\n// Binary search for GB18030. Returns largest i such that table[i] <= val.\nfunction findIdx(table, val) {\n    if (table[0] > val)\n        return -1;\n\n    var l = 0, r = table.length;\n    while (l < r-1) { // always table[l] <= val < table[r]\n        var mid = l + Math.floor((r-l+1)/2);\n        if (table[mid] <= val)\n            l = mid;\n        else\n            r = mid;\n    }\n    return l;\n}\n\n","\"use strict\";\n\n// Description of supported double byte encodings and aliases.\n// Tables are not require()-d until they are needed to speed up library load.\n// require()-s are direct to support Browserify.\n\nmodule.exports = {\n    \n    // == Japanese/ShiftJIS ====================================================\n    // All japanese encodings are based on JIS X set of standards:\n    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.\n    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. \n    //              Has several variations in 1978, 1983, 1990 and 1997.\n    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.\n    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.\n    //              2 planes, first is superset of 0208, second - revised 0212.\n    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)\n\n    // Byte encodings are:\n    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte\n    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.\n    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.\n    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.\n    //               0x00-0x7F       - lower part of 0201\n    //               0x8E, 0xA1-0xDF - upper part of 0201\n    //               (0xA1-0xFE)x2   - 0208 plane (94x94).\n    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).\n    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.\n    //               Used as-is in ISO2022 family.\n    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, \n    //                0201-1976 Roman, 0208-1978, 0208-1983.\n    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.\n    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.\n    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.\n    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.\n    //\n    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.\n    //\n    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html\n\n    'shiftjis': {\n        type: '_dbcs',\n        table: function() { return require('./tables/shiftjis.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n        encodeSkipVals: [{from: 0xED40, to: 0xF940}],\n    },\n    'csshiftjis': 'shiftjis',\n    'mskanji': 'shiftjis',\n    'sjis': 'shiftjis',\n    'windows31j': 'shiftjis',\n    'ms31j': 'shiftjis',\n    'xsjis': 'shiftjis',\n    'windows932': 'shiftjis',\n    'ms932': 'shiftjis',\n    '932': 'shiftjis',\n    'cp932': 'shiftjis',\n\n    'eucjp': {\n        type: '_dbcs',\n        table: function() { return require('./tables/eucjp.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n    },\n\n    // TODO: KDDI extension to Shift_JIS\n    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.\n    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.\n\n\n    // == Chinese/GBK ==========================================================\n    // http://en.wikipedia.org/wiki/GBK\n    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder\n\n    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936\n    'gb2312': 'cp936',\n    'gb231280': 'cp936',\n    'gb23121980': 'cp936',\n    'csgb2312': 'cp936',\n    'csiso58gb231280': 'cp936',\n    'euccn': 'cp936',\n\n    // Microsoft's CP936 is a subset and approximation of GBK.\n    'windows936': 'cp936',\n    'ms936': 'cp936',\n    '936': 'cp936',\n    'cp936': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json') },\n    },\n\n    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.\n    'gbk': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n    },\n    'xgbk': 'gbk',\n    'isoir58': 'gbk',\n\n    // GB18030 is an algorithmic extension of GBK.\n    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder\n    // http://icu-project.org/docs/papers/gb18030.html\n    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml\n    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0\n    'gb18030': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n        gb18030: function() { return require('./tables/gb18030-ranges.json') },\n        encodeSkipVals: [0x80],\n        encodeAdd: {'€': 0xA2E3},\n    },\n\n    'chinese': 'gb18030',\n\n\n    // == Korean ===============================================================\n    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.\n    'windows949': 'cp949',\n    'ms949': 'cp949',\n    '949': 'cp949',\n    'cp949': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp949.json') },\n    },\n\n    'cseuckr': 'cp949',\n    'csksc56011987': 'cp949',\n    'euckr': 'cp949',\n    'isoir149': 'cp949',\n    'korean': 'cp949',\n    'ksc56011987': 'cp949',\n    'ksc56011989': 'cp949',\n    'ksc5601': 'cp949',\n\n\n    // == Big5/Taiwan/Hong Kong ================================================\n    // There are lots of tables for Big5 and cp950. Please see the following links for history:\n    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html\n    // Variations, in roughly number of defined chars:\n    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT\n    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/\n    //  * Big5-2003 (Taiwan standard) almost superset of cp950.\n    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.\n    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. \n    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.\n    //    Plus, it has 4 combining sequences.\n    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299\n    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.\n    //    Implementations are not consistent within browsers; sometimes labeled as just big5.\n    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.\n    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31\n    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.\n    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt\n    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt\n    // \n    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder\n    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.\n\n    'windows950': 'cp950',\n    'ms950': 'cp950',\n    '950': 'cp950',\n    'cp950': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json') },\n    },\n\n    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.\n    'big5': 'big5hkscs',\n    'big5hkscs': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json').concat(require('./tables/big5-added.json')) },\n        encodeSkipVals: [0xa2cc],\n    },\n\n    'cnbig5': 'big5hkscs',\n    'csbig5': 'big5hkscs',\n    'xxbig5': 'big5hkscs',\n};\n","\"use strict\";\n\n// Update this array if you add/rename/remove files in this directory.\n// We support Browserify by skipping automatic module discovery and requiring modules directly.\nvar modules = [\n    require(\"./internal\"),\n    require(\"./utf16\"),\n    require(\"./utf7\"),\n    require(\"./sbcs-codec\"),\n    require(\"./sbcs-data\"),\n    require(\"./sbcs-data-generated\"),\n    require(\"./dbcs-codec\"),\n    require(\"./dbcs-data\"),\n];\n\n// Put all encoding/alias/codec definitions to single object and export it. \nfor (var i = 0; i < modules.length; i++) {\n    var module = modules[i];\n    for (var enc in module)\n        if (Object.prototype.hasOwnProperty.call(module, enc))\n            exports[enc] = module[enc];\n}\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  { type: \"_internal\", bomAware: true},\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n    else if (this.enc === \"cesu8\") {\n        this.enc = \"utf8\"; // Use utf8 for decoding.\n        this.encoder = InternalEncoderCesu8;\n\n        // Add decoder for versions of Node not supporting CESU-8\n        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {\n            this.decoder = InternalDecoderCesu8;\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\n        }\n    }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. Its signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype;\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return Buffer.from(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return Buffer.from(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return Buffer.from(this.prevStr, \"base64\");\n}\n\n\n//------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\nfunction InternalEncoderCesu8(options, codec) {\n}\n\nInternalEncoderCesu8.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;\n    for (var i = 0; i < str.length; i++) {\n        var charCode = str.charCodeAt(i);\n        // Naive implementation, but it works because CESU-8 is especially easy\n        // to convert from UTF-16 (which all JS strings are encoded in).\n        if (charCode < 0x80)\n            buf[bufIdx++] = charCode;\n        else if (charCode < 0x800) {\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n        else { // charCode will always be < 0x10000 in javascript.\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n    }\n    return buf.slice(0, bufIdx);\n}\n\nInternalEncoderCesu8.prototype.end = function() {\n}\n\n//------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\nfunction InternalDecoderCesu8(options, codec) {\n    this.acc = 0;\n    this.contBytes = 0;\n    this.accBytes = 0;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function(buf) {\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \n        res = '';\n    for (var i = 0; i < buf.length; i++) {\n        var curByte = buf[i];\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\n            if (contBytes > 0) { // Previous code is invalid\n                res += this.defaultCharUnicode;\n                contBytes = 0;\n            }\n\n            if (curByte < 0x80) { // Single-byte code\n                res += String.fromCharCode(curByte);\n            } else if (curByte < 0xE0) { // Two-byte code\n                acc = curByte & 0x1F;\n                contBytes = 1; accBytes = 1;\n            } else if (curByte < 0xF0) { // Three-byte code\n                acc = curByte & 0x0F;\n                contBytes = 2; accBytes = 1;\n            } else { // Four or more are not supported for CESU-8.\n                res += this.defaultCharUnicode;\n            }\n        } else { // Continuation byte\n            if (contBytes > 0) { // We're waiting for it.\n                acc = (acc << 6) | (curByte & 0x3f);\n                contBytes--; accBytes++;\n                if (contBytes === 0) {\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\n                        res += this.defaultCharUnicode;\n                    else if (accBytes === 3 && acc < 0x800)\n                        res += this.defaultCharUnicode;\n                    else\n                        // Actually add character.\n                        res += String.fromCharCode(acc);\n                }\n            } else { // Unexpected continuation byte\n                res += this.defaultCharUnicode;\n            }\n        }\n    }\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\n    return res;\n}\n\nInternalDecoderCesu8.prototype.end = function() {\n    var res = 0;\n    if (this.contBytes > 0)\n        res += this.defaultCharUnicode;\n    return res;\n}\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = Buffer.alloc(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n","\"use strict\";\n\n// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.\nmodule.exports = {\n  \"437\": \"cp437\",\n  \"737\": \"cp737\",\n  \"775\": \"cp775\",\n  \"850\": \"cp850\",\n  \"852\": \"cp852\",\n  \"855\": \"cp855\",\n  \"856\": \"cp856\",\n  \"857\": \"cp857\",\n  \"858\": \"cp858\",\n  \"860\": \"cp860\",\n  \"861\": \"cp861\",\n  \"862\": \"cp862\",\n  \"863\": \"cp863\",\n  \"864\": \"cp864\",\n  \"865\": \"cp865\",\n  \"866\": \"cp866\",\n  \"869\": \"cp869\",\n  \"874\": \"windows874\",\n  \"922\": \"cp922\",\n  \"1046\": \"cp1046\",\n  \"1124\": \"cp1124\",\n  \"1125\": \"cp1125\",\n  \"1129\": \"cp1129\",\n  \"1133\": \"cp1133\",\n  \"1161\": \"cp1161\",\n  \"1162\": \"cp1162\",\n  \"1163\": \"cp1163\",\n  \"1250\": \"windows1250\",\n  \"1251\": \"windows1251\",\n  \"1252\": \"windows1252\",\n  \"1253\": \"windows1253\",\n  \"1254\": \"windows1254\",\n  \"1255\": \"windows1255\",\n  \"1256\": \"windows1256\",\n  \"1257\": \"windows1257\",\n  \"1258\": \"windows1258\",\n  \"28591\": \"iso88591\",\n  \"28592\": \"iso88592\",\n  \"28593\": \"iso88593\",\n  \"28594\": \"iso88594\",\n  \"28595\": \"iso88595\",\n  \"28596\": \"iso88596\",\n  \"28597\": \"iso88597\",\n  \"28598\": \"iso88598\",\n  \"28599\": \"iso88599\",\n  \"28600\": \"iso885910\",\n  \"28601\": \"iso885911\",\n  \"28603\": \"iso885913\",\n  \"28604\": \"iso885914\",\n  \"28605\": \"iso885915\",\n  \"28606\": \"iso885916\",\n  \"windows874\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"win874\": \"windows874\",\n  \"cp874\": \"windows874\",\n  \"windows1250\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"win1250\": \"windows1250\",\n  \"cp1250\": \"windows1250\",\n  \"windows1251\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"win1251\": \"windows1251\",\n  \"cp1251\": \"windows1251\",\n  \"windows1252\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"win1252\": \"windows1252\",\n  \"cp1252\": \"windows1252\",\n  \"windows1253\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"win1253\": \"windows1253\",\n  \"cp1253\": \"windows1253\",\n  \"windows1254\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"win1254\": \"windows1254\",\n  \"cp1254\": \"windows1254\",\n  \"windows1255\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"win1255\": \"windows1255\",\n  \"cp1255\": \"windows1255\",\n  \"windows1256\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\"\n  },\n  \"win1256\": \"windows1256\",\n  \"cp1256\": \"windows1256\",\n  \"windows1257\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙\"\n  },\n  \"win1257\": \"windows1257\",\n  \"cp1257\": \"windows1257\",\n  \"windows1258\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"win1258\": \"windows1258\",\n  \"cp1258\": \"windows1258\",\n  \"iso88591\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28591\": \"iso88591\",\n  \"iso88592\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"cp28592\": \"iso88592\",\n  \"iso88593\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙\"\n  },\n  \"cp28593\": \"iso88593\",\n  \"iso88594\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙\"\n  },\n  \"cp28594\": \"iso88594\",\n  \"iso88595\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ\"\n  },\n  \"cp28595\": \"iso88595\",\n  \"iso88596\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������\"\n  },\n  \"cp28596\": \"iso88596\",\n  \"iso88597\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"cp28597\": \"iso88597\",\n  \"iso88598\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"cp28598\": \"iso88598\",\n  \"iso88599\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"cp28599\": \"iso88599\",\n  \"iso885910\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ\"\n  },\n  \"cp28600\": \"iso885910\",\n  \"iso885911\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"cp28601\": \"iso885911\",\n  \"iso885913\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’\"\n  },\n  \"cp28603\": \"iso885913\",\n  \"iso885914\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ\"\n  },\n  \"cp28604\": \"iso885914\",\n  \"iso885915\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28605\": \"iso885915\",\n  \"iso885916\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ\"\n  },\n  \"cp28606\": \"iso885916\",\n  \"cp437\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm437\": \"cp437\",\n  \"csibm437\": \"cp437\",\n  \"cp737\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm737\": \"cp737\",\n  \"csibm737\": \"cp737\",\n  \"cp775\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ \"\n  },\n  \"ibm775\": \"cp775\",\n  \"csibm775\": \"cp775\",\n  \"cp850\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm850\": \"cp850\",\n  \"csibm850\": \"cp850\",\n  \"cp852\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ \"\n  },\n  \"ibm852\": \"cp852\",\n  \"csibm852\": \"cp852\",\n  \"cp855\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ \"\n  },\n  \"ibm855\": \"cp855\",\n  \"csibm855\": \"cp855\",\n  \"cp856\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm856\": \"cp856\",\n  \"csibm856\": \"cp856\",\n  \"cp857\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm857\": \"cp857\",\n  \"csibm857\": \"cp857\",\n  \"cp858\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm858\": \"cp858\",\n  \"csibm858\": \"cp858\",\n  \"cp860\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm860\": \"cp860\",\n  \"csibm860\": \"cp860\",\n  \"cp861\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm861\": \"cp861\",\n  \"csibm861\": \"cp861\",\n  \"cp862\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm862\": \"cp862\",\n  \"csibm862\": \"cp862\",\n  \"cp863\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm863\": \"cp863\",\n  \"csibm863\": \"cp863\",\n  \"cp864\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�\"\n  },\n  \"ibm864\": \"cp864\",\n  \"csibm864\": \"cp864\",\n  \"cp865\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm865\": \"cp865\",\n  \"csibm865\": \"cp865\",\n  \"cp866\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ \"\n  },\n  \"ibm866\": \"cp866\",\n  \"csibm866\": \"cp866\",\n  \"cp869\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ \"\n  },\n  \"ibm869\": \"cp869\",\n  \"csibm869\": \"cp869\",\n  \"cp922\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ\"\n  },\n  \"ibm922\": \"cp922\",\n  \"csibm922\": \"cp922\",\n  \"cp1046\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�\"\n  },\n  \"ibm1046\": \"cp1046\",\n  \"csibm1046\": \"cp1046\",\n  \"cp1124\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ\"\n  },\n  \"ibm1124\": \"cp1124\",\n  \"csibm1124\": \"cp1124\",\n  \"cp1125\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ \"\n  },\n  \"ibm1125\": \"cp1125\",\n  \"csibm1125\": \"cp1125\",\n  \"cp1129\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1129\": \"cp1129\",\n  \"csibm1129\": \"cp1129\",\n  \"cp1133\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�\"\n  },\n  \"ibm1133\": \"cp1133\",\n  \"csibm1133\": \"cp1133\",\n  \"cp1161\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ \"\n  },\n  \"ibm1161\": \"cp1161\",\n  \"csibm1161\": \"cp1161\",\n  \"cp1162\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"ibm1162\": \"cp1162\",\n  \"csibm1162\": \"cp1162\",\n  \"cp1163\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1163\": \"cp1163\",\n  \"csibm1163\": \"cp1163\",\n  \"maccroatian\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ\"\n  },\n  \"maccyrillic\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"macgreek\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�\"\n  },\n  \"maciceland\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macroman\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macromania\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macthai\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����\"\n  },\n  \"macturkish\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macukraine\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"koi8r\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8u\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8ru\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8t\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"armscii8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�\"\n  },\n  \"rk1048\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"tcvn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000ÚỤ\\u0003ỪỬỮ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010ỨỰỲỶỸÝỴ\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ\"\n  },\n  \"georgianacademy\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"georgianps\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"pt154\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"viscii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001Ẳ\\u0003\\u0004ẴẪ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013Ỷ\\u0015\\u0016\\u0017\\u0018Ỹ\\u001a\\u001b\\u001c\\u001dỴ\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ\"\n  },\n  \"iso646cn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"iso646jp\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"hproman8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�\"\n  },\n  \"macintosh\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"ascii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"tis620\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  }\n}","\"use strict\";\n\n// Manually added data to be used by sbcs codec in addition to generated one.\n\nmodule.exports = {\n    // Not supported by iconv, not sure why.\n    \"10029\": \"maccenteuro\",\n    \"maccenteuro\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\"\n    },\n\n    \"808\": \"cp808\",\n    \"ibm808\": \"cp808\",\n    \"cp808\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ \"\n    },\n\n    \"mik\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n    },\n\n    // Aliases of generated encodings.\n    \"ascii8bit\": \"ascii\",\n    \"usascii\": \"ascii\",\n    \"ansix34\": \"ascii\",\n    \"ansix341968\": \"ascii\",\n    \"ansix341986\": \"ascii\",\n    \"csascii\": \"ascii\",\n    \"cp367\": \"ascii\",\n    \"ibm367\": \"ascii\",\n    \"isoir6\": \"ascii\",\n    \"iso646us\": \"ascii\",\n    \"iso646irv\": \"ascii\",\n    \"us\": \"ascii\",\n\n    \"latin1\": \"iso88591\",\n    \"latin2\": \"iso88592\",\n    \"latin3\": \"iso88593\",\n    \"latin4\": \"iso88594\",\n    \"latin5\": \"iso88599\",\n    \"latin6\": \"iso885910\",\n    \"latin7\": \"iso885913\",\n    \"latin8\": \"iso885914\",\n    \"latin9\": \"iso885915\",\n    \"latin10\": \"iso885916\",\n\n    \"csisolatin1\": \"iso88591\",\n    \"csisolatin2\": \"iso88592\",\n    \"csisolatin3\": \"iso88593\",\n    \"csisolatin4\": \"iso88594\",\n    \"csisolatincyrillic\": \"iso88595\",\n    \"csisolatinarabic\": \"iso88596\",\n    \"csisolatingreek\" : \"iso88597\",\n    \"csisolatinhebrew\": \"iso88598\",\n    \"csisolatin5\": \"iso88599\",\n    \"csisolatin6\": \"iso885910\",\n\n    \"l1\": \"iso88591\",\n    \"l2\": \"iso88592\",\n    \"l3\": \"iso88593\",\n    \"l4\": \"iso88594\",\n    \"l5\": \"iso88599\",\n    \"l6\": \"iso885910\",\n    \"l7\": \"iso885913\",\n    \"l8\": \"iso885914\",\n    \"l9\": \"iso885915\",\n    \"l10\": \"iso885916\",\n\n    \"isoir14\": \"iso646jp\",\n    \"isoir57\": \"iso646cn\",\n    \"isoir100\": \"iso88591\",\n    \"isoir101\": \"iso88592\",\n    \"isoir109\": \"iso88593\",\n    \"isoir110\": \"iso88594\",\n    \"isoir144\": \"iso88595\",\n    \"isoir127\": \"iso88596\",\n    \"isoir126\": \"iso88597\",\n    \"isoir138\": \"iso88598\",\n    \"isoir148\": \"iso88599\",\n    \"isoir157\": \"iso885910\",\n    \"isoir166\": \"tis620\",\n    \"isoir179\": \"iso885913\",\n    \"isoir199\": \"iso885914\",\n    \"isoir203\": \"iso885915\",\n    \"isoir226\": \"iso885916\",\n\n    \"cp819\": \"iso88591\",\n    \"ibm819\": \"iso88591\",\n\n    \"cyrillic\": \"iso88595\",\n\n    \"arabic\": \"iso88596\",\n    \"arabic8\": \"iso88596\",\n    \"ecma114\": \"iso88596\",\n    \"asmo708\": \"iso88596\",\n\n    \"greek\" : \"iso88597\",\n    \"greek8\" : \"iso88597\",\n    \"ecma118\" : \"iso88597\",\n    \"elot928\" : \"iso88597\",\n\n    \"hebrew\": \"iso88598\",\n    \"hebrew8\": \"iso88598\",\n\n    \"turkish\": \"iso88599\",\n    \"turkish8\": \"iso88599\",\n\n    \"thai\": \"iso885911\",\n    \"thai8\": \"iso885911\",\n\n    \"celtic\": \"iso885914\",\n    \"celtic8\": \"iso885914\",\n    \"isoceltic\": \"iso885914\",\n\n    \"tis6200\": \"tis620\",\n    \"tis62025291\": \"tis620\",\n    \"tis62025330\": \"tis620\",\n\n    \"10000\": \"macroman\",\n    \"10006\": \"macgreek\",\n    \"10007\": \"maccyrillic\",\n    \"10079\": \"maciceland\",\n    \"10081\": \"macturkish\",\n\n    \"cspc8codepage437\": \"cp437\",\n    \"cspc775baltic\": \"cp775\",\n    \"cspc850multilingual\": \"cp850\",\n    \"cspcp852\": \"cp852\",\n    \"cspc862latinhebrew\": \"cp862\",\n    \"cpgr\": \"cp869\",\n\n    \"msee\": \"cp1250\",\n    \"mscyrl\": \"cp1251\",\n    \"msansi\": \"cp1252\",\n    \"msgreek\": \"cp1253\",\n    \"msturk\": \"cp1254\",\n    \"mshebr\": \"cp1255\",\n    \"msarab\": \"cp1256\",\n    \"winbaltrim\": \"cp1257\",\n\n    \"cp20866\": \"koi8r\",\n    \"20866\": \"koi8r\",\n    \"ibm878\": \"koi8r\",\n    \"cskoi8r\": \"koi8r\",\n\n    \"cp21866\": \"koi8u\",\n    \"21866\": \"koi8u\",\n    \"ibm1168\": \"koi8u\",\n\n    \"strk10482002\": \"rk1048\",\n\n    \"tcvn5712\": \"tcvn\",\n    \"tcvn57121\": \"tcvn\",\n\n    \"gb198880\": \"iso646cn\",\n    \"cn\": \"iso646cn\",\n\n    \"csiso14jisc6220ro\": \"iso646jp\",\n    \"jisc62201969ro\": \"iso646jp\",\n    \"jp\": \"iso646jp\",\n\n    \"cshproman8\": \"hproman8\",\n    \"r8\": \"hproman8\",\n    \"roman8\": \"hproman8\",\n    \"xroman8\": \"hproman8\",\n    \"ibm1051\": \"hproman8\",\n\n    \"mac\": \"macintosh\",\n    \"csmacintosh\": \"macintosh\",\n};\n\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = Buffer.alloc(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = Buffer.alloc(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n","\"use strict\";\n\nvar BOMChar = '\\uFEFF';\n\nexports.PrependBOM = PrependBOMWrapper\nfunction PrependBOMWrapper(encoder, options) {\n    this.encoder = encoder;\n    this.addBOM = true;\n}\n\nPrependBOMWrapper.prototype.write = function(str) {\n    if (this.addBOM) {\n        str = BOMChar + str;\n        this.addBOM = false;\n    }\n\n    return this.encoder.write(str);\n}\n\nPrependBOMWrapper.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n//------------------------------------------------------------------------------\n\nexports.StripBOM = StripBOMWrapper;\nfunction StripBOMWrapper(decoder, options) {\n    this.decoder = decoder;\n    this.pass = false;\n    this.options = options || {};\n}\n\nStripBOMWrapper.prototype.write = function(buf) {\n    var res = this.decoder.write(buf);\n    if (this.pass || !res)\n        return res;\n\n    if (res[0] === BOMChar) {\n        res = res.slice(1);\n        if (typeof this.options.stripBOM === 'function')\n            this.options.stripBOM();\n    }\n\n    this.pass = true;\n    return res;\n}\n\nStripBOMWrapper.prototype.end = function() {\n    return this.decoder.end();\n}\n\n","\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = iconv._canonicalizeEncoding(encoding);\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv._canonicalizeEncoding = function(encoding) {\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n","/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n"],"names":["Buffer","require","exports","_dbcs","DBCSCodec","UNASSIGNED","SEQ_START","NODE_START","UNASSIGNED_NODE","Array","i","codecOptions","iconv","this","encodingName","Error","table","mappingTable","decodeTables","slice","decodeTableSeq","length","_addDecodeChunk","defaultCharUnicode","encodeTable","encodeTableSeq","skipEncodeChars","encodeSkipVals","val","j","from","to","_fillEncodeTable","encodeAdd","uChar","Object","prototype","hasOwnProperty","call","_setEncodeChar","charCodeAt","defCharSB","defaultCharSingleByte","gb18030","thirdByteNodeIdx","thirdByteNode","fourthByteNodeIdx","fourthByteNode","secondByteNodeIdx","secondByteNode","DBCSEncoder","options","codec","leadSurrogate","seqObj","undefined","DBCSDecoder","nodeIdx","prevBuf","alloc","findIdx","l","r","mid","Math","floor","encoder","decoder","_getDecodeTrieNode","addr","bytes","push","node","toString","chunk","curAddr","parseInt","writeTable","k","part","code","codeTrail","len","seq","m","charCode","_getEncodeBucket","uCode","high","dbcsCode","bucket","low","_setEncodeSequence","oldVal","prefix","mbCode","write","str","newBuf","nextChar","resCode","subtable","idx","uChars","gbChars","end","buf","prevBufOffset","seqStart","concat","curByte","curSeq","ptr","uCodeLead","ret","module","type","modules","enc","InternalCodec","bomAware","InternalEncoderBase64","InternalEncoderCesu8","InternalDecoderCesu8","utf8","cesu8","unicode11utf8","ucs2","utf16le","binary","base64","hex","_internal","InternalEncoder","InternalDecoder","StringDecoder","prevStr","acc","contBytes","accBytes","completeQuads","bufIdx","res","String","fromCharCode","SBCSCodec","chars","asciiString","decodeBuf","encodeBuf","SBCSEncoder","SBCSDecoder","_sbcs","idx1","idx2","Utf16BECodec","Utf16BEEncoder","Utf16BEDecoder","overflowByte","Utf16Codec","Utf16Encoder","addBOM","getEncoder","Utf16Decoder","initialBytes","initialBytesLen","detectEncoding","defaultEncoding","asciiCharsLE","asciiCharsBE","_len","min","utf16be","tmp","buf2","utf16","encoding","getDecoder","trail","Utf7Codec","utf7","unicode11utf7","Utf7Encoder","Utf7Decoder","nonDirectChars","inBase64","base64Accum","replace","encode","bind","base64Regex","base64Chars","test","plusChar","minusChar","andChar","Utf7IMAPCodec","Utf7IMAPEncoder","base64AccumIdx","Utf7IMAPDecoder","lastI","b64str","decode","canBeDecoded","utf7imap","base64IMAPChars","PrependBOMWrapper","StripBOMWrapper","pass","PrependBOM","StripBOM","stripBOM","bomHandling","encodings","skipDecodeWarning","console","error","encodingExists","getCodec","e","toEncoding","fromEncoding","_codecDataCache","_canonicalizeEncoding","codecDef","key","toLowerCase","nodeVer","process","versions","nodeVerArr","split","map","Number","buffer","safer","Safer","Uint8Array","value","encodingOrOffset","TypeError","size","fill","RangeError","kStringMaxLength","binding","constants","MAX_LENGTH","kMaxLength","MAX_STRING_LENGTH"],"sourceRoot":""}