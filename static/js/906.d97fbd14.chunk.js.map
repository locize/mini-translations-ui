{"version":3,"file":"static/js/906.d97fbd14.chunk.js","mappings":"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KyU,MAAQ,CAAC,EACPuW,CACR,EAGD,CACEmF,EACAE,EACA9S,EACAmT,EACAE,EACAE,EACAG,GACAI,GACAM,GACAE,GACA1C,GACAzC,GACAuF,GACAE,GACAE,GACAS,GACAO,GACAjmB,GACA0T,GACA2S,GACAE,GACAE,GACAE,GACAb,GACAe,GACArB,GACAhoB,GACAypB,GACAC,GACApoB,GACA0C,GACAmX,GACA+O,GACAhW,GACAmW,GACAvb,GACAlF,GACA8gB,GACAjtB,GACA2U,EACAyY,GACAC,GACAlrB,GACAqrB,GACArnB,GACAwnB,GACAE,GACAI,GACAC,GACA7oB,GACAkpB,GACAE,GACAE,GACAtoB,GACA9J,GACAkL,GACA+Y,GACAwO,GACAE,GACA7mB,GACAgnB,GACA/b,GACA9C,GACAof,GACAG,GACAC,GACA7f,EACA+f,GACAE,GACAE,GACAE,GACAE,GACAE,GACAjI,EACA/O,GACAmX,GACAE,GACAC,GACAntB,GACAye,GACA+O,GACAE,GACAG,GACApC,GACAsC,GACAI,GACAE,GACAE,GACAxJ,GACA0J,GACAE,GACAG,GACAE,GACA9pB,GACAkqB,GACAE,GACAhvB,GACAmvB,GACAE,GACAG,GACAC,GACAhZ,GACAoZ,GACAE,GACA7sB,GACAgtB,GACApO,GACAwO,GACA7a,GACAgb,GACAE,GACAE,GACAE,IACA5lB,SAAQ,SAAU6mB,GAClBhB,GAAI1rB,UAAU0sB,EAAK7gB,MAAQ6gB,CAC5B,IAED,IAAIxb,GAAMwa,GAKV,SAASiB,GAAQL,EAAKM,GAGpB,IAFA,IAAMC,EAAO5b,OAAO4b,KAAKP,GACrBvrB,EAAI8rB,EAAKv8B,OACNyQ,KAAK,CACV,IAAMgF,EAAI8mB,EAAK9rB,GACToI,EAAMmjB,EAAIvmB,GACJ,OAARoD,SACKyjB,EAAG7mB,GACc,oBAARoD,EAChByjB,EAAG7mB,GAAKoD,EAAI0G,KAAK+c,GACRrY,MAAMC,QAAQrL,GACvByjB,EAAG7mB,GAAKwO,MAAMC,QAAQoY,EAAG7mB,IAAM6mB,EAAG7mB,GAAG9T,OAA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","sources":["../../file-laravel/dist/es/index-a9f05436.js"],"sourcesContent":["/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar attribute = {\n  attributeIndex: 0,\n  attributeListDepth: {},\n  matchST_ATTRIBUTE: function () {\n    let ch = this.input();\n    if (this.is_WHITESPACE()) {\n      do {\n        ch = this.input();\n      } while (this.is_WHITESPACE());\n      this.unput(1);\n      return null;\n    }\n    switch (ch) {\n      case \"]\":\n        if (this.attributeListDepth[this.attributeIndex] === 0) {\n          delete this.attributeListDepth[this.attributeIndex];\n          this.attributeIndex--;\n          this.popState();\n        } else {\n          /* istanbul ignore next */\n          this.attributeListDepth[this.attributeIndex]--;\n        }\n        return \"]\";\n      case \"(\":\n      case \")\":\n      case \":\":\n      case \"=\":\n      case \"|\":\n      case \"&\":\n      case \"^\":\n      case \"-\":\n      case \"+\":\n      case \"*\":\n      case \"%\":\n      case \"~\":\n      case \"<\":\n      case \">\":\n      case \"!\":\n      case \".\":\n        return this.consume_TOKEN();\n      case \"[\":\n        this.attributeListDepth[this.attributeIndex]++;\n        return \"[\";\n      case \",\":\n        return \",\";\n      case '\"':\n        return this.ST_DOUBLE_QUOTES();\n      case \"'\":\n        return this.T_CONSTANT_ENCAPSED_STRING();\n      case \"/\":\n        if (this._input[this.offset] === \"/\") {\n          return this.T_COMMENT();\n        } else if (this._input[this.offset] === \"*\") {\n          this.input();\n          return this.T_DOC_COMMENT();\n        } else {\n          return this.consume_TOKEN();\n        }\n    }\n    if (this.is_LABEL_START() || ch === \"\\\\\") {\n      while (this.offset < this.size) {\n        const ch = this.input();\n        if (!(this.is_LABEL() || ch === \"\\\\\")) {\n          if (ch) this.unput(1);\n          break;\n        }\n      }\n      return this.T_STRING();\n    } else if (this.is_NUM()) {\n      return this.consume_NUM();\n    }\n\n    /* istanbul ignore next */\n    throw new Error(\n      `Bad terminal sequence \"${ch}\" at line ${this.yylineno} (offset ${this.offset})`\n    );\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar comments = {\n  /*\n   * Reads a single line comment\n   */\n  T_COMMENT: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (ch === \"\\n\" || ch === \"\\r\") {\n        return this.tok.T_COMMENT;\n      } else if (\n        ch === \"?\" &&\n        !this.aspTagMode &&\n        this._input[this.offset] === \">\"\n      ) {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      } else if (\n        ch === \"%\" &&\n        this.aspTagMode &&\n        this._input[this.offset] === \">\"\n      ) {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      }\n    }\n    return this.tok.T_COMMENT;\n  },\n  /*\n   * Behaviour : https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1927\n   */\n  T_DOC_COMMENT: function () {\n    let ch = this.input();\n    let token = this.tok.T_COMMENT;\n    if (ch === \"*\") {\n      // started with '/*' , check is next is '*'\n      ch = this.input();\n      if (this.is_WHITESPACE()) {\n        // check if next is WHITESPACE\n        token = this.tok.T_DOC_COMMENT;\n      }\n      if (ch === \"/\") {\n        return token;\n      } else {\n        this.unput(1); // reset\n      }\n    }\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch === \"*\" && this._input[this.offset] === \"/\") {\n        this.input();\n        break;\n      }\n    }\n    return token;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar initial = {\n  nextINITIAL: function () {\n    if (\n      this.conditionStack.length > 1 &&\n      this.conditionStack[this.conditionStack.length - 1] === \"INITIAL\"\n    ) {\n      // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n      this.popState();\n    } else {\n      this.begin(\"ST_IN_SCRIPTING\");\n    }\n    return this;\n  },\n  matchINITIAL: function () {\n    while (this.offset < this.size) {\n      let ch = this.input();\n      if (ch == \"<\") {\n        ch = this.ahead(1);\n        if (ch == \"?\") {\n          if (this.tryMatch(\"?=\")) {\n            this.unput(1)\n              .appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3)\n              .nextINITIAL();\n            break;\n          } else if (this.tryMatchCaseless(\"?php\")) {\n            ch = this._input[this.offset + 4];\n            if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n              this.unput(1).appendToken(this.tok.T_OPEN_TAG, 6).nextINITIAL();\n              break;\n            }\n          }\n          if (this.short_tags) {\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        } else if (this.asp_tags && ch == \"%\") {\n          if (this.tryMatch(\"%=\")) {\n            this.aspTagMode = true;\n            this.unput(1)\n              .appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3)\n              .nextINITIAL();\n            break;\n          } else {\n            this.aspTagMode = true;\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        }\n      }\n    }\n    if (this.yytext.length > 0) {\n      return this.tok.T_INLINE_HTML;\n    } else {\n      return false;\n    }\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/* istanbul ignore else  */\nlet MAX_LENGTH_OF_LONG = 10;\nlet long_min_digits = \"2147483648\";\nif (process.arch == \"x64\") {\n  MAX_LENGTH_OF_LONG = 19;\n  long_min_digits = \"9223372036854775808\";\n}\n\nvar numbers = {\n  consume_NUM: function () {\n    let ch = this.yytext[0];\n    let hasPoint = ch === \".\";\n    if (ch === \"0\") {\n      ch = this.input();\n      // check if hexa\n      if (ch === \"x\" || ch === \"X\") {\n        ch = this.input();\n        if (ch !== \"_\" && this.is_HEX()) {\n          return this.consume_HNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n        // check binary notation\n      } else if (ch === \"b\" || ch === \"B\") {\n        ch = this.input();\n        if ((ch !== \"_\" && ch === \"0\") || ch === \"1\") {\n          return this.consume_BNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n      } else if (ch === \"o\" || ch === \"O\") {\n        ch = this.input();\n        if (ch !== \"_\" && this.is_OCTAL()) {\n          return this.consume_ONUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n      } else if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n      }\n    }\n\n    while (this.offset < this.size) {\n      const prev = ch;\n      ch = this.input();\n\n      if (ch === \"_\") {\n        if (prev === \"_\") {\n          // restriction : next to underscore / 1__1;\n          this.unput(2); // keep 1\n          break;\n        }\n        if (prev === \".\") {\n          // next to decimal point  \"1._0\"\n          this.unput(1); // keep 1.\n          break;\n        }\n        if (prev === \"e\" || prev === \"E\") {\n          // next to e \"1e_10\"\n          this.unput(2); // keep 1\n          break;\n        }\n      } else if (ch === \".\") {\n        if (hasPoint) {\n          // no multiple points \"1.0.5\"\n          this.unput(1); // keep 1.0\n          break;\n        }\n        if (prev === \"_\") {\n          // next to decimal point  \"1_.0\"\n          this.unput(2); // keep 1\n          break;\n        }\n        hasPoint = true;\n        continue;\n      } else if (ch === \"e\" || ch === \"E\") {\n        if (prev === \"_\") {\n          // next to e \"1_e10\"\n          this.unput(1);\n          break;\n        }\n        let undo = 2;\n        ch = this.input();\n        if (ch === \"+\" || ch === \"-\") {\n          // 1e-5\n          undo = 3;\n          ch = this.input();\n        }\n        if (this.is_NUM_START()) {\n          this.consume_LNUM();\n          return this.tok.T_DNUMBER;\n        }\n        this.unput(ch ? undo : undo - 1); // keep only 1\n        break;\n      }\n\n      if (!this.is_NUM()) {\n        // example : 10.0a\n        if (ch) this.unput(1); // keep 10.0\n        break;\n      }\n    }\n\n    if (hasPoint) {\n      return this.tok.T_DNUMBER;\n    } else if (this.yytext.length < MAX_LENGTH_OF_LONG - 1) {\n      return this.tok.T_LNUMBER;\n    } else {\n      if (\n        this.yytext.length < MAX_LENGTH_OF_LONG ||\n        (this.yytext.length == MAX_LENGTH_OF_LONG &&\n          this.yytext < long_min_digits)\n      ) {\n        return this.tok.T_LNUMBER;\n      }\n      return this.tok.T_DNUMBER;\n    }\n  },\n  // read hexa\n  consume_HNUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_HEX()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read a generic number\n  consume_LNUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read binary\n  consume_BNUM: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch !== \"0\" && ch !== \"1\" && ch !== \"_\") {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read an octal number\n  consume_ONUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_OCTAL()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar property = {\n  matchST_LOOKING_FOR_PROPERTY: function () {\n    let ch = this.input();\n    if (ch === \"-\") {\n      ch = this.input();\n      if (ch === \">\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1296\n        return this.tok.T_OBJECT_OPERATOR;\n      }\n      if (ch) this.unput(1);\n    } else if (this.is_WHITESPACE()) {\n      return this.tok.T_WHITESPACE;\n    } else if (this.is_LABEL_START()) {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1300\n      this.consume_LABEL();\n      this.popState();\n      return this.tok.T_STRING;\n    }\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1306\n    this.popState();\n    if (ch) this.unput(1);\n    return false;\n  },\n  matchST_LOOKING_FOR_VARNAME: function () {\n    let ch = this.input();\n\n    // SHIFT STATE\n    this.popState();\n    this.begin(\"ST_IN_SCRIPTING\");\n\n    if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      ch = this.input();\n      if (ch === \"[\" || ch === \"}\") {\n        this.unput(1);\n        return this.tok.T_STRING_VARNAME;\n      } else {\n        // any char (that's started with a label sequence)\n        this.unput(this.yytext.length);\n      }\n    } else {\n      // any char (thats not a label start sequence)\n      if (ch) this.unput(1);\n    }\n    // stops looking for a varname and starts the scripting mode\n    return false;\n  },\n  matchST_VAR_OFFSET: function () {\n    const ch = this.input();\n    if (this.is_NUM_START()) {\n      this.consume_NUM();\n      return this.tok.T_NUM_STRING;\n    } else if (ch === \"]\") {\n      this.popState();\n      return \"]\";\n    } else if (ch === \"$\") {\n      this.input();\n      if (this.is_LABEL_START()) {\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        /* istanbul ignore next */\n        throw new Error(\"Unexpected terminal\");\n      }\n    } else if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      return this.tok.T_STRING;\n    } else if (\n      this.is_WHITESPACE() ||\n      ch === \"\\\\\" ||\n      ch === \"'\" ||\n      ch === \"#\"\n    ) {\n      return this.tok.T_ENCAPSED_AND_WHITESPACE;\n    } else if (\n      ch === \"[\" ||\n      ch === \"{\" ||\n      ch === \"}\" ||\n      ch === '\"' ||\n      ch === \"`\" ||\n      this.is_TOKEN()\n    ) {\n      return ch;\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"Unexpected terminal\");\n    }\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar scripting = {\n  matchST_IN_SCRIPTING: function () {\n    let ch = this.input();\n    switch (ch) {\n      case \" \":\n      case \"\\t\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\r\\n\":\n        return this.T_WHITESPACE();\n      case \"#\":\n        if (this.version >= 800 && this._input[this.offset] === \"[\") {\n          this.input();\n          this.attributeListDepth[++this.attributeIndex] = 0;\n          this.begin(\"ST_ATTRIBUTE\");\n          return this.tok.T_ATTRIBUTE;\n        }\n        return this.T_COMMENT();\n      case \"/\":\n        if (this._input[this.offset] === \"/\") {\n          return this.T_COMMENT();\n        } else if (this._input[this.offset] === \"*\") {\n          this.input();\n          return this.T_DOC_COMMENT();\n        }\n        return this.consume_TOKEN();\n      case \"'\":\n        return this.T_CONSTANT_ENCAPSED_STRING();\n      case '\"':\n        return this.ST_DOUBLE_QUOTES();\n      case \"`\":\n        this.begin(\"ST_BACKQUOTE\");\n        return \"`\";\n      case \"?\":\n        if (!this.aspTagMode && this.tryMatch(\">\")) {\n          this.input();\n          const nextCH = this._input[this.offset];\n          if (nextCH === \"\\n\" || nextCH === \"\\r\") this.input();\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n          return this.tok.T_CLOSE_TAG;\n        }\n        return this.consume_TOKEN();\n      case \"%\":\n        if (this.aspTagMode && this._input[this.offset] === \">\") {\n          this.input(); // consume the '>'\n          ch = this._input[this.offset]; // read next\n          if (ch === \"\\n\" || ch === \"\\r\") {\n            this.input(); // consume the newline\n          }\n          this.aspTagMode = false;\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n          return this.tok.T_CLOSE_TAG;\n        }\n        return this.consume_TOKEN();\n      case \"{\":\n        this.begin(\"ST_IN_SCRIPTING\");\n        return \"{\";\n      case \"}\":\n        if (this.conditionStack.length > 2) {\n          // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n          this.popState();\n        }\n        return \"}\";\n      default:\n        if (ch === \".\") {\n          ch = this.input();\n          if (this.is_NUM_START()) {\n            return this.consume_NUM();\n          } else {\n            if (ch) this.unput(1);\n          }\n        }\n        if (this.is_NUM_START()) {\n          return this.consume_NUM();\n        } else if (this.is_LABEL_START()) {\n          return this.consume_LABEL().T_STRING();\n        } else if (this.is_TOKEN()) {\n          return this.consume_TOKEN();\n        }\n    }\n    throw new Error(\n      'Bad terminal sequence \"' +\n        ch +\n        '\" at line ' +\n        this.yylineno +\n        \" (offset \" +\n        this.offset +\n        \")\"\n    );\n  },\n\n  T_WHITESPACE: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n        continue;\n      }\n      if (ch) this.unput(1);\n      break;\n    }\n    return this.tok.T_WHITESPACE;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nconst newline = [\"\\n\", \"\\r\"];\nconst valid_after_heredoc = [\"\\n\", \"\\r\", \";\"];\nconst valid_after_heredoc_73 = valid_after_heredoc.concat([\n  \"\\t\",\n  \" \",\n  \",\",\n  \"]\",\n  \")\",\n  \"/\",\n  \"=\",\n  \"!\",\n]);\n\nvar strings = {\n  T_CONSTANT_ENCAPSED_STRING: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == \"'\") {\n        break;\n      }\n    }\n    return this.tok.T_CONSTANT_ENCAPSED_STRING;\n  },\n  // check if matching a HEREDOC state\n  is_HEREDOC: function () {\n    const revert = this.offset;\n    if (\n      this._input[this.offset - 1] === \"<\" &&\n      this._input[this.offset] === \"<\" &&\n      this._input[this.offset + 1] === \"<\"\n    ) {\n      this.offset += 3;\n\n      // optional tabs / spaces\n      if (this.is_TABSPACE()) {\n        while (this.offset < this.size) {\n          this.offset++;\n          if (!this.is_TABSPACE()) {\n            break;\n          }\n        }\n      }\n\n      // optional quotes\n      let tChar = this._input[this.offset - 1];\n      if (tChar === \"'\" || tChar === '\"') {\n        this.offset++;\n      } else {\n        tChar = null;\n      }\n\n      // required label\n      if (this.is_LABEL_START()) {\n        let yyoffset = this.offset - 1;\n        while (this.offset < this.size) {\n          this.offset++;\n          if (!this.is_LABEL()) {\n            break;\n          }\n        }\n        const yylabel = this._input.substring(yyoffset, this.offset - 1);\n        if (!tChar || tChar === this._input[this.offset - 1]) {\n          // required ending quote\n          if (tChar) this.offset++;\n          // require newline\n          if (newline.includes(this._input[this.offset - 1])) {\n            // go go go\n            this.heredoc_label.label = yylabel;\n            this.heredoc_label.length = yylabel.length;\n            this.heredoc_label.finished = false;\n            yyoffset = this.offset - revert;\n            this.offset = revert;\n            this.consume(yyoffset);\n            if (tChar === \"'\") {\n              this.begin(\"ST_NOWDOC\");\n            } else {\n              this.begin(\"ST_HEREDOC\");\n            }\n            // prematch to get the indentation information from end of doc\n            this.prematch_ENDOFDOC();\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n      }\n    }\n    this.offset = revert;\n    return false;\n  },\n  ST_DOUBLE_QUOTES: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == '\"') {\n        break;\n      } else if (ch == \"$\") {\n        ch = this.input();\n        if (ch == \"{\" || this.is_LABEL_START()) {\n          this.unput(2);\n          break;\n        }\n        if (ch) this.unput(1);\n      } else if (ch == \"{\") {\n        ch = this.input();\n        if (ch == \"$\") {\n          this.unput(2);\n          break;\n        }\n        if (ch) this.unput(1);\n      }\n    }\n    if (ch == '\"') {\n      return this.tok.T_CONSTANT_ENCAPSED_STRING;\n    } else {\n      let prefix = 1;\n      if (this.yytext[0] === \"b\" || this.yytext[0] === \"B\") {\n        prefix = 2;\n      }\n      if (this.yytext.length > 2) {\n        this.appendToken(\n          this.tok.T_ENCAPSED_AND_WHITESPACE,\n          this.yytext.length - prefix\n        );\n      }\n      this.unput(this.yytext.length - prefix);\n      this.begin(\"ST_DOUBLE_QUOTES\");\n      return this.yytext;\n    }\n  },\n\n  // check if its a DOC end sequence\n  isDOC_MATCH: function (offset, consumeLeadingSpaces) {\n    // @fixme : check if out of text limits\n\n    // consumeLeadingSpaces is false happen DOC prematch END HEREDOC stage.\n\n    // Ensure current state is really after a new line break, not after a such as ${variables}\n    const prev_ch = this._input[offset - 2];\n    if (!newline.includes(prev_ch)) {\n      return false;\n    }\n\n    // skip leading spaces or tabs\n    let indentation_uses_spaces = false;\n    let indentation_uses_tabs = false;\n    // reset heredoc_label structure\n    let indentation = 0;\n    let leading_ch = this._input[offset - 1];\n\n    if (this.version >= 703) {\n      while (leading_ch === \"\\t\" || leading_ch === \" \") {\n        if (leading_ch === \" \") {\n          indentation_uses_spaces = true;\n        } else if (leading_ch === \"\\t\") {\n          indentation_uses_tabs = true;\n        }\n\n        leading_ch = this._input[offset + indentation];\n        indentation++;\n      }\n\n      // Move offset to skip leading whitespace\n      offset = offset + indentation;\n\n      // return out if there was only whitespace on this line\n      if (newline.includes(this._input[offset - 1])) {\n        return false;\n      }\n    }\n\n    if (\n      this._input.substring(\n        offset - 1,\n        offset - 1 + this.heredoc_label.length\n      ) === this.heredoc_label.label\n    ) {\n      const ch = this._input[offset - 1 + this.heredoc_label.length];\n      if (\n        (this.version >= 703\n          ? valid_after_heredoc_73\n          : valid_after_heredoc\n        ).includes(ch)\n      ) {\n        if (consumeLeadingSpaces) {\n          this.consume(indentation);\n          // https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes\n          if (indentation_uses_spaces && indentation_uses_tabs) {\n            throw new Error(\n              \"Parse error:  mixing spaces and tabs in ending marker at line \" +\n                this.yylineno +\n                \" (offset \" +\n                this.offset +\n                \")\"\n            );\n          }\n        } else {\n          // Called in prematch_ENDOFDOC\n          this.heredoc_label.indentation = indentation;\n          this.heredoc_label.indentation_uses_spaces = indentation_uses_spaces;\n          this.heredoc_label.first_encaps_node = true;\n        }\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /*\n   * Prematch the end of HEREDOC/NOWDOC end tag to preset the\n   * context of this.heredoc_label\n   */\n  prematch_ENDOFDOC: function () {\n    // reset heredoc\n    this.heredoc_label.indentation_uses_spaces = false;\n    this.heredoc_label.indentation = 0;\n    this.heredoc_label.first_encaps_node = true;\n    let offset = this.offset + 1;\n\n    while (offset < this._input.length) {\n      // if match heredoc_label structrue will be set\n      if (this.isDOC_MATCH(offset, false)) {\n        return;\n      }\n\n      if (!newline.includes(this._input[offset - 1])) {\n        // skip one line\n        while (\n          !newline.includes(this._input[offset++]) &&\n          offset < this._input.length\n        ) {\n          // skip\n        }\n      }\n\n      offset++;\n    }\n  },\n\n  matchST_NOWDOC: function () {\n    // edge case : empty now doc\n    if (this.isDOC_MATCH(this.offset, true)) {\n      // @fixme : never reached (may be caused by quotes)\n      this.consume(this.heredoc_label.length);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    // SCANNING CONTENTS\n    let ch = this._input[this.offset - 1];\n    while (this.offset < this.size) {\n      if (newline.includes(ch)) {\n        ch = this.input();\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else {\n        ch = this.input();\n      }\n    }\n    // too bad ! reached end of document (will get a parse error)\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  matchST_HEREDOC: function () {\n    // edge case : empty here doc\n    let ch = this.input();\n    if (this.isDOC_MATCH(this.offset, true)) {\n      this.consume(this.heredoc_label.length - 1);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    // SCANNING CONTENTS\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        ch = this.input(); // ignore next\n        if (!newline.includes(ch)) {\n          ch = this.input();\n        }\n      }\n\n      if (newline.includes(ch)) {\n        ch = this.input();\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          // start of ${\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n          //console.log(this.yytext);\n        }\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n      } else {\n        ch = this.input();\n      }\n    }\n\n    // too bad ! reached end of document (will get a parse error)\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  consume_VARIABLE: function () {\n    this.consume_LABEL();\n    const ch = this.input();\n    if (ch == \"[\") {\n      this.unput(1);\n      this.begin(\"ST_VAR_OFFSET\");\n      return this.tok.T_VARIABLE;\n    } else if (ch === \"-\") {\n      if (this.input() === \">\") {\n        this.input();\n        if (this.is_LABEL_START()) {\n          this.begin(\"ST_LOOKING_FOR_PROPERTY\");\n        }\n        this.unput(3);\n        return this.tok.T_VARIABLE;\n      } else {\n        this.unput(2);\n      }\n    } else {\n      if (ch) this.unput(1);\n    }\n    return this.tok.T_VARIABLE;\n  },\n  // HANDLES BACKQUOTES\n  matchST_BACKQUOTE: function () {\n    let ch = this.input();\n    if (ch === \"$\") {\n      ch = this.input();\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        const tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === \"`\") {\n      this.popState();\n      return \"`\";\n    }\n\n    // any char\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === \"`\") {\n        this.unput(1);\n        this.popState();\n        this.appendToken(\"`\", 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n        continue;\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n        continue;\n      }\n      ch = this.input();\n    }\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  matchST_DOUBLE_QUOTES: function () {\n    let ch = this.input();\n    if (ch === \"$\") {\n      ch = this.input();\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        const tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === '\"') {\n      this.popState();\n      return '\"';\n    }\n\n    // any char\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === '\"') {\n        this.unput(1);\n        this.popState();\n        this.appendToken('\"', 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n        if (ch) this.unput(1);\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            // @fixme : yytext = '\"{$' (this.yytext.length > 3)\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n        if (ch) this.unput(1);\n      }\n      ch = this.input();\n    }\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar tokens = {\n  T_STRING: function () {\n    const token = this.yytext.toLowerCase();\n    let id = this.keywords[token];\n    if (typeof id !== \"number\") {\n      if (token === \"yield\") {\n        if (this.version >= 700 && this.tryMatch(\" from\")) {\n          this.consume(5);\n          id = this.tok.T_YIELD_FROM;\n        } else {\n          id = this.tok.T_YIELD;\n        }\n      } else {\n        id = this.tok.T_STRING;\n        if (token === \"b\" || token === \"B\") {\n          const ch = this.input();\n          if (ch === '\"') {\n            return this.ST_DOUBLE_QUOTES();\n          } else if (ch === \"'\") {\n            return this.T_CONSTANT_ENCAPSED_STRING();\n          } else if (ch) {\n            this.unput(1);\n          }\n        }\n      }\n    }\n\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1546\n    if (id === this.tok.T_ENUM) {\n      if (this.version < 801) {\n        return this.tok.T_STRING;\n      }\n      const initial = this.offset;\n      let ch = this.input();\n      while (ch == \" \") {\n        ch = this.input();\n      }\n      let isEnum = false;\n      if (this.is_LABEL_START()) {\n        while (this.is_LABEL()) {\n          ch += this.input();\n        }\n        const label = ch.slice(0, -1).toLowerCase();\n        isEnum = label !== \"extends\" && label !== \"implements\";\n      }\n\n      this.unput(this.offset - initial);\n      return isEnum ? this.tok.T_ENUM : this.tok.T_STRING;\n    }\n\n    if (this.offset < this.size && id !== this.tok.T_YIELD_FROM) {\n      // If immediately followed by a backslash, this is a T_NAME_RELATIVE or T_NAME_QUALIFIED.\n      let ch = this.input();\n      if (ch === \"\\\\\") {\n        id =\n          token === \"namespace\"\n            ? this.tok.T_NAME_RELATIVE\n            : this.tok.T_NAME_QUALIFIED;\n        do {\n          if (this._input[this.offset] === \"{\") {\n            // e.g. when using group use statements, the last '\\\\' is followed by a '{'\n            this.input();\n            break;\n          }\n\n          this.consume_LABEL();\n          ch = this.input();\n        } while (ch === \"\\\\\");\n      }\n\n      if (ch) {\n        this.unput(1);\n      }\n    }\n\n    return id;\n  },\n  // reads a custom token\n  consume_TOKEN: function () {\n    const ch = this._input[this.offset - 1];\n    const fn = this.tokenTerminals[ch];\n    if (fn) {\n      return fn.apply(this, []);\n    } else {\n      return this.yytext;\n    }\n  },\n  // list of special char tokens\n  tokenTerminals: {\n    $: function () {\n      this.offset++;\n      if (this.is_LABEL_START()) {\n        this.offset--;\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        this.offset--;\n        return \"$\";\n      }\n    },\n    \"-\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \">\") {\n        this.begin(\"ST_LOOKING_FOR_PROPERTY\").input();\n        return this.tok.T_OBJECT_OPERATOR;\n      } else if (nchar === \"-\") {\n        this.input();\n        return this.tok.T_DEC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MINUS_EQUAL;\n      }\n      return \"-\";\n    },\n    \"\\\\\": function () {\n      if (this.offset < this.size) {\n        this.input();\n        if (this.is_LABEL_START()) {\n          let ch;\n          do {\n            if (this._input[this.offset] === \"{\") {\n              // e.g. when using group use statements, the last '\\\\' is followed by a '{'\n              this.input();\n              break;\n            }\n\n            this.consume_LABEL();\n            ch = this.input();\n          } while (ch === \"\\\\\");\n\n          this.unput(1);\n\n          return this.tok.T_NAME_FULLY_QUALIFIED;\n        } else {\n          this.unput(1);\n        }\n      }\n      return this.tok.T_NS_SEPARATOR;\n    },\n    \"/\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_DIV_EQUAL;\n      }\n      return \"/\";\n    },\n    \":\": function () {\n      if (this._input[this.offset] === \":\") {\n        this.input();\n        return this.tok.T_DOUBLE_COLON;\n      } else {\n        return \":\";\n      }\n    },\n    \"(\": function () {\n      const initial = this.offset;\n      this.input();\n      if (this.is_TABSPACE()) {\n        this.consume_TABSPACE().input();\n      }\n      if (this.is_LABEL_START()) {\n        const yylen = this.yytext.length;\n        this.consume_LABEL();\n        const castToken = this.yytext.substring(yylen - 1).toLowerCase();\n        const castId = this.castKeywords[castToken];\n        if (typeof castId === \"number\") {\n          this.input();\n          if (this.is_TABSPACE()) {\n            this.consume_TABSPACE().input();\n          }\n          if (this._input[this.offset - 1] === \")\") {\n            return castId;\n          }\n        }\n      }\n      // revert the check\n      this.unput(this.offset - initial);\n      return \"(\";\n    },\n    \"=\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \">\") {\n        this.input();\n        return this.tok.T_DOUBLE_ARROW;\n      } else if (nchar === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_EQUAL;\n        }\n      }\n      return \"=\";\n    },\n    \"+\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"+\") {\n        this.input();\n        return this.tok.T_INC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_PLUS_EQUAL;\n      }\n      return \"+\";\n    },\n    \"!\": function () {\n      if (this._input[this.offset] === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_NOT_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_NOT_EQUAL;\n        }\n      }\n      return \"!\";\n    },\n    \"?\": function () {\n      if (this.version >= 700 && this._input[this.offset] === \"?\") {\n        if (this.version >= 704 && this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_COALESCE_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_COALESCE;\n        }\n      }\n      if (\n        this.version >= 800 &&\n        this._input[this.offset] === \"-\" &&\n        this._input[this.offset + 1] === \">\"\n      ) {\n        this.consume(2);\n        return this.tok.T_NULLSAFE_OBJECT_OPERATOR;\n      }\n      return \"?\";\n    },\n    \"<\": function () {\n      let nchar = this._input[this.offset];\n      if (nchar === \"<\") {\n        nchar = this._input[this.offset + 1];\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SL_EQUAL;\n        } else if (nchar === \"<\") {\n          if (this.is_HEREDOC()) {\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n        this.input();\n        return this.tok.T_SL;\n      } else if (nchar === \"=\") {\n        this.input();\n        if (this.version >= 700 && this._input[this.offset] === \">\") {\n          this.input();\n          return this.tok.T_SPACESHIP;\n        } else {\n          return this.tok.T_IS_SMALLER_OR_EQUAL;\n        }\n      } else if (nchar === \">\") {\n        this.input();\n        return this.tok.T_IS_NOT_EQUAL;\n      }\n      return \"<\";\n    },\n    \">\": function () {\n      let nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_IS_GREATER_OR_EQUAL;\n      } else if (nchar === \">\") {\n        nchar = this._input[this.offset + 1];\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SR_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_SR;\n        }\n      }\n      return \">\";\n    },\n    \"*\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MUL_EQUAL;\n      } else if (nchar === \"*\") {\n        this.input();\n        if (this._input[this.offset] === \"=\") {\n          this.input();\n          return this.tok.T_POW_EQUAL;\n        } else {\n          return this.tok.T_POW;\n        }\n      }\n      return \"*\";\n    },\n    \".\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_CONCAT_EQUAL;\n      } else if (nchar === \".\" && this._input[this.offset + 1] === \".\") {\n        this.consume(2);\n        return this.tok.T_ELLIPSIS;\n      }\n      return \".\";\n    },\n    \"%\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_MOD_EQUAL;\n      }\n      return \"%\";\n    },\n    \"&\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_AND_EQUAL;\n      } else if (nchar === \"&\") {\n        this.input();\n        return this.tok.T_BOOLEAN_AND;\n      }\n      return \"&\";\n    },\n    \"|\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_OR_EQUAL;\n      } else if (nchar === \"|\") {\n        this.input();\n        return this.tok.T_BOOLEAN_OR;\n      }\n      return \"|\";\n    },\n    \"^\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_XOR_EQUAL;\n      }\n      return \"^\";\n    },\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nconst tokens$1 = \";:,.\\\\[]()|^&+-/*=%!~$<>?@\";\n\nvar utils = {\n  // check if the char can be a numeric\n  is_NUM: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return (ch > 47 && ch < 58) || ch === 95;\n  },\n\n  // check if the char can be a numeric\n  is_NUM_START: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return ch > 47 && ch < 58;\n  },\n\n  // check if current char can be a label\n  is_LABEL: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return (\n      (ch > 96 && ch < 123) ||\n      (ch > 64 && ch < 91) ||\n      ch === 95 ||\n      (ch > 47 && ch < 58) ||\n      ch > 126\n    );\n  },\n\n  // check if current char can be a label\n  is_LABEL_START: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // A - Z\n    if (ch > 64 && ch < 91) return true;\n    // a - z\n    if (ch > 96 && ch < 123) return true;\n    // _ (95)\n    if (ch === 95) return true;\n    // utf8 / extended\n    if (ch > 126) return true;\n    // else\n    return false;\n  },\n\n  // reads each char of the label\n  consume_LABEL: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_LABEL()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this;\n  },\n\n  // check if current char is a token char\n  is_TOKEN: function () {\n    const ch = this._input[this.offset - 1];\n    return tokens$1.indexOf(ch) !== -1;\n  },\n  // check if current char is a whitespace\n  is_WHITESPACE: function () {\n    const ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\";\n  },\n  // check if current char is a whitespace (without newlines)\n  is_TABSPACE: function () {\n    const ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\";\n  },\n  // consume all whitespaces (excluding newlines)\n  consume_TABSPACE: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_TABSPACE()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this;\n  },\n  // check if current char can be a hexadecimal number\n  is_HEX: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // 0 - 9\n    if (ch > 47 && ch < 58) return true;\n    // A - F\n    if (ch > 64 && ch < 71) return true;\n    // a - f\n    if (ch > 96 && ch < 103) return true;\n    // _ (code 95)\n    if (ch === 95) return true;\n    // else\n    return false;\n  },\n  // check if current char can be an octal number\n  is_OCTAL: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // 0 - 7\n    if (ch > 47 && ch < 56) return true;\n    // _ (code 95)\n    if (ch === 95) return true;\n    // else\n    return false;\n  },\n};\n\n/**\n * This is the php lexer. It will tokenize the string for helping the\n * parser to build the AST from its grammar.\n *\n * @constructor Lexer\n * @memberOf module:php-parser\n * @property {number} EOF\n * @property {boolean} all_tokens defines if all tokens must be retrieved (used by token_get_all only)\n * @property {boolean} comment_tokens extracts comments tokens\n * @property {boolean} mode_eval enables the evald mode (ignore opening tags)\n * @property {boolean} asp_tags disables by default asp tags mode\n * @property {boolean} short_tags enables by default short tags mode\n * @property {object} keywords List of php keyword\n * @property {object} castKeywords List of php keywords for type casting\n */\nconst Lexer = function (engine) {\n  this.engine = engine;\n  this.tok = this.engine.tokens.names;\n  this.EOF = 1;\n  this.debug = false;\n  this.all_tokens = true;\n  this.comment_tokens = false;\n  this.mode_eval = false;\n  this.asp_tags = false;\n  this.short_tags = false;\n  this.version = 801;\n  this.yyprevcol = 0;\n  this.keywords = {\n    __class__: this.tok.T_CLASS_C,\n    __trait__: this.tok.T_TRAIT_C,\n    __function__: this.tok.T_FUNC_C,\n    __method__: this.tok.T_METHOD_C,\n    __line__: this.tok.T_LINE,\n    __file__: this.tok.T_FILE,\n    __dir__: this.tok.T_DIR,\n    __namespace__: this.tok.T_NS_C,\n    exit: this.tok.T_EXIT,\n    die: this.tok.T_EXIT,\n    function: this.tok.T_FUNCTION,\n    const: this.tok.T_CONST,\n    return: this.tok.T_RETURN,\n    try: this.tok.T_TRY,\n    catch: this.tok.T_CATCH,\n    finally: this.tok.T_FINALLY,\n    throw: this.tok.T_THROW,\n    if: this.tok.T_IF,\n    elseif: this.tok.T_ELSEIF,\n    endif: this.tok.T_ENDIF,\n    else: this.tok.T_ELSE,\n    while: this.tok.T_WHILE,\n    endwhile: this.tok.T_ENDWHILE,\n    do: this.tok.T_DO,\n    for: this.tok.T_FOR,\n    endfor: this.tok.T_ENDFOR,\n    foreach: this.tok.T_FOREACH,\n    endforeach: this.tok.T_ENDFOREACH,\n    declare: this.tok.T_DECLARE,\n    enddeclare: this.tok.T_ENDDECLARE,\n    instanceof: this.tok.T_INSTANCEOF,\n    as: this.tok.T_AS,\n    switch: this.tok.T_SWITCH,\n    endswitch: this.tok.T_ENDSWITCH,\n    case: this.tok.T_CASE,\n    default: this.tok.T_DEFAULT,\n    break: this.tok.T_BREAK,\n    continue: this.tok.T_CONTINUE,\n    goto: this.tok.T_GOTO,\n    echo: this.tok.T_ECHO,\n    print: this.tok.T_PRINT,\n    class: this.tok.T_CLASS,\n    interface: this.tok.T_INTERFACE,\n    trait: this.tok.T_TRAIT,\n    enum: this.tok.T_ENUM,\n    extends: this.tok.T_EXTENDS,\n    implements: this.tok.T_IMPLEMENTS,\n    new: this.tok.T_NEW,\n    clone: this.tok.T_CLONE,\n    var: this.tok.T_VAR,\n    eval: this.tok.T_EVAL,\n    include: this.tok.T_INCLUDE,\n    include_once: this.tok.T_INCLUDE_ONCE,\n    require: this.tok.T_REQUIRE,\n    require_once: this.tok.T_REQUIRE_ONCE,\n    namespace: this.tok.T_NAMESPACE,\n    use: this.tok.T_USE,\n    insteadof: this.tok.T_INSTEADOF,\n    global: this.tok.T_GLOBAL,\n    isset: this.tok.T_ISSET,\n    empty: this.tok.T_EMPTY,\n    __halt_compiler: this.tok.T_HALT_COMPILER,\n    static: this.tok.T_STATIC,\n    abstract: this.tok.T_ABSTRACT,\n    final: this.tok.T_FINAL,\n    private: this.tok.T_PRIVATE,\n    protected: this.tok.T_PROTECTED,\n    public: this.tok.T_PUBLIC,\n    unset: this.tok.T_UNSET,\n    list: this.tok.T_LIST,\n    array: this.tok.T_ARRAY,\n    callable: this.tok.T_CALLABLE,\n    or: this.tok.T_LOGICAL_OR,\n    and: this.tok.T_LOGICAL_AND,\n    xor: this.tok.T_LOGICAL_XOR,\n    match: this.tok.T_MATCH,\n    readonly: this.tok.T_READ_ONLY,\n  };\n  this.castKeywords = {\n    int: this.tok.T_INT_CAST,\n    integer: this.tok.T_INT_CAST,\n    real: this.tok.T_DOUBLE_CAST,\n    double: this.tok.T_DOUBLE_CAST,\n    float: this.tok.T_DOUBLE_CAST,\n    string: this.tok.T_STRING_CAST,\n    binary: this.tok.T_STRING_CAST,\n    array: this.tok.T_ARRAY_CAST,\n    object: this.tok.T_OBJECT_CAST,\n    bool: this.tok.T_BOOL_CAST,\n    boolean: this.tok.T_BOOL_CAST,\n    unset: this.tok.T_UNSET_CAST,\n  };\n};\n\n/**\n * Initialize the lexer with the specified input\n * @function Lexer#setInput\n * @memberOf module:php-parser\n */\nLexer.prototype.setInput = function (input) {\n  this._input = input;\n  this.size = input.length;\n  this.yylineno = 1;\n  this.offset = 0;\n  this.yyprevcol = 0;\n  this.yytext = \"\";\n  this.yylloc = {\n    first_offset: 0,\n    first_line: 1,\n    first_column: 0,\n    prev_offset: 0,\n    prev_line: 1,\n    prev_column: 0,\n    last_line: 1,\n    last_column: 0,\n  };\n  this.tokens = [];\n  if (this.version > 703) {\n    this.keywords.fn = this.tok.T_FN;\n  } else {\n    delete this.keywords.fn;\n  }\n  this.done = this.offset >= this.size;\n  if (!this.all_tokens && this.mode_eval) {\n    this.conditionStack = [\"INITIAL\"];\n    this.begin(\"ST_IN_SCRIPTING\");\n  } else {\n    this.conditionStack = [];\n    this.begin(\"INITIAL\");\n  }\n  // https://github.com/php/php-src/blob/999e32b65a8a4bb59e27e538fa68ffae4b99d863/Zend/zend_language_scanner.h#L59\n  // Used for heredoc and nowdoc\n  this.heredoc_label = {\n    label: \"\",\n    length: 0,\n    indentation: 0,\n    indentation_uses_spaces: false,\n    finished: false,\n    /*\n     * this used for parser to detemine the if current node segment is first encaps node.\n     * if ture, the indentation will remove from the begining. and if false, the prev node\n     * might be a variable '}' ,and the leading spaces should not be removed util meet the\n     * first \\n\n     */\n    first_encaps_node: false,\n    // for backward compatible\n    /* istanbul ignore next */\n    toString: function () {\n      this.label;\n    },\n  };\n  return this;\n};\n\n/**\n * consumes and returns one char from the input\n * @function Lexer#input\n * @memberOf module:php-parser\n */\nLexer.prototype.input = function () {\n  const ch = this._input[this.offset];\n  if (!ch) return \"\";\n  this.yytext += ch;\n  this.offset++;\n  if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n    this.yytext += \"\\n\";\n    this.offset++;\n  }\n  if (ch === \"\\n\" || ch === \"\\r\") {\n    this.yylloc.last_line = ++this.yylineno;\n    this.yyprevcol = this.yylloc.last_column;\n    this.yylloc.last_column = 0;\n  } else {\n    this.yylloc.last_column++;\n  }\n  return ch;\n};\n\n/**\n * revert eating specified size\n * @function Lexer#unput\n * @memberOf module:php-parser\n */\nLexer.prototype.unput = function (size) {\n  if (size === 1) {\n    // 1 char unput (most cases)\n    this.offset--;\n    if (\n      this._input[this.offset] === \"\\n\" &&\n      this._input[this.offset - 1] === \"\\r\"\n    ) {\n      this.offset--;\n      size++;\n    }\n    if (\n      this._input[this.offset] === \"\\r\" ||\n      this._input[this.offset] === \"\\n\"\n    ) {\n      this.yylloc.last_line--;\n      this.yylineno--;\n      this.yylloc.last_column = this.yyprevcol;\n    } else {\n      this.yylloc.last_column--;\n    }\n    this.yytext = this.yytext.substring(0, this.yytext.length - size);\n  } else if (size > 0) {\n    this.offset -= size;\n    if (size < this.yytext.length) {\n      this.yytext = this.yytext.substring(0, this.yytext.length - size);\n      // re-calculate position\n      this.yylloc.last_line = this.yylloc.first_line;\n      this.yylloc.last_column = this.yyprevcol = this.yylloc.first_column;\n      for (let i = 0; i < this.yytext.length; i++) {\n        let c = this.yytext[i];\n        if (c === \"\\r\") {\n          c = this.yytext[++i];\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n          if (c !== \"\\n\") {\n            if (c === \"\\r\") {\n              this.yylloc.last_line++;\n            } else {\n              this.yylloc.last_column++;\n            }\n          }\n        } else if (c === \"\\n\") {\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n        } else {\n          this.yylloc.last_column++;\n        }\n      }\n      this.yylineno = this.yylloc.last_line;\n    } else {\n      // reset full text\n      this.yytext = \"\";\n      this.yylloc.last_line = this.yylineno = this.yylloc.first_line;\n      this.yylloc.last_column = this.yylloc.first_column;\n    }\n  }\n\n  return this;\n};\n\n/**\n * check if the text matches\n * @function Lexer#tryMatch\n * @memberOf module:php-parser\n * @param {string} text\n * @returns {boolean}\n */\nLexer.prototype.tryMatch = function (text) {\n  return text === this.ahead(text.length);\n};\n\n/**\n * check if the text matches\n * @function Lexer#tryMatchCaseless\n * @memberOf module:php-parser\n * @param {string} text\n * @returns {boolean}\n */\nLexer.prototype.tryMatchCaseless = function (text) {\n  return text === this.ahead(text.length).toLowerCase();\n};\n\n/**\n * look ahead\n * @function Lexer#ahead\n * @memberOf module:php-parser\n * @param {number} size\n * @returns {string}\n */\nLexer.prototype.ahead = function (size) {\n  let text = this._input.substring(this.offset, this.offset + size);\n  if (\n    text[text.length - 1] === \"\\r\" &&\n    this._input[this.offset + size + 1] === \"\\n\"\n  ) {\n    text += \"\\n\";\n  }\n  return text;\n};\n\n/**\n * consume the specified size\n * @function Lexer#consume\n * @memberOf module:php-parser\n * @param {number} size\n * @returns {Lexer}\n */\nLexer.prototype.consume = function (size) {\n  for (let i = 0; i < size; i++) {\n    const ch = this._input[this.offset];\n    if (!ch) break;\n    this.yytext += ch;\n    this.offset++;\n    if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n      this.yytext += \"\\n\";\n      this.offset++;\n      i++;\n    }\n    if (ch === \"\\n\" || ch === \"\\r\") {\n      this.yylloc.last_line = ++this.yylineno;\n      this.yyprevcol = this.yylloc.last_column;\n      this.yylloc.last_column = 0;\n    } else {\n      this.yylloc.last_column++;\n    }\n  }\n  return this;\n};\n\n/**\n * Gets the current state\n * @function Lexer#getState\n * @memberOf module:php-parser\n */\nLexer.prototype.getState = function () {\n  return {\n    yytext: this.yytext,\n    offset: this.offset,\n    yylineno: this.yylineno,\n    yyprevcol: this.yyprevcol,\n    yylloc: {\n      first_offset: this.yylloc.first_offset,\n      first_line: this.yylloc.first_line,\n      first_column: this.yylloc.first_column,\n      last_line: this.yylloc.last_line,\n      last_column: this.yylloc.last_column,\n    },\n    heredoc_label: this.heredoc_label,\n  };\n};\n\n/**\n * Sets the current lexer state\n * @function Lexer#setState\n * @memberOf module:php-parser\n */\nLexer.prototype.setState = function (state) {\n  this.yytext = state.yytext;\n  this.offset = state.offset;\n  this.yylineno = state.yylineno;\n  this.yyprevcol = state.yyprevcol;\n  this.yylloc = state.yylloc;\n  if (state.heredoc_label) {\n    this.heredoc_label = state.heredoc_label;\n  }\n  return this;\n};\n\n/**\n * prepend next token\n * @function Lexer#appendToken\n * @memberOf module:php-parser\n * @param {*} value\n * @param {*} ahead\n * @returns {Lexer}\n */\nLexer.prototype.appendToken = function (value, ahead) {\n  this.tokens.push([value, ahead]);\n  return this;\n};\n\n/**\n * return next match that has a token\n * @function Lexer#lex\n * @memberOf module:php-parser\n * @returns {number|string}\n */\nLexer.prototype.lex = function () {\n  this.yylloc.prev_offset = this.offset;\n  this.yylloc.prev_line = this.yylloc.last_line;\n  this.yylloc.prev_column = this.yylloc.last_column;\n  let token = this.next() || this.lex();\n  if (!this.all_tokens) {\n    while (\n      token === this.tok.T_WHITESPACE || // ignore white space\n      (!this.comment_tokens &&\n        (token === this.tok.T_COMMENT || // ignore single lines comments\n          token === this.tok.T_DOC_COMMENT)) || // ignore doc comments\n      // ignore open tags\n      token === this.tok.T_OPEN_TAG\n    ) {\n      token = this.next() || this.lex();\n    }\n    if (token == this.tok.T_OPEN_TAG_WITH_ECHO) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1683\n      // open tag with echo statement\n      return this.tok.T_ECHO;\n    } else if (token === this.tok.T_CLOSE_TAG) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n      return \";\"; /* implicit ; */\n    }\n  }\n  if (!this.yylloc.prev_offset) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n  }\n  /*else if (this.yylloc.prev_offset === this.offset && this.offset !== this.size) {\n    throw new Error('Infinite loop @ ' + this.offset + ' / ' + this.size);\n  }*/\n  return token;\n};\n\n/**\n * activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n * @function Lexer#begin\n * @memberOf module:php-parser\n * @param {*} condition\n * @returns {Lexer}\n */\nLexer.prototype.begin = function (condition) {\n  this.conditionStack.push(condition);\n  this.curCondition = condition;\n  this.stateCb = this[\"match\" + condition];\n  /* istanbul ignore next */\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + condition + '\"');\n  }\n  return this;\n};\n\n/**\n * pop the previously active lexer condition state off the condition stack\n * @function Lexer#popState\n * @memberOf module:php-parser\n * @returns {string|*}\n */\nLexer.prototype.popState = function () {\n  const n = this.conditionStack.length - 1;\n  const condition = n > 0 ? this.conditionStack.pop() : this.conditionStack[0];\n  this.curCondition = this.conditionStack[this.conditionStack.length - 1];\n  this.stateCb = this[\"match\" + this.curCondition];\n  /* istanbul ignore next */\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + this.curCondition + '\"');\n  }\n  return condition;\n};\n\n/**\n * return next match in input\n * @function Lexer#next\n * @memberOf module:php-parser\n * @returns {number|*}\n */\nLexer.prototype.next = function () {\n  let token;\n  if (!this._input) {\n    this.done = true;\n  }\n  this.yylloc.first_offset = this.offset;\n  this.yylloc.first_line = this.yylloc.last_line;\n  this.yylloc.first_column = this.yylloc.last_column;\n  this.yytext = \"\";\n  if (this.done) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n    return this.EOF;\n  }\n  if (this.tokens.length > 0) {\n    token = this.tokens.shift();\n    if (typeof token[1] === \"object\") {\n      this.setState(token[1]);\n    } else {\n      this.consume(token[1]);\n    }\n    token = token[0];\n  } else {\n    token = this.stateCb.apply(this, []);\n  }\n  if (this.offset >= this.size && this.tokens.length === 0) {\n    this.done = true;\n  }\n  /* istanbul ignore next */\n  if (this.debug) {\n    let tName = token;\n    if (typeof tName === \"number\") {\n      tName = this.engine.tokens.values[tName];\n    } else {\n      tName = '\"' + tName + '\"';\n    }\n    const e = new Error(\n      tName +\n        \"\\tfrom \" +\n        this.yylloc.first_line +\n        \",\" +\n        this.yylloc.first_column +\n        \"\\t - to \" +\n        this.yylloc.last_line +\n        \",\" +\n        this.yylloc.last_column +\n        '\\t\"' +\n        this.yytext +\n        '\"'\n    );\n    // eslint-disable-next-line no-console\n    console.error(e.stack);\n  }\n  return token;\n};\n\n// extends the lexer with states\n[\n  attribute,\n  comments,\n  initial,\n  numbers,\n  property,\n  scripting,\n  strings,\n  tokens,\n  utils,\n].forEach(function (ext) {\n  for (const k in ext) {\n    Lexer.prototype[k] = ext[k];\n  }\n});\n\nvar lexer = Lexer;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * Each Position object consists of a line number (1-indexed) and a column number (0-indexed):\n * @constructor Position\n * @memberOf module:php-parser\n * @property {number} line\n * @property {number} column\n * @property {number} offset\n */\nconst Position = function (line, column, offset) {\n  this.line = line;\n  this.column = column;\n  this.offset = offset;\n};\n\nvar position = Position;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar array = {\n  /*\n   * Parse an array\n   * ```ebnf\n   * array ::= T_ARRAY '(' array_pair_list ')' |\n   *   '[' array_pair_list ']'\n   * ```\n   */\n  read_array: function () {\n    let expect = null;\n    let shortForm = false;\n    const result = this.node(\"array\");\n\n    if (this.token === this.tok.T_ARRAY) {\n      this.next().expect(\"(\");\n      expect = \")\";\n    } else {\n      shortForm = true;\n      expect = \"]\";\n    }\n    let items = [];\n    if (this.next().token !== expect) {\n      items = this.read_array_pair_list(shortForm);\n    }\n    this.expect(expect);\n    this.next();\n    return result(shortForm, items);\n  },\n  /*\n   * Reads an array of items\n   * ```ebnf\n   * array_pair_list ::= array_pair (',' array_pair?)*\n   * ```\n   */\n  read_array_pair_list: function (shortForm) {\n    const self = this;\n    return this.read_list(\n      function () {\n        return self.read_array_pair(shortForm);\n      },\n      \",\",\n      true\n    );\n  },\n  /*\n   * Reads an entry\n   * array_pair:\n   *  expr T_DOUBLE_ARROW expr\n   *  | expr\n   *  | expr T_DOUBLE_ARROW '&' variable\n   *  | '&' variable\n   *  | expr T_DOUBLE_ARROW T_LIST '(' array_pair_list ')'\n   *  | T_LIST '(' array_pair_list ')'\n   */\n  read_array_pair: function (shortForm) {\n    if (\n      (!shortForm && this.token === \")\") ||\n      (shortForm && this.token === \"]\")\n    ) {\n      return;\n    }\n\n    if (this.token === \",\") {\n      return this.node(\"noop\")();\n    }\n\n    const entry = this.node(\"entry\");\n\n    let key = null;\n    let value = null;\n    let byRef = false;\n    let unpack = false;\n\n    if (this.token === \"&\") {\n      this.next();\n      byRef = true;\n      value = this.read_variable(true, false);\n    } else if (this.token === this.tok.T_ELLIPSIS && this.version >= 704) {\n      this.next();\n      if (this.token === \"&\") {\n        this.error();\n      }\n      unpack = true;\n      value = this.read_expr();\n    } else {\n      const expr = this.read_expr();\n\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        this.next();\n        key = expr;\n\n        if (this.token === \"&\") {\n          this.next();\n          byRef = true;\n          value = this.read_variable(true, false);\n        } else {\n          value = this.read_expr();\n        }\n      } else {\n        value = expr;\n      }\n    }\n\n    return entry(key, value, byRef, unpack);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _class = {\n  /*\n   * reading a class\n   * ```ebnf\n   * class ::= class_scope? T_CLASS T_STRING (T_EXTENDS NAMESPACE_NAME)? (T_IMPLEMENTS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' CLASS_BODY '}'\n   * ```\n   */\n  read_class_declaration_statement: function (attrs) {\n    const result = this.node(\"class\");\n    const flag = this.read_class_modifiers();\n    // graceful mode : ignore token & go next\n    if (this.token !== this.tok.T_CLASS) {\n      this.error(this.tok.T_CLASS);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const propExtends = this.read_extends_from();\n    const propImplements = this.read_implements_list();\n    this.expect(\"{\");\n    const body = this.next().read_class_body(true, false);\n    const node = result(propName, propExtends, propImplements, body, flag);\n    if (attrs) node.attrGroups = attrs;\n    return node;\n  },\n\n  read_class_modifiers: function () {\n    const modifier = this.read_class_modifier({\n      readonly: 0,\n      final_or_abstract: 0,\n    });\n    return [0, 0, modifier.final_or_abstract, modifier.readonly];\n  },\n\n  read_class_modifier: function (memo) {\n    if (this.token === this.tok.T_READ_ONLY) {\n      this.next();\n      memo.readonly = 1;\n      memo = this.read_class_modifier(memo);\n    } else if (\n      memo.final_or_abstract === 0 &&\n      this.token === this.tok.T_ABSTRACT\n    ) {\n      this.next();\n      memo.final_or_abstract = 1;\n      memo = this.read_class_modifier(memo);\n    } else if (\n      memo.final_or_abstract === 0 &&\n      this.token === this.tok.T_FINAL\n    ) {\n      this.next();\n      memo.final_or_abstract = 2;\n      memo = this.read_class_modifier(memo);\n    }\n\n    return memo;\n  },\n\n  /*\n   * Reads a class body\n   * ```ebnf\n   *   class_body ::= (member_flags? (T_VAR | T_STRING | T_FUNCTION))*\n   * ```\n   */\n  read_class_body: function (allow_variables, allow_enum_cases) {\n    let result = [];\n    let attrs = [];\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      }\n\n      // check T_USE trait\n      if (this.token === this.tok.T_USE) {\n        result = result.concat(this.read_trait_use_statement());\n        continue;\n      }\n\n      // check enum cases\n      if (allow_enum_cases && this.token === this.tok.T_CASE) {\n        const enumcase = this.read_enum_case();\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(enumcase);\n        continue;\n      }\n\n      if (this.token === this.tok.T_ATTRIBUTE) {\n        attrs = this.read_attr_list();\n      }\n\n      const locStart = this.position();\n\n      // read member flags\n      const flags = this.read_member_flags(false);\n\n      // check constant\n      if (this.token === this.tok.T_CONST) {\n        const constants = this.read_constant_list(flags, attrs);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(constants);\n        continue;\n      }\n\n      // jump over T_VAR then land on T_VARIABLE\n      if (allow_variables && this.token === this.tok.T_VAR) {\n        this.next().expect(this.tok.T_VARIABLE);\n        flags[0] = null; // public (as null)\n        flags[1] = 0; // non static var\n      }\n\n      if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        result.push(this.read_function(false, flags, attrs, locStart));\n        attrs = [];\n      } else if (\n        allow_variables &&\n        (this.token === this.tok.T_VARIABLE ||\n          (this.version >= 801 && this.token === this.tok.T_READ_ONLY) ||\n          // support https://wiki.php.net/rfc/typed_properties_v2\n          (this.version >= 704 &&\n            (this.token === \"?\" ||\n              this.token === this.tok.T_ARRAY ||\n              this.token === this.tok.T_CALLABLE ||\n              this.token === this.tok.T_NAMESPACE ||\n              this.token === this.tok.T_NAME_FULLY_QUALIFIED ||\n              this.token === this.tok.T_NAME_QUALIFIED ||\n              this.token === this.tok.T_NAME_RELATIVE ||\n              this.token === this.tok.T_NS_SEPARATOR ||\n              this.token === this.tok.T_STRING)))\n      ) {\n        // reads a variable\n        const variables = this.read_variable_list(flags, attrs);\n        attrs = [];\n        this.expect(\";\");\n        this.next();\n        result = result.concat(variables);\n      } else {\n        // raise an error\n        this.error([\n          this.tok.T_CONST,\n          ...(allow_variables ? [this.tok.T_VARIABLE] : []),\n          ...(allow_enum_cases ? [this.tok.T_CASE] : []),\n          this.tok.T_FUNCTION,\n        ]);\n        // ignore token\n        this.next();\n      }\n    }\n    this.expect(\"}\");\n    this.next();\n    return result;\n  },\n  /*\n   * Reads variable list\n   * ```ebnf\n   *  variable_list ::= (variable_declaration ',')* variable_declaration\n   * ```\n   */\n  read_variable_list: function (flags, attrs) {\n    const result = this.node(\"propertystatement\");\n\n    const properties = this.read_list(\n      /*\n       * Reads a variable declaration\n       *\n       * ```ebnf\n       *  variable_declaration ::= T_VARIABLE '=' scalar\n       * ```\n       */\n      function read_variable_declaration() {\n        const result = this.node(\"property\");\n        let readonly = false;\n        if (this.token === this.tok.T_READ_ONLY) {\n          readonly = true;\n          this.next();\n        }\n        const [nullable, type] = this.read_optional_type();\n        this.expect(this.tok.T_VARIABLE);\n        let propName = this.node(\"identifier\");\n        const name = this.text().substring(1); // ignore $\n        this.next();\n        propName = propName(name);\n        if (this.token === \";\" || this.token === \",\") {\n          return result(propName, null, readonly, nullable, type, attrs || []);\n        } else if (this.token === \"=\") {\n          // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L815\n          return result(\n            propName,\n            this.next().read_expr(),\n            readonly,\n            nullable,\n            type,\n            attrs || []\n          );\n        } else {\n          this.expect([\",\", \";\", \"=\"]);\n          return result(propName, null, nullable, type, attrs || []);\n        }\n      },\n      \",\"\n    );\n\n    return result(null, properties, flags);\n  },\n  /*\n   * Reads constant list\n   * ```ebnf\n   *  constant_list ::= T_CONST (constant_declaration ',')* constant_declaration\n   * ```\n   */\n  read_constant_list: function (flags, attrs) {\n    if (this.expect(this.tok.T_CONST)) {\n      this.next();\n    }\n    const result = this.node(\"classconstant\");\n    const items = this.read_list(\n      /*\n       * Reads a constant declaration\n       *\n       * ```ebnf\n       *  constant_declaration ::= (T_STRING | IDENTIFIER) '=' expr\n       * ```\n       * @return {Constant} [:link:](AST.md#constant)\n       */\n      function read_constant_declaration() {\n        const result = this.node(\"constant\");\n        let constName = null;\n        let value = null;\n        if (\n          this.token === this.tok.T_STRING ||\n          (this.version >= 700 && this.is(\"IDENTIFIER\"))\n        ) {\n          constName = this.node(\"identifier\");\n          const name = this.text();\n          this.next();\n          constName = constName(name);\n        } else {\n          this.expect(\"IDENTIFIER\");\n        }\n        if (this.expect(\"=\")) {\n          value = this.next().read_expr();\n        }\n        return result(constName, value);\n      },\n      \",\"\n    );\n\n    return result(null, items, flags, attrs || []);\n  },\n  /*\n   * Read member flags\n   * @return array\n   *  1st index : 0 => public, 1 => protected, 2 => private\n   *  2nd index : 0 => instance member, 1 => static member\n   *  3rd index : 0 => normal, 1 => abstract member, 2 => final member\n   */\n  read_member_flags: function (asInterface) {\n    const result = [-1, -1, -1];\n    if (this.is(\"T_MEMBER_FLAGS\")) {\n      let idx = 0,\n        val = 0;\n      do {\n        switch (this.token) {\n          case this.tok.T_PUBLIC:\n            idx = 0;\n            val = 0;\n            break;\n          case this.tok.T_PROTECTED:\n            idx = 0;\n            val = 1;\n            break;\n          case this.tok.T_PRIVATE:\n            idx = 0;\n            val = 2;\n            break;\n          case this.tok.T_STATIC:\n            idx = 1;\n            val = 1;\n            break;\n          case this.tok.T_ABSTRACT:\n            idx = 2;\n            val = 1;\n            break;\n          case this.tok.T_FINAL:\n            idx = 2;\n            val = 2;\n            break;\n        }\n        if (asInterface) {\n          if (idx == 0 && val == 2) {\n            // an interface can't be private\n            this.expect([this.tok.T_PUBLIC, this.tok.T_PROTECTED]);\n            val = -1;\n          } else if (idx == 2 && val == 1) {\n            // an interface cant be abstract\n            this.error();\n            val = -1;\n          }\n        }\n        if (result[idx] !== -1) {\n          // already defined flag\n          this.error();\n        } else if (val !== -1) {\n          result[idx] = val;\n        }\n      } while (this.next().is(\"T_MEMBER_FLAGS\"));\n    }\n\n    if (result[1] == -1) result[1] = 0;\n    if (result[2] == -1) result[2] = 0;\n    return result;\n  },\n\n  /*\n   * optional_type:\n   *\t  /- empty -/\t{ $$ = NULL; }\n   *   |\ttype_expr\t{ $$ = $1; }\n   * ;\n   *\n   * type_expr:\n   *\t\ttype\t\t{ $$ = $1; }\n   *\t|\t'?' type\t{ $$ = $2; $$->attr |= ZEND_TYPE_NULLABLE; }\n   *\t|\tunion_type\t{ $$ = $1; }\n   * ;\n   *\n   * type:\n   * \t\tT_ARRAY\t\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_ARRAY); }\n   * \t|\tT_CALLABLE\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_CALLABLE); }\n   * \t|\tname\t\t{ $$ = $1; }\n   * ;\n   *\n   * union_type:\n   * \t\ttype '|' type       { $$ = zend_ast_create_list(2, ZEND_AST_TYPE_UNION, $1, $3); }\n   * \t|\tunion_type '|' type { $$ = zend_ast_list_add($1, $3); }\n   * ;\n   */\n  read_optional_type: function () {\n    let nullable = false;\n    if (this.token === \"?\") {\n      nullable = true;\n      this.next();\n    }\n    let type = this.read_types();\n    if (nullable && !type) {\n      this.raiseError(\n        \"Expecting a type definition combined with nullable operator\"\n      );\n    }\n    if (!nullable && !type) {\n      return [false, null];\n    }\n    if (this.token === \"|\") {\n      type = [type];\n      do {\n        this.next();\n        const variant = this.read_type();\n        if (!variant) {\n          this.raiseError(\"Expecting a type definition\");\n          break;\n        }\n        type.push(variant);\n      } while (this.token === \"|\");\n    }\n    return [nullable, type];\n  },\n\n  /*\n   * reading an interface\n   * ```ebnf\n   * interface ::= T_INTERFACE T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' INTERFACE_BODY '}'\n   * ```\n   */\n  read_interface_declaration_statement: function (attrs) {\n    const result = this.node(\"interface\");\n    if (this.token !== this.tok.T_INTERFACE) {\n      this.error(this.tok.T_INTERFACE);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const propExtends = this.read_interface_extends_list();\n    this.expect(\"{\");\n    const body = this.next().read_interface_body();\n    return result(propName, propExtends, body, attrs || []);\n  },\n  /*\n   * Reads an interface body\n   * ```ebnf\n   *   interface_body ::= (member_flags? (T_CONST | T_FUNCTION))*\n   * ```\n   */\n  read_interface_body: function () {\n    let result = [],\n      attrs = [];\n\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      }\n\n      const locStart = this.position();\n\n      attrs = this.read_attr_list();\n      // read member flags\n      const flags = this.read_member_flags(true);\n\n      // check constant\n      if (this.token == this.tok.T_CONST) {\n        const constants = this.read_constant_list(flags, attrs);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(constants);\n        attrs = [];\n      } else if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        const method = this.read_function_declaration(\n          2,\n          flags,\n          attrs,\n          locStart\n        );\n        method.parseFlags(flags);\n        result.push(method);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        attrs = [];\n      } else {\n        // raise an error\n        this.error([this.tok.T_CONST, this.tok.T_FUNCTION]);\n        this.next();\n      }\n    }\n    if (this.expect(\"}\")) {\n      this.next();\n    }\n    return result;\n  },\n  /*\n   * reading a trait\n   * ```ebnf\n   * trait ::= T_TRAIT T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' FUNCTION* '}'\n   * ```\n   */\n  read_trait_declaration_statement: function () {\n    const result = this.node(\"trait\");\n    // graceful mode : ignore token & go next\n    if (this.token !== this.tok.T_TRAIT) {\n      this.error(this.tok.T_TRAIT);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    this.expect(\"{\");\n    const body = this.next().read_class_body(true, false);\n    return result(propName, body);\n  },\n  /*\n   * reading a use statement\n   * ```ebnf\n   * trait_use_statement ::= namespace_name (',' namespace_name)* ('{' trait_use_alias '}')?\n   * ```\n   */\n  read_trait_use_statement: function () {\n    // defines use statements\n    const node = this.node(\"traituse\");\n    this.expect(this.tok.T_USE) && this.next();\n    const traits = [this.read_namespace_name()];\n    let adaptations = null;\n    while (this.token === \",\") {\n      traits.push(this.next().read_namespace_name());\n    }\n    if (this.token === \"{\") {\n      adaptations = [];\n      // defines alias statements\n      while (this.next().token !== this.EOF) {\n        if (this.token === \"}\") break;\n        adaptations.push(this.read_trait_use_alias());\n        this.expect(\";\");\n      }\n      if (this.expect(\"}\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    }\n    return node(traits, adaptations);\n  },\n  /*\n   * Reading trait alias\n   * ```ebnf\n   * trait_use_alias ::= namespace_name ( T_DOUBLE_COLON T_STRING )? (T_INSTEADOF namespace_name) | (T_AS member_flags? T_STRING)\n   * ```\n   * name list : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L303\n   * trait adaptation : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L742\n   */\n  read_trait_use_alias: function () {\n    const node = this.node();\n    let trait = null;\n    let method;\n\n    if (this.is(\"IDENTIFIER\")) {\n      method = this.node(\"identifier\");\n      const methodName = this.text();\n      this.next();\n      method = method(methodName);\n    } else {\n      method = this.read_namespace_name();\n\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        this.next();\n        if (\n          this.token === this.tok.T_STRING ||\n          (this.version >= 700 && this.is(\"IDENTIFIER\"))\n        ) {\n          trait = method;\n          method = this.node(\"identifier\");\n          const methodName = this.text();\n          this.next();\n          method = method(methodName);\n        } else {\n          this.expect(this.tok.T_STRING);\n        }\n      } else {\n        // convert identifier as string\n        method = method.name;\n      }\n    }\n\n    // handle trait precedence\n    if (this.token === this.tok.T_INSTEADOF) {\n      return node(\n        \"traitprecedence\",\n        trait,\n        method,\n        this.next().read_name_list()\n      );\n    } else if (this.token === this.tok.T_AS) {\n      // handle trait alias\n      let flags = null;\n      let alias = null;\n      if (this.next().is(\"T_MEMBER_FLAGS\")) {\n        flags = this.read_member_flags();\n      }\n\n      if (\n        this.token === this.tok.T_STRING ||\n        (this.version >= 700 && this.is(\"IDENTIFIER\"))\n      ) {\n        alias = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        alias = alias(name);\n      } else if (flags === false) {\n        // no visibility flags and no name => too bad\n        this.expect(this.tok.T_STRING);\n      }\n\n      return node(\"traitalias\", trait, method, alias, flags);\n    }\n\n    // handle errors\n    this.expect([this.tok.T_AS, this.tok.T_INSTEADOF]);\n    return node(\"traitalias\", trait, method, null, null);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar comment = {\n  /*\n   *  Comments with // or # or / * ... * /\n   */\n  read_comment: function () {\n    const text = this.text();\n    let result = this.ast.prepare(\n      text.substring(0, 2) === \"/*\" ? \"commentblock\" : \"commentline\",\n      null,\n      this\n    );\n    const offset = this.lexer.yylloc.first_offset;\n    // handle location on comment\n    const prev = this.prev;\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n  /*\n   * Comments with / ** ... * /\n   */\n  read_doc_comment: function () {\n    let result = this.ast.prepare(\"commentblock\", null, this);\n    const offset = this.lexer.yylloc.first_offset;\n    const text = this.text();\n    const prev = this.prev;\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar expr = {\n  read_expr: function (expr) {\n    const result = this.node();\n    if (this.token === \"@\") {\n      if (!expr) {\n        expr = this.next().read_expr();\n      }\n      return result(\"silent\", expr);\n    }\n    if (!expr) {\n      expr = this.read_expr_item();\n    }\n    // binary operations\n    if (this.token === \"|\") {\n      return result(\"bin\", \"|\", expr, this.next().read_expr());\n    }\n    if (this.token === \"&\") {\n      return result(\"bin\", \"&\", expr, this.next().read_expr());\n    }\n    if (this.token === \"^\") {\n      return result(\"bin\", \"^\", expr, this.next().read_expr());\n    }\n    if (this.token === \".\") {\n      return result(\"bin\", \".\", expr, this.next().read_expr());\n    }\n    if (this.token === \"+\") {\n      return result(\"bin\", \"+\", expr, this.next().read_expr());\n    }\n    if (this.token === \"-\") {\n      return result(\"bin\", \"-\", expr, this.next().read_expr());\n    }\n    if (this.token === \"*\") {\n      return result(\"bin\", \"*\", expr, this.next().read_expr());\n    }\n    if (this.token === \"/\") {\n      return result(\"bin\", \"/\", expr, this.next().read_expr());\n    }\n    if (this.token === \"%\") {\n      return result(\"bin\", \"%\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_POW) {\n      return result(\"bin\", \"**\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_SL) {\n      return result(\"bin\", \"<<\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_SR) {\n      return result(\"bin\", \">>\", expr, this.next().read_expr());\n    }\n    // more binary operations (formerly bool)\n    if (this.token === this.tok.T_BOOLEAN_OR) {\n      return result(\"bin\", \"||\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_LOGICAL_OR) {\n      return result(\"bin\", \"or\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_BOOLEAN_AND) {\n      return result(\"bin\", \"&&\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_LOGICAL_AND) {\n      return result(\"bin\", \"and\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_LOGICAL_XOR) {\n      return result(\"bin\", \"xor\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_IDENTICAL) {\n      return result(\"bin\", \"===\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_NOT_IDENTICAL) {\n      return result(\"bin\", \"!==\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_EQUAL) {\n      return result(\"bin\", \"==\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_NOT_EQUAL) {\n      return result(\"bin\", \"!=\", expr, this.next().read_expr());\n    }\n    if (this.token === \"<\") {\n      return result(\"bin\", \"<\", expr, this.next().read_expr());\n    }\n    if (this.token === \">\") {\n      return result(\"bin\", \">\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_SMALLER_OR_EQUAL) {\n      return result(\"bin\", \"<=\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_IS_GREATER_OR_EQUAL) {\n      return result(\"bin\", \">=\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_SPACESHIP) {\n      return result(\"bin\", \"<=>\", expr, this.next().read_expr());\n    }\n    if (this.token === this.tok.T_INSTANCEOF) {\n      expr = result(\n        \"bin\",\n        \"instanceof\",\n        expr,\n        this.next().read_class_name_reference()\n      );\n      if (\n        this.token !== \";\" &&\n        this.token !== this.tok.T_INLINE_HTML &&\n        this.token !== this.EOF\n      ) {\n        expr = this.read_expr(expr);\n      }\n    }\n\n    // extra operations :\n    // $username = $_GET['user'] ?? 'nobody';\n    if (this.token === this.tok.T_COALESCE) {\n      return result(\"bin\", \"??\", expr, this.next().read_expr());\n    }\n\n    // extra operations :\n    // $username = $_GET['user'] ? true : false;\n    if (this.token === \"?\") {\n      let trueArg = null;\n      if (this.next().token !== \":\") {\n        trueArg = this.read_expr();\n      }\n      this.expect(\":\") && this.next();\n      return result(\"retif\", expr, trueArg, this.read_expr());\n    } else {\n      // see #193\n      result.destroy(expr);\n    }\n\n    return expr;\n  },\n\n  /*\n   * Reads a cast expression\n   */\n  read_expr_cast: function (type) {\n    return this.node(\"cast\")(type, this.text(), this.next().read_expr());\n  },\n\n  /*\n   * Read a isset variable\n   */\n  read_isset_variable: function () {\n    return this.read_expr();\n  },\n\n  /*\n   * Reads isset variables\n   */\n  read_isset_variables: function () {\n    return this.read_function_list(this.read_isset_variable, \",\");\n  },\n\n  /*\n   * Reads internal PHP functions\n   */\n  read_internal_functions_in_yacc: function () {\n    let result = null;\n    switch (this.token) {\n      case this.tok.T_ISSET:\n        {\n          result = this.node(\"isset\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const variables = this.read_isset_variables();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(variables);\n        }\n        break;\n      case this.tok.T_EMPTY:\n        {\n          result = this.node(\"empty\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const expression = this.read_expr();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(expression);\n        }\n        break;\n      case this.tok.T_INCLUDE:\n        result = this.node(\"include\")(false, false, this.next().read_expr());\n        break;\n      case this.tok.T_INCLUDE_ONCE:\n        result = this.node(\"include\")(true, false, this.next().read_expr());\n        break;\n      case this.tok.T_EVAL:\n        {\n          result = this.node(\"eval\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const expr = this.read_expr();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(expr);\n        }\n        break;\n      case this.tok.T_REQUIRE:\n        result = this.node(\"include\")(false, true, this.next().read_expr());\n        break;\n      case this.tok.T_REQUIRE_ONCE:\n        result = this.node(\"include\")(true, true, this.next().read_expr());\n        break;\n    }\n\n    return result;\n  },\n\n  /*\n   * Reads optional expression\n   */\n  read_optional_expr: function (stopToken) {\n    if (this.token !== stopToken) {\n      return this.read_expr();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads exit expression\n   */\n  read_exit_expr: function () {\n    let expression = null;\n\n    if (this.token === \"(\") {\n      this.next();\n      expression = this.read_optional_expr(\")\");\n      this.expect(\")\") && this.next();\n    }\n\n    return expression;\n  },\n\n  /*\n   * ```ebnf\n   * Reads an expression\n   *  expr ::= @todo\n   * ```\n   */\n  read_expr_item: function () {\n    let result,\n      expr,\n      attrs = [];\n    if (this.token === \"+\") {\n      return this.node(\"unary\")(\"+\", this.next().read_expr());\n    }\n    if (this.token === \"-\") {\n      return this.node(\"unary\")(\"-\", this.next().read_expr());\n    }\n    if (this.token === \"!\") {\n      return this.node(\"unary\")(\"!\", this.next().read_expr());\n    }\n    if (this.token === \"~\") {\n      return this.node(\"unary\")(\"~\", this.next().read_expr());\n    }\n\n    if (this.token === \"(\") {\n      expr = this.next().read_expr();\n      expr.parenthesizedExpression = true;\n      this.expect(\")\") && this.next();\n      return this.handleDereferencable(expr);\n    }\n\n    if (this.token === \"`\") {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1048\n      return this.read_encapsed_string(\"`\");\n    }\n\n    if (this.token === this.tok.T_LIST) {\n      let assign = null;\n      const isInner = this.innerList;\n      result = this.node(\"list\");\n      if (!isInner) {\n        assign = this.node(\"assign\");\n      }\n      if (this.next().expect(\"(\")) {\n        this.next();\n      }\n\n      if (!this.innerList) this.innerList = true;\n\n      // reads inner items\n      const assignList = this.read_array_pair_list(false);\n      if (this.expect(\")\")) {\n        this.next();\n      }\n\n      // check if contains at least one assignment statement\n      let hasItem = false;\n      for (let i = 0; i < assignList.length; i++) {\n        if (assignList[i] !== null && assignList[i].kind !== \"noop\") {\n          hasItem = true;\n          break;\n        }\n      }\n      if (!hasItem) {\n        /* istanbul ignore next */\n        this.raiseError(\n          \"Fatal Error :  Cannot use empty list on line \" +\n            this.lexer.yylloc.first_line\n        );\n      }\n\n      // handles the node resolution\n      if (!isInner) {\n        this.innerList = false;\n        if (this.expect(\"=\")) {\n          return assign(\n            result(assignList, false),\n            this.next().read_expr(),\n            \"=\"\n          );\n        } else {\n          // error fallback : list($a, $b);\n          /* istanbul ignore next */\n          return result(assignList, false);\n        }\n      } else {\n        return result(assignList, false);\n      }\n    }\n\n    if (this.token === this.tok.T_ATTRIBUTE) {\n      attrs = this.read_attr_list();\n    }\n\n    if (this.token === this.tok.T_CLONE) {\n      return this.node(\"clone\")(this.next().read_expr());\n    }\n\n    switch (this.token) {\n      case this.tok.T_INC:\n        return this.node(\"pre\")(\"+\", this.next().read_variable(false, false));\n\n      case this.tok.T_DEC:\n        return this.node(\"pre\")(\"-\", this.next().read_variable(false, false));\n\n      case this.tok.T_NEW:\n        return this.read_new_expr();\n\n      case this.tok.T_ISSET:\n      case this.tok.T_EMPTY:\n      case this.tok.T_INCLUDE:\n      case this.tok.T_INCLUDE_ONCE:\n      case this.tok.T_EVAL:\n      case this.tok.T_REQUIRE:\n      case this.tok.T_REQUIRE_ONCE:\n        return this.read_internal_functions_in_yacc();\n\n      case this.tok.T_MATCH:\n        return this.read_match_expression();\n      case this.tok.T_INT_CAST:\n        return this.read_expr_cast(\"int\");\n\n      case this.tok.T_DOUBLE_CAST:\n        return this.read_expr_cast(\"float\");\n\n      case this.tok.T_STRING_CAST:\n        return this.read_expr_cast(\n          this.text().indexOf(\"binary\") !== -1 ? \"binary\" : \"string\"\n        );\n\n      case this.tok.T_ARRAY_CAST:\n        return this.read_expr_cast(\"array\");\n\n      case this.tok.T_OBJECT_CAST:\n        return this.read_expr_cast(\"object\");\n\n      case this.tok.T_BOOL_CAST:\n        return this.read_expr_cast(\"bool\");\n\n      case this.tok.T_UNSET_CAST:\n        return this.read_expr_cast(\"unset\");\n\n      case this.tok.T_THROW: {\n        if (this.version < 800) {\n          this.raiseError(\"PHP 8+ is required to use throw as an expression\");\n        }\n        const result = this.node(\"throw\");\n        const expr = this.next().read_expr();\n        return result(expr);\n      }\n      case this.tok.T_EXIT: {\n        const useDie = this.lexer.yytext.toLowerCase() === \"die\";\n        result = this.node(\"exit\");\n        this.next();\n        const expression = this.read_exit_expr();\n        return result(expression, useDie);\n      }\n\n      case this.tok.T_PRINT:\n        return this.node(\"print\")(this.next().read_expr());\n\n      // T_YIELD (expr (T_DOUBLE_ARROW expr)?)?\n      case this.tok.T_YIELD: {\n        let value = null;\n        let key = null;\n        result = this.node(\"yield\");\n        if (this.next().is(\"EXPR\")) {\n          // reads the yield return value\n          value = this.read_expr();\n          if (this.token === this.tok.T_DOUBLE_ARROW) {\n            // reads the yield returned key\n            key = value;\n            value = this.next().read_expr();\n          }\n        }\n        return result(value, key);\n      }\n\n      // T_YIELD_FROM expr\n      case this.tok.T_YIELD_FROM:\n        result = this.node(\"yieldfrom\");\n        expr = this.next().read_expr();\n        return result(expr);\n\n      case this.tok.T_FN:\n      case this.tok.T_FUNCTION:\n        return this.read_inline_function(undefined, attrs);\n\n      case this.tok.T_STATIC: {\n        const backup = [this.token, this.lexer.getState()];\n        this.next();\n        if (\n          this.token === this.tok.T_FUNCTION ||\n          (this.version >= 704 && this.token === this.tok.T_FN)\n        ) {\n          // handles static function\n          return this.read_inline_function([0, 1, 0], attrs);\n        } else {\n          // rollback\n          this.lexer.tokens.push(backup);\n          this.next();\n        }\n      }\n    }\n\n    // SCALAR | VARIABLE\n    if (this.is(\"VARIABLE\")) {\n      result = this.node();\n      expr = this.read_variable(false, false);\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L877\n      // should accept only a variable\n      const isConst =\n        expr.kind === \"identifier\" ||\n        (expr.kind === \"staticlookup\" && expr.offset.kind === \"identifier\");\n\n      // VARIABLES SPECIFIC OPERATIONS\n      switch (this.token) {\n        case \"=\": {\n          if (isConst) this.error(\"VARIABLE\");\n          if (this.next().token == \"&\") {\n            return this.read_assignref(result, expr);\n          }\n          return result(\"assign\", expr, this.read_expr(), \"=\");\n        }\n\n        // operations :\n        case this.tok.T_PLUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"+=\");\n\n        case this.tok.T_MINUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"-=\");\n\n        case this.tok.T_MUL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"*=\");\n\n        case this.tok.T_POW_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"**=\");\n\n        case this.tok.T_DIV_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"/=\");\n\n        case this.tok.T_CONCAT_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \".=\");\n\n        case this.tok.T_MOD_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"%=\");\n\n        case this.tok.T_AND_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"&=\");\n\n        case this.tok.T_OR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"|=\");\n\n        case this.tok.T_XOR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"^=\");\n\n        case this.tok.T_SL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"<<=\");\n\n        case this.tok.T_SR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \">>=\");\n\n        case this.tok.T_COALESCE_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"??=\");\n\n        case this.tok.T_INC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"+\", expr);\n        case this.tok.T_DEC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"-\", expr);\n        default:\n          // see #193\n          result.destroy(expr);\n      }\n    } else if (this.is(\"SCALAR\")) {\n      result = this.node();\n      expr = this.read_scalar();\n      if (expr.kind === \"array\" && expr.shortForm && this.token === \"=\") {\n        // list assign\n        const list = this.convertToList(expr);\n        if (expr.loc) list.loc = expr.loc;\n        const right = this.next().read_expr();\n        return result(\"assign\", list, right, \"=\");\n      } else {\n        // see #189 - swap docs on nodes\n        result.destroy(expr);\n      }\n      // classic array\n      return this.handleDereferencable(expr);\n    } else {\n      this.error(\"EXPR\");\n      this.next();\n    }\n\n    // returns variable | scalar\n    return expr;\n  },\n\n  /*\n   * Recursively convert nested array to nested list.\n   */\n  convertToList: function (array) {\n    const convertedItems = array.items.map((entry) => {\n      if (\n        entry.value &&\n        entry.value.kind === \"array\" &&\n        entry.value.shortForm\n      ) {\n        entry.value = this.convertToList(entry.value);\n      }\n      return entry;\n    });\n    const node = this.node(\"list\")(convertedItems, true);\n    if (array.loc) node.loc = array.loc;\n    if (array.leadingComments) node.leadingComments = array.leadingComments;\n    if (array.trailingComments) node.trailingComments = array.trailingComments;\n    return node;\n  },\n\n  /*\n   * Reads assignment\n   * @param {*} left\n   */\n  read_assignref: function (result, left) {\n    this.next();\n    let right;\n    if (this.token === this.tok.T_NEW) {\n      if (this.version >= 700) {\n        this.error();\n      }\n      right = this.read_new_expr();\n    } else {\n      right = this.read_variable(false, false);\n    }\n\n    return result(\"assignref\", left, right);\n  },\n\n  /*\n   *\n   * inline_function:\n   * \t\tfunction returns_ref backup_doc_comment '(' parameter_list ')' lexical_vars return_type\n   * \t\tbackup_fn_flags '{' inner_statement_list '}' backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_CLOSURE, $2 | $13, $1, $3,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0),\n   * \t\t\t\t  $5, $7, $11, $8); CG(extra_fn_flags) = $9; }\n   * \t|\tfn returns_ref '(' parameter_list ')' return_type backup_doc_comment T_DOUBLE_ARROW backup_fn_flags backup_lex_pos expr backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_ARROW_FUNC, $2 | $12, $1, $7,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0), $4, NULL,\n   * \t\t\t\t  zend_ast_create(ZEND_AST_RETURN, $11), $6);\n   * \t\t\t\t  ((zend_ast_decl *) $$)->lex_pos = $10;\n   * \t\t\t\t  CG(extra_fn_flags) = $9; }   *\n   */\n  read_inline_function: function (flags, attrs) {\n    if (this.token === this.tok.T_FUNCTION) {\n      const result = this.read_function(true, flags, attrs);\n      result.attrGroups = attrs;\n      return result;\n    }\n    // introduced in PHP 7.4\n    if (!this.version >= 704) {\n      this.raiseError(\"Arrow Functions are not allowed\");\n    }\n    // as an arrowfunc\n    const node = this.node(\"arrowfunc\");\n    // eat T_FN\n    if (this.expect(this.tok.T_FN)) this.next();\n    // check the &\n    const isRef = this.is_reference();\n    // ...\n    if (this.expect(\"(\")) this.next();\n    const params = this.read_parameter_list();\n    if (this.expect(\")\")) this.next();\n    let nullable = false;\n    let returnType = null;\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n      returnType = this.read_types();\n    }\n    if (this.expect(this.tok.T_DOUBLE_ARROW)) this.next();\n    const body = this.read_expr();\n    const result = node(\n      params,\n      isRef,\n      body,\n      returnType,\n      nullable,\n      flags ? true : false\n    );\n    result.attrGroups = attrs;\n    return result;\n  },\n\n  read_match_expression: function () {\n    const node = this.node(\"match\");\n    this.expect(this.tok.T_MATCH) && this.next();\n    if (this.version < 800) {\n      this.raiseError(\"Match statements are not allowed before PHP 8\");\n    }\n    let cond = null;\n    let arms = [];\n    if (this.expect(\"(\")) this.next();\n    cond = this.read_expr();\n    if (this.expect(\")\")) this.next();\n    if (this.expect(\"{\")) this.next();\n    arms = this.read_match_arms();\n    if (this.expect(\"}\")) this.next();\n    return node(cond, arms);\n  },\n\n  read_match_arms: function () {\n    return this.read_list(() => this.read_match_arm(), \",\", true);\n  },\n\n  read_match_arm: function () {\n    if (this.token === \"}\") {\n      return;\n    }\n    return this.node(\"matcharm\")(this.read_match_arm_conds(), this.read_expr());\n  },\n\n  read_match_arm_conds: function () {\n    let conds = [];\n    if (this.token === this.tok.T_DEFAULT) {\n      conds = null;\n      this.next();\n    } else {\n      conds.push(this.read_expr());\n      while (this.token === \",\") {\n        this.next();\n        if (this.token === this.tok.T_DOUBLE_ARROW) {\n          this.next();\n          return conds;\n        }\n        conds.push(this.read_expr());\n      }\n    }\n    if (this.expect(this.tok.T_DOUBLE_ARROW)) {\n      this.next();\n    }\n    return conds;\n  },\n\n  read_attribute() {\n    const name = this.text();\n    let args = [];\n    this.next();\n    if (this.token === \"(\") {\n      args = this.read_argument_list();\n    }\n    return this.node(\"attribute\")(name, args);\n  },\n  read_attr_list() {\n    const list = [];\n    if (this.token === this.tok.T_ATTRIBUTE) {\n      do {\n        const attrGr = this.node(\"attrgroup\")([]);\n        this.next();\n        attrGr.attrs.push(this.read_attribute());\n        while (this.token === \",\") {\n          this.next();\n          if (this.token !== \"]\") attrGr.attrs.push(this.read_attribute());\n        }\n        list.push(attrGr);\n        this.expect(\"]\");\n        this.next();\n      } while (this.token === this.tok.T_ATTRIBUTE);\n    }\n    return list;\n  },\n\n  /*\n   * ```ebnf\n   *    new_expr ::= T_NEW (namespace_name function_argument_list) | (T_CLASS ... class declaration)\n   * ```\n   * https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L850\n   */\n  read_new_expr: function () {\n    const result = this.node(\"new\");\n    this.expect(this.tok.T_NEW) && this.next();\n    let args = [];\n    if (this.token === \"(\") {\n      this.next();\n      const newExp = this.read_expr();\n      this.expect(\")\");\n      this.next();\n      if (this.token === \"(\") {\n        args = this.read_argument_list();\n      }\n      return result(newExp, args);\n    }\n    const attrs = this.read_attr_list();\n    if (this.token === this.tok.T_CLASS) {\n      const what = this.node(\"class\");\n      // Annonymous class declaration\n      if (this.next().token === \"(\") {\n        args = this.read_argument_list();\n      }\n      const propExtends = this.read_extends_from();\n      const propImplements = this.read_implements_list();\n      let body = null;\n      if (this.expect(\"{\")) {\n        body = this.next().read_class_body(true, false);\n      }\n      const whatNode = what(null, propExtends, propImplements, body, [0, 0, 0]);\n      whatNode.attrGroups = attrs;\n      return result(whatNode, args);\n    }\n    // Already existing class\n    let name = this.read_new_class_name();\n    while (this.token === \"[\") {\n      const offsetNode = this.node(\"offsetlookup\");\n      const offset = this.next().read_encaps_var_offset();\n      this.expect(\"]\") && this.next();\n      name = offsetNode(name, offset);\n    }\n    if (this.token === \"(\") {\n      args = this.read_argument_list();\n    }\n    return result(name, args);\n  },\n  /*\n   * Reads a class name\n   * ```ebnf\n   * read_new_class_name ::= namespace_name | variable\n   * ```\n   */\n  read_new_class_name: function () {\n    if (\n      this.token === this.tok.T_NS_SEPARATOR ||\n      this.token === this.tok.T_NAME_RELATIVE ||\n      this.token === this.tok.T_NAME_QUALIFIED ||\n      this.token === this.tok.T_NAME_FULLY_QUALIFIED ||\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_NAMESPACE\n    ) {\n      let result = this.read_namespace_name(true);\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        result = this.read_static_getter(result);\n      }\n      return result;\n    } else if (this.is(\"VARIABLE\")) {\n      return this.read_variable(true, false);\n    } else {\n      this.expect([this.tok.T_STRING, \"VARIABLE\"]);\n    }\n  },\n  handleDereferencable: function (expr) {\n    while (this.token !== this.EOF) {\n      if (\n        this.token === this.tok.T_OBJECT_OPERATOR ||\n        this.token === this.tok.T_DOUBLE_COLON\n      ) {\n        expr = this.recursive_variable_chain_scan(expr, false, false, true);\n      } else if (this.token === this.tok.T_CURLY_OPEN || this.token === \"[\") {\n        expr = this.read_dereferencable(expr);\n      } else if (this.token === \"(\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1118\n        expr = this.node(\"call\")(expr, this.read_argument_list());\n      } else {\n        return expr;\n      }\n    }\n    return expr;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _enum = {\n  /*\n   * reading an enum\n   * ```ebnf\n   * enum ::= enum_scope? T_ENUM T_STRING (':' NAMESPACE_NAME)? (T_IMPLEMENTS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' ENUM_BODY '}'\n   * ```\n   */\n  read_enum_declaration_statement: function (attrs) {\n    const result = this.node(\"enum\");\n    // graceful mode : ignore token & go next\n    if (!this.expect(this.tok.T_ENUM)) {\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const valueType = this.read_enum_value_type();\n    const propImplements = this.read_implements_list();\n    this.expect(\"{\");\n    const body = this.next().read_class_body(false, true);\n    const node = result(propName, valueType, propImplements, body);\n    if (attrs) node.attrGroups = attrs;\n    return node;\n  },\n\n  read_enum_value_type: function () {\n    if (this.token === \":\") {\n      return this.next().read_namespace_name();\n    }\n\n    return null;\n  },\n\n  read_enum_case: function () {\n    this.expect(this.tok.T_CASE);\n    const result = this.node(\"enumcase\");\n    let caseName = this.node(\"identifier\");\n    const name = this.next().text();\n    this.next();\n    caseName = caseName(name);\n\n    const value = this.token === \"=\" ? this.next().read_expr() : null;\n    this.expect(\";\");\n\n    return result(caseName, value);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _function = {\n  /*\n   * checks if current token is a reference keyword\n   */\n  is_reference: function () {\n    if (this.token === \"&\") {\n      this.next();\n      return true;\n    }\n    return false;\n  },\n  /*\n   * checks if current token is a variadic keyword\n   */\n  is_variadic: function () {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      this.next();\n      return true;\n    }\n    return false;\n  },\n  /*\n   * reading a function\n   * ```ebnf\n   * function ::= function_declaration code_block\n   * ```\n   */\n  read_function: function (closure, flag, attrs, locStart) {\n    const result = this.read_function_declaration(\n      closure ? 1 : flag ? 2 : 0,\n      flag && flag[1] === 1,\n      attrs || [],\n      locStart\n    );\n    if (flag && flag[2] == 1) {\n      // abstract function :\n      result.parseFlags(flag);\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\"{\")) {\n        result.body = this.read_code_block(false);\n        if (result.loc && result.body.loc) {\n          result.loc.end = result.body.loc.end;\n        }\n      }\n      if (!closure && flag) {\n        result.parseFlags(flag);\n      }\n    }\n    return result;\n  },\n  /*\n   * reads a function declaration (without his body)\n   * ```ebnf\n   * function_declaration ::= T_FUNCTION '&'?  T_STRING '(' parameter_list ')'\n   * ```\n   */\n  read_function_declaration: function (type, isStatic, attrs, locStart) {\n    let nodeName = \"function\";\n    if (type === 1) {\n      nodeName = \"closure\";\n    } else if (type === 2) {\n      nodeName = \"method\";\n    }\n    const result = this.node(nodeName);\n\n    if (this.expect(this.tok.T_FUNCTION)) {\n      this.next();\n    }\n    const isRef = this.is_reference();\n    let name = false,\n      use = [],\n      returnType = null,\n      nullable = false;\n    if (type !== 1) {\n      const nameNode = this.node(\"identifier\");\n      if (type === 2) {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING || this.is(\"IDENTIFIER\")) {\n            name = this.text();\n            this.next();\n          } else if (this.version < 704) {\n            this.error(\"IDENTIFIER\");\n          }\n        } else if (this.token === this.tok.T_STRING) {\n          name = this.text();\n          this.next();\n        } else {\n          this.error(\"IDENTIFIER\");\n        }\n      } else {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING) {\n            name = this.text();\n            this.next();\n          } else if (this.version >= 704) {\n            if (!this.expect(\"(\")) {\n              this.next();\n            }\n          } else {\n            this.error(this.tok.T_STRING);\n            this.next();\n          }\n        } else {\n          if (this.expect(this.tok.T_STRING)) {\n            name = this.text();\n          }\n          this.next();\n        }\n      }\n      name = nameNode(name);\n    }\n    if (this.expect(\"(\")) this.next();\n    const params = this.read_parameter_list(name.name === \"__construct\");\n    if (this.expect(\")\")) this.next();\n    if (type === 1) {\n      use = this.read_lexical_vars();\n    }\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n      returnType = this.read_types();\n    }\n    const apply_attrgroup_location = (node) => {\n      node.attrGroups = attrs || [];\n\n      if (locStart && node.loc) {\n        node.loc.start = locStart;\n        if (node.loc.source) {\n          node.loc.source = this.lexer._input.substr(\n            node.loc.start.offset,\n            node.loc.end.offset - node.loc.start.offset\n          );\n        }\n      }\n      return node;\n    };\n\n    if (type === 1) {\n      // closure\n      return apply_attrgroup_location(\n        result(params, isRef, use, returnType, nullable, isStatic)\n      );\n    }\n    return apply_attrgroup_location(\n      result(name, params, isRef, returnType, nullable)\n    );\n  },\n\n  read_lexical_vars: function () {\n    let result = [];\n\n    if (this.token === this.tok.T_USE) {\n      this.next();\n      this.expect(\"(\") && this.next();\n      result = this.read_lexical_var_list();\n      this.expect(\")\") && this.next();\n    }\n\n    return result;\n  },\n\n  read_list_with_dangling_comma: function (item) {\n    const result = [];\n\n    while (this.token != this.EOF) {\n      result.push(item());\n      if (this.token == \",\") {\n        this.next();\n        if (this.version >= 800 && this.token === \")\") {\n          return result;\n        }\n      } else if (this.token == \")\") {\n        break;\n      } else {\n        this.error([\",\", \")\"]);\n        break;\n      }\n    }\n    return result;\n  },\n\n  read_lexical_var_list: function () {\n    return this.read_list_with_dangling_comma(this.read_lexical_var.bind(this));\n  },\n\n  /*\n   * ```ebnf\n   * lexical_var ::= '&'? T_VARIABLE\n   * ```\n   */\n  read_lexical_var: function () {\n    if (this.token === \"&\") {\n      return this.read_byref(this.read_lexical_var.bind(this));\n    }\n    const result = this.node(\"variable\");\n    this.expect(this.tok.T_VARIABLE);\n    const name = this.text().substring(1);\n    this.next();\n    return result(name, false);\n  },\n  /*\n   * reads a list of parameters\n   * ```ebnf\n   *  parameter_list ::= (parameter ',')* parameter?\n   * ```\n   */\n  read_parameter_list: function (is_class_constructor) {\n    if (this.token !== \")\") {\n      let wasVariadic = false;\n\n      return this.read_list_with_dangling_comma(\n        function () {\n          const parameter = this.read_parameter(is_class_constructor);\n          if (parameter) {\n            // variadic parameters can only be defined at the end of the parameter list\n            if (wasVariadic) {\n              this.raiseError(\n                \"Unexpected parameter after a variadic parameter\"\n              );\n            }\n            if (parameter.variadic) {\n              wasVariadic = true;\n            }\n          }\n          return parameter;\n        }.bind(this),\n        \",\"\n      );\n    }\n\n    return [];\n  },\n  /*\n   * ```ebnf\n   *  parameter ::= type? '&'? T_ELLIPSIS? T_VARIABLE ('=' expr)?\n   * ```\n   * @see https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L640\n   */\n  read_parameter: function (is_class_constructor) {\n    const node = this.node(\"parameter\");\n    let parameterName = null;\n    let value = null;\n    let types = null;\n    let nullable = false;\n    let readonly = false;\n    let attrs = [];\n    if (this.token === this.tok.T_ATTRIBUTE) attrs = this.read_attr_list();\n\n    if (this.version >= 801 && this.token === this.tok.T_READ_ONLY) {\n      if (is_class_constructor) {\n        this.next();\n        readonly = true;\n      } else {\n        this.raiseError(\n          \"readonly properties can be used only on class constructor\"\n        );\n      }\n    }\n\n    const flags = this.read_promoted();\n\n    if (\n      !readonly &&\n      this.version >= 801 &&\n      this.token === this.tok.T_READ_ONLY\n    ) {\n      if (is_class_constructor) {\n        this.next();\n        readonly = true;\n      } else {\n        this.raiseError(\n          \"readonly properties can be used only on class constructor\"\n        );\n      }\n    }\n\n    if (this.token === \"?\") {\n      this.next();\n      nullable = true;\n    }\n    types = this.read_types();\n    if (nullable && !types) {\n      this.raiseError(\n        \"Expecting a type definition combined with nullable operator\"\n      );\n    }\n    const isRef = this.is_reference();\n    const isVariadic = this.is_variadic();\n    if (this.expect(this.tok.T_VARIABLE)) {\n      parameterName = this.node(\"identifier\");\n      const name = this.text().substring(1);\n      this.next();\n      parameterName = parameterName(name);\n    }\n    if (this.token == \"=\") {\n      value = this.next().read_expr();\n    }\n    const result = node(\n      parameterName,\n      types,\n      value,\n      isRef,\n      isVariadic,\n      readonly,\n      nullable,\n      flags\n    );\n    if (attrs) result.attrGroups = attrs;\n    return result;\n  },\n  read_types() {\n    const MODE_UNSET = \"unset\";\n    const MODE_UNION = \"union\";\n    const MODE_INTERSECTION = \"intersection\";\n\n    const types = [];\n    let mode = MODE_UNSET;\n    const type = this.read_type();\n    if (!type) return null;\n\n    // we have matched a single type\n    types.push(type);\n\n    // is the current token a:\n    // - | for union type\n    // - & for intersection type (> php 8.1)\n    while (this.token === \"|\" || (this.version >= 801 && this.token === \"&\")) {\n      const nextToken = this.peek();\n\n      if (\n        nextToken === this.tok.T_ELLIPSIS ||\n        nextToken === this.tok.T_VARIABLE\n      ) {\n        // the next token is part of the variable (or the variable itself),\n        // we're not gonna match anymore types\n        break;\n      }\n\n      if (mode === MODE_UNSET) {\n        // are we in union or intersection \"mode\"\n        mode = this.token === \"|\" ? MODE_UNION : MODE_INTERSECTION;\n      } else {\n        // it is not possible to mix \"modes\"\n        if (\n          (mode === MODE_UNION && this.token !== \"|\") ||\n          (mode === MODE_INTERSECTION && this.token !== \"&\")\n        ) {\n          this.raiseError(\n            'Unexpect token \"' + this.token + '\", \"|\" and \"&\" can not be mixed'\n          );\n        }\n      }\n\n      this.next();\n      types.push(this.read_type());\n    }\n    if (types.length === 1) {\n      return types[0];\n    } else {\n      return mode === MODE_INTERSECTION\n        ? this.node(\"intersectiontype\")(types)\n        : this.node(\"uniontype\")(types);\n    }\n  },\n  read_promoted() {\n    const MODIFIER_PUBLIC = 1;\n    const MODIFIER_PROTECTED = 2;\n    const MODIFIER_PRIVATE = 4;\n    if (this.token === this.tok.T_PUBLIC) {\n      this.next();\n      return MODIFIER_PUBLIC;\n    } else if (this.token === this.tok.T_PROTECTED) {\n      this.next();\n      return MODIFIER_PROTECTED;\n    } else if (this.token === this.tok.T_PRIVATE) {\n      this.next();\n      return MODIFIER_PRIVATE;\n    }\n    return 0;\n  },\n  /*\n   * Reads a list of arguments\n   * ```ebnf\n   *  function_argument_list ::= '(' (argument_list (',' argument_list)*)? ')'\n   * ```\n   */\n  read_argument_list: function () {\n    let result = [];\n    this.expect(\"(\") && this.next();\n    if (\n      this.version >= 801 &&\n      this.token === this.tok.T_ELLIPSIS &&\n      this.peek() === \")\"\n    ) {\n      result.push(this.node(\"variadicplaceholder\")());\n      this.next();\n    } else if (this.token !== \")\") {\n      result = this.read_non_empty_argument_list();\n    }\n    this.expect(\")\") && this.next();\n    return result;\n  },\n  /*\n   * Reads non empty argument list\n   */\n  read_non_empty_argument_list: function () {\n    let wasVariadic = false;\n\n    return this.read_function_list(\n      function () {\n        const argument = this.read_argument();\n        if (argument) {\n          const isVariadic = argument.kind === \"variadic\";\n          // variadic arguments can only be followed by other variadic arguments\n          if (wasVariadic && !isVariadic) {\n            this.raiseError(\n              \"Unexpected non-variadic argument after a variadic argument\"\n            );\n          }\n          if (isVariadic) {\n            wasVariadic = true;\n          }\n        }\n        return argument;\n      }.bind(this),\n      \",\"\n    );\n  },\n  /*\n   * ```ebnf\n   *    argument_list ::= T_STRING ':' expr | T_ELLIPSIS? expr\n   * ```\n   */\n  read_argument: function () {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      return this.node(\"variadic\")(this.next().read_expr());\n    }\n    if (\n      this.token === this.tok.T_STRING ||\n      Object.values(this.lexer.keywords).includes(this.token)\n    ) {\n      const nextToken = this.peek();\n      if (nextToken === \":\") {\n        if (this.version < 800) {\n          this.raiseError(\"PHP 8+ is required to use named arguments\");\n        }\n        return this.node(\"namedargument\")(\n          this.text(),\n          this.next().next().read_expr()\n        );\n      }\n    }\n    return this.read_expr();\n  },\n  /*\n   * read type hinting\n   * ```ebnf\n   *  type ::= T_ARRAY | T_CALLABLE | namespace_name\n   * ```\n   */\n  read_type: function () {\n    const result = this.node();\n    if (this.token === this.tok.T_ARRAY || this.token === this.tok.T_CALLABLE) {\n      const type = this.text();\n      this.next();\n      return result(\"typereference\", type.toLowerCase(), type);\n    } else if (\n      this.token === this.tok.T_NAME_RELATIVE ||\n      this.token === this.tok.T_NAME_QUALIFIED ||\n      this.token === this.tok.T_NAME_FULLY_QUALIFIED ||\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_STATIC\n    ) {\n      const type = this.text();\n      const backup = [this.token, this.lexer.getState()];\n      this.next();\n      if (\n        this.token !== this.tok.T_NS_SEPARATOR &&\n        this.ast.typereference.types.indexOf(type.toLowerCase()) > -1\n      ) {\n        return result(\"typereference\", type.toLowerCase(), type);\n      } else {\n        // rollback a classic namespace\n        this.lexer.tokens.push(backup);\n        this.next();\n        // fix : destroy not consumed node (release comments)\n        result.destroy();\n        return this.read_namespace_name();\n      }\n    }\n    // fix : destroy not consumed node (release comments)\n    result.destroy();\n    return null;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _if = {\n  /*\n   * Reads an IF statement\n   *\n   * ```ebnf\n   *  if ::= T_IF '(' expr ')' ':' ...\n   * ```\n   */\n  read_if: function () {\n    const result = this.node(\"if\");\n    const test = this.next().read_if_expr();\n    let body = null;\n    let alternate = null;\n    let shortForm = false;\n\n    if (this.token === \":\") {\n      shortForm = true;\n      this.next();\n      body = this.node(\"block\");\n      const items = [];\n      while (this.token !== this.EOF && this.token !== this.tok.T_ENDIF) {\n        if (this.token === this.tok.T_ELSEIF) {\n          alternate = this.read_elseif_short();\n          break;\n        } else if (this.token === this.tok.T_ELSE) {\n          alternate = this.read_else_short();\n          break;\n        }\n        items.push(this.read_inner_statement());\n      }\n      body = body(null, items);\n      this.expect(this.tok.T_ENDIF) && this.next();\n      this.expectEndOfStatement();\n    } else {\n      body = this.read_statement();\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_if();\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.next().read_statement();\n      }\n    }\n    return result(test, body, alternate, shortForm);\n  },\n  /*\n   * reads an if expression : '(' expr ')'\n   */\n  read_if_expr: function () {\n    this.expect(\"(\") && this.next();\n    const result = this.read_expr();\n    this.expect(\")\") && this.next();\n    return result;\n  },\n  /*\n   * reads an elseif (expr): statements\n   */\n  read_elseif_short: function () {\n    let alternate = null;\n    const result = this.node(\"if\");\n    const test = this.next().read_if_expr();\n    if (this.expect(\":\")) this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_elseif_short();\n        break;\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.read_else_short();\n        break;\n      }\n      items.push(this.read_inner_statement());\n    }\n    return result(test, body(null, items), alternate, true);\n  },\n  /*\n   *\n   */\n  read_else_short: function () {\n    if (this.next().expect(\":\")) this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      items.push(this.read_inner_statement());\n    }\n    return body(null, items);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar loops = {\n  /*\n   * Reads a while statement\n   * ```ebnf\n   * while ::= T_WHILE (statement | ':' inner_statement_list T_ENDWHILE ';')\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L587\n   * @return {While}\n   */\n  read_while: function () {\n    const result = this.node(\"while\");\n    this.expect(this.tok.T_WHILE) && this.next();\n    let test = null;\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    test = this.read_expr();\n    if (this.expect(\")\")) this.next();\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDWHILE);\n    } else {\n      body = this.read_statement();\n    }\n    return result(test, body, shortForm);\n  },\n  /*\n   * Reads a do / while loop\n   * ```ebnf\n   * do ::= T_DO statement T_WHILE '(' expr ')' ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L423\n   * @return {Do}\n   */\n  read_do: function () {\n    const result = this.node(\"do\");\n    this.expect(this.tok.T_DO) && this.next();\n    let test = null;\n    let body = null;\n    body = this.read_statement();\n    if (this.expect(this.tok.T_WHILE)) {\n      if (this.next().expect(\"(\")) this.next();\n      test = this.read_expr();\n      if (this.expect(\")\")) this.next();\n      if (this.expect(\";\")) this.next();\n    }\n    return result(test, body);\n  },\n  /*\n   * Read a for incremental loop\n   * ```ebnf\n   * for ::= T_FOR '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement\n   * for_statement ::= statement | ':' inner_statement_list T_ENDFOR ';'\n   * for_exprs ::= expr? (',' expr)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L425\n   * @return {For}\n   */\n  read_for: function () {\n    const result = this.node(\"for\");\n    this.expect(this.tok.T_FOR) && this.next();\n    let init = [];\n    let test = [];\n    let increment = [];\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    if (this.token !== \";\") {\n      init = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token !== \";\") {\n      test = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token !== \")\") {\n      increment = this.read_list(this.read_expr, \",\");\n      if (this.expect(\")\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOR);\n    } else {\n      body = this.read_statement();\n    }\n    return result(init, test, increment, body, shortForm);\n  },\n  /*\n   * Reads a foreach loop\n   * ```ebnf\n   * foreach ::= '(' expr T_AS foreach_variable (T_DOUBLE_ARROW foreach_variable)? ')' statement\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L438\n   * @return {Foreach}\n   */\n  read_foreach: function () {\n    const result = this.node(\"foreach\");\n    this.expect(this.tok.T_FOREACH) && this.next();\n    let source = null;\n    let key = null;\n    let value = null;\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    source = this.read_expr();\n    if (this.expect(this.tok.T_AS)) {\n      this.next();\n      value = this.read_foreach_variable();\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        key = value;\n        value = this.next().read_foreach_variable();\n      }\n    }\n\n    // grammatically correct but not supported by PHP\n    if (key && key.kind === \"list\") {\n      this.raiseError(\"Fatal Error : Cannot use list as key element\");\n    }\n\n    if (this.expect(\")\")) this.next();\n\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOREACH);\n    } else {\n      body = this.read_statement();\n    }\n    return result(source, key, value, body, shortForm);\n  },\n  /*\n   * Reads a foreach variable statement\n   * ```ebnf\n   * foreach_variable =\n   *    variable |\n   *    '&' variable |\n   *    T_LIST '(' assignment_list ')' |\n   *    '[' assignment_list ']'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L544\n   * @return {Expression}\n   */\n  read_foreach_variable: function () {\n    if (this.token === this.tok.T_LIST || this.token === \"[\") {\n      const isShort = this.token === \"[\";\n      const result = this.node(\"list\");\n      this.next();\n      if (!isShort && this.expect(\"(\")) this.next();\n      const assignList = this.read_array_pair_list(isShort);\n      if (this.expect(isShort ? \"]\" : \")\")) this.next();\n      return result(assignList, isShort);\n    } else {\n      return this.read_variable(false, false);\n    }\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar main = {\n  /*\n   * ```ebnf\n   * start ::= (namespace | top_statement)*\n   * ```\n   */\n  read_start: function () {\n    if (this.token == this.tok.T_NAMESPACE) {\n      return this.read_namespace();\n    } else {\n      return this.read_top_statement();\n    }\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar namespace = {\n  /*\n   * Reads a namespace declaration block\n   * ```ebnf\n   * namespace ::= T_NAMESPACE namespace_name? '{'\n   *    top_statements\n   * '}'\n   * | T_NAMESPACE namespace_name ';' top_statements\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.php\n   * @return {Namespace}\n   */\n  read_namespace: function () {\n    const result = this.node(\"namespace\");\n    let body;\n    this.expect(this.tok.T_NAMESPACE) && this.next();\n    let name;\n\n    if (this.token === \"{\") {\n      name = {\n        name: [\"\"],\n      };\n    } else {\n      name = this.read_namespace_name();\n    }\n    this.currentNamespace = name;\n\n    if (this.token === \";\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(this.EOF);\n      return result(name.name, body, false);\n    } else if (this.token === \"{\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(\"}\") && this.next();\n      if (\n        body.length === 0 &&\n        this.extractDoc &&\n        this._docs.length > this._docIndex\n      ) {\n        body.push(this.node(\"noop\")());\n      }\n      return result(name.name, body, true);\n    } else {\n      this.error([\"{\", \";\"]);\n      // graceful mode :\n      this.currentNamespace = name;\n      body = this.read_top_statements();\n      this.expect(this.EOF);\n      return result(name, body, false);\n    }\n  },\n  /*\n   * Reads a namespace name\n   * ```ebnf\n   *  namespace_name ::= T_NS_SEPARATOR? (T_STRING T_NS_SEPARATOR)* T_STRING\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.rules.php\n   * @return {Reference}\n   */\n  read_namespace_name: function (resolveReference) {\n    const result = this.node();\n    let resolution;\n    let name = this.text();\n    switch (this.token) {\n      case this.tok.T_NAME_RELATIVE:\n        resolution = this.ast.name.RELATIVE_NAME;\n        name = name.replace(/^namespace\\\\/, \"\");\n        break;\n      case this.tok.T_NAME_QUALIFIED:\n        resolution = this.ast.name.QUALIFIED_NAME;\n        break;\n      case this.tok.T_NAME_FULLY_QUALIFIED:\n        resolution = this.ast.name.FULL_QUALIFIED_NAME;\n        break;\n      default:\n        resolution = this.ast.name.UNQUALIFIED_NAME;\n        if (!this.expect(this.tok.T_STRING)) {\n          // graceful mode\n          return result(\"name\", \"\", this.ast.name.FULL_QUALIFIED_NAME);\n        }\n    }\n\n    this.next();\n\n    if (resolveReference || this.token !== \"(\") {\n      if (name.toLowerCase() === \"parent\") {\n        return result(\"parentreference\", name);\n      } else if (name.toLowerCase() === \"self\") {\n        return result(\"selfreference\", name);\n      }\n    }\n\n    return result(\"name\", name, resolution);\n  },\n  /*\n   * Reads a use statement\n   * ```ebnf\n   * use_statement ::= T_USE\n   *   use_type? use_declarations |\n   *   use_type use_statement '{' use_declarations '}' |\n   *   use_statement '{' use_declarations(=>typed) '}'\n   * ';'\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.importing.php\n   * @return {UseGroup}\n   */\n  read_use_statement: function () {\n    let result = this.node(\"usegroup\");\n    let items = [];\n    let name = null;\n    this.expect(this.tok.T_USE) && this.next();\n    const type = this.read_use_type();\n    items.push(this.read_use_declaration(false));\n    if (this.token === \",\") {\n      items = items.concat(this.next().read_use_declarations(false));\n    } else if (this.token === \"{\") {\n      name = items[0].name;\n      items = this.next().read_use_declarations(type === null);\n      this.expect(\"}\") && this.next();\n    }\n    result = result(name, type, items);\n    this.expect(\";\") && this.next();\n    return result;\n  },\n  /*\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1045\n   */\n  read_class_name_reference: function () {\n    // resolved as the same\n    return this.read_variable(true, false);\n  },\n  /*\n   * Reads a use declaration\n   * ```ebnf\n   * use_declaration ::= use_type? namespace_name use_alias\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem}\n   */\n  read_use_declaration: function (typed) {\n    const result = this.node(\"useitem\");\n    let type = null;\n    if (typed) type = this.read_use_type();\n    const name = this.read_namespace_name();\n    const alias = this.read_use_alias();\n    return result(name.name, alias, type);\n  },\n  /*\n   * Reads a list of use declarations\n   * ```ebnf\n   * use_declarations ::= use_declaration (',' use_declaration)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem[]}\n   */\n  read_use_declarations: function (typed) {\n    const result = [this.read_use_declaration(typed)];\n    while (this.token === \",\") {\n      this.next();\n      if (typed) {\n        if (\n          this.token !== this.tok.T_NAME_RELATIVE &&\n          this.token !== this.tok.T_NAME_QUALIFIED &&\n          this.token !== this.tok.T_NAME_FULLY_QUALIFIED &&\n          this.token !== this.tok.T_FUNCTION &&\n          this.token !== this.tok.T_CONST &&\n          this.token !== this.tok.T_STRING\n        ) {\n          break;\n        }\n      } else if (\n        this.token !== this.tok.T_NAME_RELATIVE &&\n        this.token !== this.tok.T_NAME_QUALIFIED &&\n        this.token !== this.tok.T_NAME_FULLY_QUALIFIED &&\n        this.token !== this.tok.T_STRING &&\n        this.token !== this.tok.T_NS_SEPARATOR\n      ) {\n        break;\n      }\n      result.push(this.read_use_declaration(typed));\n    }\n    return result;\n  },\n  /*\n   * Reads a use statement\n   * ```ebnf\n   * use_alias ::= (T_AS T_STRING)?\n   * ```\n   * @return {String|null}\n   */\n  read_use_alias: function () {\n    let result = null;\n    if (this.token === this.tok.T_AS) {\n      if (this.next().expect(this.tok.T_STRING)) {\n        const aliasName = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        result = aliasName(name);\n      }\n    }\n    return result;\n  },\n  /*\n   * Reads the namespace type declaration\n   * ```ebnf\n   * use_type ::= (T_FUNCTION | T_CONST)?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L335\n   * @return {String|null} Possible values : function, const\n   */\n  read_use_type: function () {\n    if (this.token === this.tok.T_FUNCTION) {\n      this.next();\n      return this.ast.useitem.TYPE_FUNCTION;\n    } else if (this.token === this.tok.T_CONST) {\n      this.next();\n      return this.ast.useitem.TYPE_CONST;\n    }\n    return null;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nconst specialChar = {\n  \"\\\\\": \"\\\\\",\n  $: \"$\",\n  n: \"\\n\",\n  r: \"\\r\",\n  t: \"\\t\",\n  f: String.fromCharCode(12),\n  v: String.fromCharCode(11),\n  e: String.fromCharCode(27),\n};\n\nvar scalar = {\n  /*\n   * Unescape special chars\n   */\n  resolve_special_chars: function (text, doubleQuote) {\n    if (!doubleQuote) {\n      // single quote fix\n      return text.replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\'/g, \"'\");\n    }\n    return text\n      .replace(/\\\\\"/, '\"')\n      .replace(\n        /\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3}|u{([0-9a-fA-F]+)})/g,\n        ($match, p1, p2) => {\n          if (specialChar[p1]) {\n            return specialChar[p1];\n          } else if (\"x\" === p1[0] || \"X\" === p1[0]) {\n            return String.fromCodePoint(parseInt(p1.substr(1), 16));\n          } else if (\"u\" === p1[0]) {\n            return String.fromCodePoint(parseInt(p2, 16));\n          } else {\n            return String.fromCodePoint(parseInt(p1, 8));\n          }\n        }\n      );\n  },\n\n  /*\n   * Remove all leading spaces each line for heredoc text if there is a indentation\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  remove_heredoc_leading_whitespace_chars: function (\n    text,\n    indentation,\n    indentation_uses_spaces,\n    first_encaps_node\n  ) {\n    if (indentation === 0) {\n      return text;\n    }\n\n    this.check_heredoc_indentation_level(\n      text,\n      indentation,\n      indentation_uses_spaces,\n      first_encaps_node\n    );\n\n    const matchedChar = indentation_uses_spaces ? \" \" : \"\\t\";\n    const removementRegExp = new RegExp(\n      `\\\\n${matchedChar}{${indentation}}`,\n      \"g\"\n    );\n    const removementFirstEncapsNodeRegExp = new RegExp(\n      `^${matchedChar}{${indentation}}`\n    );\n\n    // Rough replace, need more check\n    if (first_encaps_node) {\n      // Remove text leading whitespace\n      text = text.replace(removementFirstEncapsNodeRegExp, \"\");\n    }\n\n    // Remove leading whitespace after \\n\n    return text.replace(removementRegExp, \"\\n\");\n  },\n\n  /*\n   * Check indentation level of heredoc in text, if mismatch, raiseError\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  check_heredoc_indentation_level: function (\n    text,\n    indentation,\n    indentation_uses_spaces,\n    first_encaps_node\n  ) {\n    const textSize = text.length;\n    let offset = 0;\n    let leadingWhitespaceCharCount = 0;\n    /*\n     * @var inCoutingState {boolean} reset to true after a new line\n     * @private\n     */\n    let inCoutingState = true;\n    const chToCheck = indentation_uses_spaces ? \" \" : \"\\t\";\n    let inCheckState = false;\n    if (!first_encaps_node) {\n      // start from first \\n\n      offset = text.indexOf(\"\\n\");\n      // if no \\n, just return\n      if (offset === -1) {\n        return;\n      }\n      offset++;\n    }\n    while (offset < textSize) {\n      if (inCoutingState) {\n        if (text[offset] === chToCheck) {\n          leadingWhitespaceCharCount++;\n        } else {\n          inCheckState = true;\n        }\n      } else {\n        inCoutingState = false;\n      }\n\n      if (\n        text[offset] !== \"\\n\" &&\n        inCheckState &&\n        leadingWhitespaceCharCount < indentation\n      ) {\n        this.raiseError(\n          `Invalid body indentation level (expecting an indentation at least ${indentation})`\n        );\n      } else {\n        inCheckState = false;\n      }\n\n      if (text[offset] === \"\\n\") {\n        // Reset counting state\n        inCoutingState = true;\n        leadingWhitespaceCharCount = 0;\n      }\n      offset++;\n    }\n  },\n\n  /*\n   * Reads dereferencable scalar\n   */\n  read_dereferencable_scalar: function () {\n    let result = null;\n\n    switch (this.token) {\n      case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        {\n          let value = this.node(\"string\");\n          const text = this.text();\n          let offset = 0;\n          if (text[0] === \"b\" || text[0] === \"B\") {\n            offset = 1;\n          }\n          const isDoubleQuote = text[offset] === '\"';\n          this.next();\n          const textValue = this.resolve_special_chars(\n            text.substring(offset + 1, text.length - 1),\n            isDoubleQuote\n          );\n          value = value(\n            isDoubleQuote,\n            textValue,\n            offset === 1, // unicode flag\n            text\n          );\n          if (this.token === this.tok.T_DOUBLE_COLON) {\n            // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1151\n            result = this.read_static_getter(value);\n          } else {\n            // dirrect string\n            result = value;\n          }\n        }\n        break;\n      case this.tok.T_ARRAY: // array parser\n        result = this.read_array();\n        break;\n      case \"[\": // short array format\n        result = this.read_array();\n        break;\n    }\n\n    return result;\n  },\n\n  /*\n   * ```ebnf\n   *  scalar ::= T_MAGIC_CONST\n   *       | T_LNUMBER | T_DNUMBER\n   *       | T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE? T_END_HEREDOC\n   *       | '\"' encaps_list '\"'\n   *       | T_START_HEREDOC encaps_list T_END_HEREDOC\n   *       | namespace_name (T_DOUBLE_COLON T_STRING)?\n   * ```\n   */\n  read_scalar: function () {\n    if (this.is(\"T_MAGIC_CONST\")) {\n      return this.get_magic_constant();\n    } else {\n      let value, node;\n      switch (this.token) {\n        // NUMERIC\n        case this.tok.T_LNUMBER: // long\n        case this.tok.T_DNUMBER: {\n          // double\n          const result = this.node(\"number\");\n          value = this.text();\n          this.next();\n          return result(value, null);\n        }\n        case this.tok.T_START_HEREDOC:\n          if (this.lexer.curCondition === \"ST_NOWDOC\") {\n            const start = this.lexer.yylloc.first_offset;\n            node = this.node(\"nowdoc\");\n            value = this.next().text();\n            // strip the last line return char\n            if (this.lexer.heredoc_label.indentation > 0) {\n              value = value.substring(\n                0,\n                value.length - this.lexer.heredoc_label.indentation\n              );\n            }\n            const lastCh = value[value.length - 1];\n            if (lastCh === \"\\n\") {\n              if (value[value.length - 2] === \"\\r\") {\n                // windows style\n                value = value.substring(0, value.length - 2);\n              } else {\n                // linux style\n                value = value.substring(0, value.length - 1);\n              }\n            } else if (lastCh === \"\\r\") {\n              // mac style\n              value = value.substring(0, value.length - 1);\n            }\n            this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE) && this.next();\n            this.expect(this.tok.T_END_HEREDOC) && this.next();\n            const raw = this.lexer._input.substring(\n              start,\n              this.lexer.yylloc.first_offset\n            );\n            node = node(\n              this.remove_heredoc_leading_whitespace_chars(\n                value,\n                this.lexer.heredoc_label.indentation,\n                this.lexer.heredoc_label.indentation_uses_spaces,\n                this.lexer.heredoc_label.first_encaps_node\n              ),\n              raw,\n              this.lexer.heredoc_label.label\n            );\n            this.lexer.heredoc_label.finished = true;\n            return node;\n          } else {\n            return this.read_encapsed_string(this.tok.T_END_HEREDOC);\n          }\n\n        case '\"':\n          return this.read_encapsed_string('\"');\n\n        case 'b\"':\n        case 'B\"': {\n          return this.read_encapsed_string('\"', true);\n        }\n\n        // TEXTS\n        case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        case this.tok.T_ARRAY: // array parser\n        case \"[\": // short array format\n          return this.read_dereferencable_scalar();\n        default: {\n          const err = this.error(\"SCALAR\");\n          // graceful mode : ignore token & return error node\n          this.next();\n          return err;\n        }\n      }\n    }\n  },\n  /*\n   * Handles the dereferencing\n   */\n  read_dereferencable: function (expr) {\n    let result, offset;\n    const node = this.node(\"offsetlookup\");\n    if (this.token === \"[\") {\n      offset = this.next().read_expr();\n      if (this.expect(\"]\")) this.next();\n      result = node(expr, offset);\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      offset = this.read_encapsed_string_item(false);\n      result = node(expr, offset);\n    }\n    return result;\n  },\n  /*\n   * Reads and extracts an encapsed item\n   * ```ebnf\n   * encapsed_string_item ::= T_ENCAPSED_AND_WHITESPACE\n   *  | T_DOLLAR_OPEN_CURLY_BRACES expr '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'\n   *  | T_CURLY_OPEN variable '}'\n   *  | variable\n   *  | variable '[' expr ']'\n   *  | variable T_OBJECT_OPERATOR T_STRING\n   * ```\n   * @return {String|Variable|Expr|Lookup}\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1219\n   */\n  read_encapsed_string_item: function (isDoubleQuote) {\n    const encapsedPart = this.node(\"encapsedpart\");\n    let syntax = null;\n    let curly = false;\n    let result = this.node(),\n      offset,\n      node,\n      name;\n\n    // plain text\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1222\n    if (this.token === this.tok.T_ENCAPSED_AND_WHITESPACE) {\n      const text = this.text();\n      this.next();\n\n      // if this.lexer.heredoc_label.first_encaps_node -> remove first indents\n      result = result(\n        \"string\",\n        false,\n        this.version >= 703 && !this.lexer.heredoc_label.finished\n          ? this.remove_heredoc_leading_whitespace_chars(\n              this.resolve_special_chars(text, isDoubleQuote),\n              this.lexer.heredoc_label.indentation,\n              this.lexer.heredoc_label.indentation_uses_spaces,\n              this.lexer.heredoc_label.first_encaps_node\n            )\n          : text,\n        false,\n        text\n      );\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      syntax = \"simple\";\n      curly = true;\n      // dynamic variable name\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1239\n      name = null;\n      if (this.next().token === this.tok.T_STRING_VARNAME) {\n        name = this.node(\"variable\");\n        const varName = this.text();\n        this.next();\n        // check if lookup an offset\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1243\n        result.destroy();\n        if (this.token === \"[\") {\n          name = name(varName, false);\n          node = this.node(\"offsetlookup\");\n          offset = this.next().read_expr();\n          this.expect(\"]\") && this.next();\n          result = node(name, offset);\n        } else {\n          result = name(varName, false);\n        }\n      } else {\n        result = result(\"variable\", this.read_expr(), false);\n      }\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_CURLY_OPEN) {\n      // expression\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1246\n      syntax = \"complex\";\n      result.destroy();\n      result = this.next().read_variable(false, false);\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_VARIABLE) {\n      syntax = \"simple\";\n      // plain variable\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1231\n      result.destroy();\n      result = this.read_simple_variable();\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1233\n      if (this.token === \"[\") {\n        node = this.node(\"offsetlookup\");\n        offset = this.next().read_encaps_var_offset();\n        this.expect(\"]\") && this.next();\n        result = node(result, offset);\n      }\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1236\n      if (this.token === this.tok.T_OBJECT_OPERATOR) {\n        node = this.node(\"propertylookup\");\n        this.next().expect(this.tok.T_STRING);\n        const what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        result = node(result, what(name));\n      }\n\n      // error / fallback\n    } else {\n      this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE);\n      const value = this.text();\n      this.next();\n      // consider it as string\n      result.destroy();\n      result = result(\"string\", false, value, false, value);\n    }\n\n    // reset first_encaps_node to false after access any node\n    this.lexer.heredoc_label.first_encaps_node = false;\n    return encapsedPart(result, syntax, curly);\n  },\n  /*\n   * Reads an encapsed string\n   */\n  read_encapsed_string: function (expect, isBinary = false) {\n    const labelStart = this.lexer.yylloc.first_offset;\n    let node = this.node(\"encapsed\");\n    this.next();\n    const start = this.lexer.yylloc.prev_offset - (isBinary ? 1 : 0);\n    const value = [];\n    let type = null;\n\n    if (expect === \"`\") {\n      type = this.ast.encapsed.TYPE_SHELL;\n    } else if (expect === '\"') {\n      type = this.ast.encapsed.TYPE_STRING;\n    } else {\n      type = this.ast.encapsed.TYPE_HEREDOC;\n    }\n\n    // reading encapsed parts\n    while (this.token !== expect && this.token !== this.EOF) {\n      value.push(this.read_encapsed_string_item(true));\n    }\n    if (\n      value.length > 0 &&\n      value[value.length - 1].kind === \"encapsedpart\" &&\n      value[value.length - 1].expression.kind === \"string\"\n    ) {\n      const node = value[value.length - 1].expression;\n      const lastCh = node.value[node.value.length - 1];\n      if (lastCh === \"\\n\") {\n        if (node.value[node.value.length - 2] === \"\\r\") {\n          // windows style\n          node.value = node.value.substring(0, node.value.length - 2);\n        } else {\n          // linux style\n          node.value = node.value.substring(0, node.value.length - 1);\n        }\n      } else if (lastCh === \"\\r\") {\n        // mac style\n        node.value = node.value.substring(0, node.value.length - 1);\n      }\n    }\n    this.expect(expect) && this.next();\n    const raw = this.lexer._input.substring(\n      type === \"heredoc\" ? labelStart : start - 1,\n      this.lexer.yylloc.first_offset\n    );\n    node = node(value, raw, type);\n\n    if (expect === this.tok.T_END_HEREDOC) {\n      node.label = this.lexer.heredoc_label.label;\n      this.lexer.heredoc_label.finished = true;\n    }\n    return node;\n  },\n  /*\n   * Constant token\n   */\n  get_magic_constant: function () {\n    const result = this.node(\"magic\");\n    const name = this.text();\n    this.next();\n    return result(name.toUpperCase(), name);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar statement = {\n  /*\n   * reading a list of top statements (helper for top_statement*)\n   * ```ebnf\n   *  top_statements ::= top_statement*\n   * ```\n   */\n  read_top_statements: function () {\n    let result = [];\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      const statement = this.read_top_statement();\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n    return result;\n  },\n  /*\n   * reading a top statement\n   * ```ebnf\n   *  top_statement ::=\n   *       namespace | function | class\n   *       | interface | trait\n   *       | use_statements | const_list\n   *       | statement\n   * ```\n   */\n  read_top_statement: function () {\n    let attrs = [];\n    if (this.token === this.tok.T_ATTRIBUTE) {\n      attrs = this.read_attr_list();\n    }\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false, attrs);\n      // optional flags\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_READ_ONLY:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement(attrs);\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement(attrs);\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n      case this.tok.T_ENUM:\n        return this.read_enum_declaration_statement(attrs);\n      case this.tok.T_USE:\n        return this.read_use_statement();\n      case this.tok.T_CONST: {\n        const result = this.node(\"constantstatement\");\n        const items = this.next().read_const_list();\n        this.expectEndOfStatement();\n        return result(null, items);\n      }\n      case this.tok.T_NAMESPACE:\n        return this.read_namespace();\n      case this.tok.T_HALT_COMPILER: {\n        const result = this.node(\"halt\");\n        if (this.next().expect(\"(\")) this.next();\n        if (this.expect(\")\")) this.next();\n        this.expect(\";\");\n        this.lexer.done = true;\n        return result(this.lexer._input.substring(this.lexer.offset));\n      }\n      default:\n        return this.read_statement();\n    }\n  },\n  /*\n   * reads a list of simple inner statements (helper for inner_statement*)\n   * ```ebnf\n   *  inner_statements ::= inner_statement*\n   * ```\n   */\n  read_inner_statements: function () {\n    let result = [];\n    while (this.token != this.EOF && this.token !== \"}\") {\n      const statement = this.read_inner_statement();\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n    return result;\n  },\n  /*\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   const_list ::= T_CONST T_STRING '=' expr (',' T_STRING '=' expr)* ';'\n   * ```\n   */\n  read_const_list: function () {\n    return this.read_list(\n      function () {\n        this.expect(this.tok.T_STRING);\n        const result = this.node(\"constant\");\n        let constName = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        constName = constName(name);\n        if (this.expect(\"=\")) {\n          return result(constName, this.next().read_expr());\n        } else {\n          // fallback\n          return result(constName, null);\n        }\n      },\n      \",\",\n      false\n    );\n  },\n  /*\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   declare_list ::= IDENTIFIER '=' expr (',' IDENTIFIER '=' expr)*\n   * ```\n   * @retrurn {Array}\n   */\n  read_declare_list: function () {\n    const result = [];\n    while (this.token != this.EOF && this.token !== \")\") {\n      this.expect(this.tok.T_STRING);\n      const directive = this.node(\"declaredirective\");\n      let key = this.node(\"identifier\");\n      const name = this.text();\n      this.next();\n      key = key(name);\n      let value = null;\n      if (this.expect(\"=\")) {\n        value = this.next().read_expr();\n      }\n      result.push(directive(key, value));\n      if (this.token !== \",\") break;\n      this.next();\n    }\n    return result;\n  },\n  /*\n   * reads a simple inner statement\n   * ```ebnf\n   *  inner_statement ::= '{' inner_statements '}' | token\n   * ```\n   */\n  read_inner_statement: function () {\n    let attrs = [];\n    if (this.token === this.tok.T_ATTRIBUTE) {\n      attrs = this.read_attr_list();\n    }\n    switch (this.token) {\n      case this.tok.T_FUNCTION: {\n        const result = this.read_function(false, false);\n        result.attrGroups = attrs;\n        return result;\n      }\n      // optional flags\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n      case this.tok.T_ENUM:\n        return this.read_enum_declaration_statement();\n      case this.tok.T_HALT_COMPILER: {\n        this.raiseError(\n          \"__HALT_COMPILER() can only be used from the outermost scope\"\n        );\n        // fallback : returns a node but does not stop the parsing\n        let node = this.node(\"halt\");\n        this.next().expect(\"(\") && this.next();\n        this.expect(\")\") && this.next();\n        node = node(this.lexer._input.substring(this.lexer.offset));\n        this.expect(\";\") && this.next();\n        return node;\n      }\n      default:\n        return this.read_statement();\n    }\n  },\n  /*\n   * Reads statements\n   */\n  read_statement: function () {\n    switch (this.token) {\n      case \"{\":\n        return this.read_code_block(false);\n\n      case this.tok.T_IF:\n        return this.read_if();\n\n      case this.tok.T_SWITCH:\n        return this.read_switch();\n\n      case this.tok.T_FOR:\n        return this.read_for();\n\n      case this.tok.T_FOREACH:\n        return this.read_foreach();\n\n      case this.tok.T_WHILE:\n        return this.read_while();\n\n      case this.tok.T_DO:\n        return this.read_do();\n\n      case this.tok.T_COMMENT:\n        return this.read_comment();\n\n      case this.tok.T_DOC_COMMENT:\n        return this.read_doc_comment();\n\n      case this.tok.T_RETURN: {\n        const result = this.node(\"return\");\n        this.next();\n        const expr = this.read_optional_expr(\";\");\n        this.expectEndOfStatement();\n        return result(expr);\n      }\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L429\n      case this.tok.T_BREAK:\n      case this.tok.T_CONTINUE: {\n        const result = this.node(\n          this.token === this.tok.T_CONTINUE ? \"continue\" : \"break\"\n        );\n        this.next();\n        const level = this.read_optional_expr(\";\");\n        this.expectEndOfStatement();\n        return result(level);\n      }\n\n      case this.tok.T_GLOBAL: {\n        const result = this.node(\"global\");\n        const items = this.next().read_list(this.read_simple_variable, \",\");\n        this.expectEndOfStatement();\n        return result(items);\n      }\n\n      case this.tok.T_STATIC: {\n        const current = [this.token, this.lexer.getState()];\n        const result = this.node();\n        if (this.next().token === this.tok.T_DOUBLE_COLON) {\n          // static keyword for a class\n          this.lexer.tokens.push(current);\n          const expr = this.next().read_expr();\n          this.expectEndOfStatement(expr);\n          return result(\"expressionstatement\", expr);\n        }\n        if (this.token === this.tok.T_FUNCTION) {\n          return this.read_function(true, [0, 1, 0]);\n        }\n        const items = this.read_variable_declarations();\n        this.expectEndOfStatement();\n        return result(\"static\", items);\n      }\n\n      case this.tok.T_ECHO: {\n        const result = this.node(\"echo\");\n        const text = this.text();\n        const shortForm = text === \"<?=\" || text === \"<%=\";\n        const expressions = this.next().read_function_list(this.read_expr, \",\");\n        this.expectEndOfStatement();\n        return result(expressions, shortForm);\n      }\n\n      case this.tok.T_INLINE_HTML: {\n        const value = this.text();\n        let prevChar =\n          this.lexer.yylloc.first_offset > 0\n            ? this.lexer._input[this.lexer.yylloc.first_offset - 1]\n            : null;\n        const fixFirstLine = prevChar === \"\\r\" || prevChar === \"\\n\";\n        // revert back the first stripped line\n        if (fixFirstLine) {\n          if (\n            prevChar === \"\\n\" &&\n            this.lexer.yylloc.first_offset > 1 &&\n            this.lexer._input[this.lexer.yylloc.first_offset - 2] === \"\\r\"\n          ) {\n            prevChar = \"\\r\\n\";\n          }\n        }\n        const result = this.node(\"inline\");\n        this.next();\n        return result(value, fixFirstLine ? prevChar + value : value);\n      }\n\n      case this.tok.T_UNSET: {\n        const result = this.node(\"unset\");\n        this.next().expect(\"(\") && this.next();\n        const variables = this.read_function_list(this.read_variable, \",\");\n        this.expect(\")\") && this.next();\n        this.expect(\";\") && this.next();\n        return result(variables);\n      }\n\n      case this.tok.T_DECLARE: {\n        const result = this.node(\"declare\");\n        const body = [];\n        let mode;\n        this.next().expect(\"(\") && this.next();\n        const directives = this.read_declare_list();\n        this.expect(\")\") && this.next();\n        if (this.token === \":\") {\n          this.next();\n          while (\n            this.token != this.EOF &&\n            this.token !== this.tok.T_ENDDECLARE\n          ) {\n            // @todo : check declare_statement from php / not valid\n            body.push(this.read_top_statement());\n          }\n          if (\n            body.length === 0 &&\n            this.extractDoc &&\n            this._docs.length > this._docIndex\n          ) {\n            body.push(this.node(\"noop\")());\n          }\n          this.expect(this.tok.T_ENDDECLARE) && this.next();\n          this.expectEndOfStatement();\n          mode = this.ast.declare.MODE_SHORT;\n        } else if (this.token === \"{\") {\n          this.next();\n          while (this.token != this.EOF && this.token !== \"}\") {\n            // @todo : check declare_statement from php / not valid\n            body.push(this.read_top_statement());\n          }\n          if (\n            body.length === 0 &&\n            this.extractDoc &&\n            this._docs.length > this._docIndex\n          ) {\n            body.push(this.node(\"noop\")());\n          }\n          this.expect(\"}\") && this.next();\n          mode = this.ast.declare.MODE_BLOCK;\n        } else {\n          this.expect(\";\") && this.next();\n          mode = this.ast.declare.MODE_NONE;\n        }\n        return result(directives, body, mode);\n      }\n\n      case this.tok.T_TRY:\n        return this.read_try();\n\n      case this.tok.T_THROW: {\n        const result = this.node(\"throw\");\n        const expr = this.next().read_expr();\n        this.expectEndOfStatement();\n        return result(expr);\n      }\n\n      // ignore this (extra ponctuation)\n      case \";\": {\n        this.next();\n        return null;\n      }\n\n      case this.tok.T_STRING: {\n        const result = this.node();\n        const current = [this.token, this.lexer.getState()];\n        const labelNameText = this.text();\n        let labelName = this.node(\"identifier\");\n        // AST : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L457\n        if (this.next().token === \":\") {\n          labelName = labelName(labelNameText);\n          this.next();\n          return result(\"label\", labelName);\n        } else {\n          labelName.destroy();\n        }\n\n        // default fallback expr / T_STRING '::' (etc...)\n        result.destroy();\n        this.lexer.tokens.push(current);\n        const statement = this.node(\"expressionstatement\");\n        const expr = this.next().read_expr();\n        this.expectEndOfStatement(expr);\n        return statement(expr);\n      }\n\n      case this.tok.T_GOTO: {\n        const result = this.node(\"goto\");\n        let labelName = null;\n        if (this.next().expect(this.tok.T_STRING)) {\n          labelName = this.node(\"identifier\");\n          const name = this.text();\n          this.next();\n          labelName = labelName(name);\n          this.expectEndOfStatement();\n        }\n        return result(labelName);\n      }\n\n      default: {\n        // default fallback expr\n        const statement = this.node(\"expressionstatement\");\n        const expr = this.read_expr();\n        this.expectEndOfStatement(expr);\n        return statement(expr);\n      }\n    }\n  },\n  /*\n   * ```ebnf\n   *  code_block ::= '{' (inner_statements | top_statements) '}'\n   * ```\n   */\n  read_code_block: function (top) {\n    const result = this.node(\"block\");\n    this.expect(\"{\") && this.next();\n    const body = top\n      ? this.read_top_statements()\n      : this.read_inner_statements();\n    if (\n      body.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      body.push(this.node(\"noop\")());\n    }\n    this.expect(\"}\") && this.next();\n    return result(null, body);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _switch = {\n  /*\n   * Reads a switch statement\n   * ```ebnf\n   *  switch ::= T_SWITCH '(' expr ')' switch_case_list\n   * ```\n   * @return {Switch}\n   * @see http://php.net/manual/en/control-structures.switch.php\n   */\n  read_switch: function () {\n    const result = this.node(\"switch\");\n    this.expect(this.tok.T_SWITCH) && this.next();\n    this.expect(\"(\") && this.next();\n    const test = this.read_expr();\n    this.expect(\")\") && this.next();\n    const shortForm = this.token === \":\";\n    const body = this.read_switch_case_list();\n    return result(test, body, shortForm);\n  },\n  /*\n   * ```ebnf\n   *  switch_case_list ::= '{' ';'? case_list* '}' | ':' ';'? case_list* T_ENDSWITCH ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L566\n   */\n  read_switch_case_list: function () {\n    // DETECT SWITCH MODE\n    let expect = null;\n    const result = this.node(\"block\");\n    const items = [];\n    if (this.token === \"{\") {\n      expect = \"}\";\n    } else if (this.token === \":\") {\n      expect = this.tok.T_ENDSWITCH;\n    } else {\n      this.expect([\"{\", \":\"]);\n    }\n    this.next();\n    // OPTIONNAL ';'\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L570\n    if (this.token === \";\") {\n      this.next();\n    }\n    // EXTRACTING CASES\n    while (this.token !== this.EOF && this.token !== expect) {\n      items.push(this.read_case_list(expect));\n    }\n    if (\n      items.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      items.push(this.node(\"noop\")());\n    }\n    // CHECK END TOKEN\n    this.expect(expect) && this.next();\n    if (expect === this.tok.T_ENDSWITCH) {\n      this.expectEndOfStatement();\n    }\n    return result(null, items);\n  },\n  /*\n   * ```ebnf\n   *   case_list ::= ((T_CASE expr) | T_DEFAULT) (':' | ';') inner_statement*\n   * ```\n   */\n  read_case_list: function (stopToken) {\n    const result = this.node(\"case\");\n    let test = null;\n    if (this.token === this.tok.T_CASE) {\n      test = this.next().read_expr();\n    } else if (this.token === this.tok.T_DEFAULT) {\n      // the default entry - no condition\n      this.next();\n    } else {\n      this.expect([this.tok.T_CASE, this.tok.T_DEFAULT]);\n    }\n    // case_separator\n    this.expect([\":\", \";\"]) && this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (\n      this.token !== this.EOF &&\n      this.token !== stopToken &&\n      this.token !== this.tok.T_CASE &&\n      this.token !== this.tok.T_DEFAULT\n    ) {\n      items.push(this.read_inner_statement());\n    }\n    return result(test, body(null, items));\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar _try = {\n  /*\n   * ```ebnf\n   *  try ::= T_TRY '{' inner_statement* '}'\n   *          (\n   *              T_CATCH '(' namespace_name (variable)? ')' '{'  inner_statement* '}'\n   *          )*\n   *          (T_FINALLY '{' inner_statement* '}')?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L448\n   * @return {Try}\n   */\n  read_try: function () {\n    this.expect(this.tok.T_TRY);\n    const result = this.node(\"try\");\n    let always = null;\n    const catches = [];\n    const body = this.next().read_statement();\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L455\n    while (this.token === this.tok.T_CATCH) {\n      const item = this.node(\"catch\");\n      this.next().expect(\"(\") && this.next();\n      const what = this.read_list(this.read_namespace_name, \"|\", false);\n      let variable = null;\n      if (this.version < 800 || this.token === this.tok.T_VARIABLE) {\n        variable = this.read_variable(true, false);\n      }\n      this.expect(\")\");\n      catches.push(item(this.next().read_statement(), what, variable));\n    }\n    if (this.token === this.tok.T_FINALLY) {\n      always = this.next().read_statement();\n    }\n    return result(body, catches, always);\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar utils$1 = {\n  /*\n   * Reads a short form of tokens\n   * @param {Number} token - The ending token\n   * @return {Block}\n   */\n  read_short_form: function (token) {\n    const body = this.node(\"block\");\n    const items = [];\n    /* istanbul ignore next */\n    if (this.expect(\":\")) this.next();\n    while (this.token != this.EOF && this.token !== token) {\n      items.push(this.read_inner_statement());\n    }\n    if (\n      items.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      items.push(this.node(\"noop\")());\n    }\n    /* istanbul ignore next */\n    if (this.expect(token)) this.next();\n    this.expectEndOfStatement();\n    return body(null, items);\n  },\n\n  /*\n   * https://wiki.php.net/rfc/trailing-comma-function-calls\n   * @param {*} item\n   * @param {*} separator\n   */\n  read_function_list: function (item, separator) {\n    const result = [];\n    do {\n      if (this.token == separator && this.version >= 703 && result.length > 0) {\n        result.push(this.node(\"noop\")());\n        break;\n      }\n      result.push(item.apply(this, []));\n      if (this.token != separator) {\n        break;\n      }\n      if (this.next().token == \")\" && this.version >= 703) {\n        break;\n      }\n    } while (this.token != this.EOF);\n    return result;\n  },\n\n  /*\n   * Helper : reads a list of tokens / sample : T_STRING ',' T_STRING ...\n   * ```ebnf\n   * list ::= separator? ( item separator )* item\n   * ```\n   */\n  read_list: function (item, separator, preserveFirstSeparator) {\n    const result = [];\n\n    if (this.token == separator) {\n      if (preserveFirstSeparator) {\n        result.push(typeof item === \"function\" ? this.node(\"noop\")() : null);\n      }\n      this.next();\n    }\n\n    if (typeof item === \"function\") {\n      do {\n        const itemResult = item.apply(this, []);\n        if (itemResult) {\n          result.push(itemResult);\n        }\n        if (this.token != separator) {\n          break;\n        }\n      } while (this.next().token != this.EOF);\n    } else {\n      if (this.expect(item)) {\n        result.push(this.text());\n      } else {\n        return [];\n      }\n      while (this.next().token != this.EOF) {\n        if (this.token != separator) break;\n        // trim current separator & check item\n        if (this.next().token != item) break;\n        result.push(this.text());\n      }\n    }\n    return result;\n  },\n\n  /*\n   * Reads a list of names separated by a comma\n   *\n   * ```ebnf\n   * name_list ::= namespace (',' namespace)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php class foo extends bar, baz { }\n   * ```\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L726\n   * @return {Reference[]}\n   */\n  read_name_list: function () {\n    return this.read_list(this.read_namespace_name, \",\", false);\n  },\n\n  /*\n   * Reads the byref token and assign it to the specified node\n   * @param {*} cb\n   */\n  read_byref: function (cb) {\n    let byref = this.node(\"byref\");\n    this.next();\n    byref = byref(null);\n    const result = cb();\n    if (result) {\n      this.ast.swapLocations(result, byref, result, this);\n      result.byref = true;\n    }\n    return result;\n  },\n\n  /*\n   * Reads a list of variables declarations\n   *\n   * ```ebnf\n   * variable_declaration ::= T_VARIABLE ('=' expr)?*\n   * variable_declarations ::= variable_declaration (',' variable_declaration)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php static $a = 'hello', $b = 'world';\n   * ```\n   * @return {StaticVariable[]} Returns an array composed by a list of variables, or\n   * assign values\n   */\n  read_variable_declarations: function () {\n    return this.read_list(function () {\n      const node = this.node(\"staticvariable\");\n      let variable = this.node(\"variable\");\n      // plain variable name\n      /* istanbul ignore else */\n      if (this.expect(this.tok.T_VARIABLE)) {\n        const name = this.text().substring(1);\n        this.next();\n        variable = variable(name, false);\n      } else {\n        variable = variable(\"#ERR\", false);\n      }\n      if (this.token === \"=\") {\n        return node(variable, this.next().read_expr());\n      } else {\n        return variable;\n      }\n    }, \",\");\n  },\n\n  /*\n   * Reads class extends\n   */\n  read_extends_from: function () {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_namespace_name();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads interface extends list\n   */\n  read_interface_extends_list: function () {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads implements list\n   */\n  read_implements_list: function () {\n    if (this.token === this.tok.T_IMPLEMENTS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n};\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\nvar variable = {\n  /*\n   * Reads a variable\n   *\n   * ```ebnf\n   *   variable ::= &? ...complex @todo\n   * ```\n   *\n   * Some samples of parsed code :\n   * ```php\n   *  &$var                      // simple var\n   *  $var                      // simple var\n   *  classname::CONST_NAME     // dynamic class name with const retrieval\n   *  foo()                     // function call\n   *  $var->func()->property    // chained calls\n   * ```\n   */\n  read_variable: function (read_only, encapsed) {\n    let result;\n    // check the byref flag\n    if (this.token === \"&\") {\n      return this.read_byref(\n        this.read_variable.bind(this, read_only, encapsed)\n      );\n    }\n\n    // reads the entry point\n    if (this.is([this.tok.T_VARIABLE, \"$\"])) {\n      result = this.read_reference_variable(encapsed);\n    } else if (\n      this.is([\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        this.tok.T_NAME_RELATIVE,\n        this.tok.T_NAME_QUALIFIED,\n        this.tok.T_NAME_FULLY_QUALIFIED,\n        this.tok.T_NAMESPACE,\n      ])\n    ) {\n      result = this.node();\n      const name = this.read_namespace_name();\n      if (\n        this.token != this.tok.T_DOUBLE_COLON &&\n        this.token != \"(\" &&\n        [\"parentreference\", \"selfreference\"].indexOf(name.kind) === -1\n      ) {\n        // @see parser.js line 130 : resolves a conflict with scalar\n        const literal = name.name.toLowerCase();\n        if (literal === \"true\") {\n          result = name.destroy(result(\"boolean\", true, name.name));\n        } else if (literal === \"false\") {\n          result = name.destroy(result(\"boolean\", false, name.name));\n        } else if (literal === \"null\") {\n          result = name.destroy(result(\"nullkeyword\", name.name));\n        } else {\n          result.destroy(name);\n          result = name;\n        }\n      } else {\n        // @fixme possible #193 bug\n        result.destroy(name);\n        result = name;\n      }\n    } else if (this.token === this.tok.T_STATIC) {\n      result = this.node(\"staticreference\");\n      const raw = this.text();\n      this.next();\n      result = result(raw);\n    } else {\n      this.expect(\"VARIABLE\");\n    }\n\n    // static mode\n    if (this.token === this.tok.T_DOUBLE_COLON) {\n      result = this.read_static_getter(result, encapsed);\n    }\n\n    return this.recursive_variable_chain_scan(result, read_only, encapsed);\n  },\n\n  // resolves a static call\n  read_static_getter: function (what, encapsed) {\n    const result = this.node(\"staticlookup\");\n    let offset, name;\n    if (this.next().is([this.tok.T_VARIABLE, \"$\"])) {\n      offset = this.read_reference_variable(encapsed);\n    } else if (\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_CLASS ||\n      (this.version >= 700 && this.is(\"IDENTIFIER\"))\n    ) {\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    } else if (this.token === \"{\") {\n      offset = this.node(\"literal\");\n      name = this.next().read_expr();\n      this.expect(\"}\") && this.next();\n      offset = offset(\"literal\", name, null);\n      this.expect(\"(\");\n    } else {\n      this.error([this.tok.T_VARIABLE, this.tok.T_STRING]);\n      // graceful mode : set getter as error node and continue\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    }\n    return result(what, offset);\n  },\n\n  read_what: function (is_static_lookup = false) {\n    let what = null;\n    let name = null;\n    switch (this.next().token) {\n      case this.tok.T_STRING:\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n\n        if (is_static_lookup && this.token === this.tok.T_OBJECT_OPERATOR) {\n          this.error();\n        }\n        break;\n      case this.tok.T_VARIABLE:\n        what = this.node(\"variable\");\n        name = this.text().substring(1);\n        this.next();\n        what = what(name, false);\n        break;\n      case \"$\":\n        what = this.node();\n        this.next().expect([\"$\", \"{\", this.tok.T_VARIABLE]);\n        if (this.token === \"{\") {\n          // $obj->${$varname}\n          name = this.next().read_expr();\n          this.expect(\"}\") && this.next();\n          what = what(\"variable\", name, true);\n        } else {\n          // $obj->$$varname\n          name = this.read_expr();\n          what = what(\"variable\", name, false);\n        }\n        break;\n      case \"{\":\n        what = this.node(\"encapsedpart\");\n        name = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        what = what(name, \"complex\", false);\n        break;\n      default:\n        this.error([this.tok.T_STRING, this.tok.T_VARIABLE, \"$\", \"{\"]);\n        // graceful mode : set what as error mode & continue\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n        break;\n    }\n\n    return what;\n  },\n\n  recursive_variable_chain_scan: function (result, read_only, encapsed) {\n    let node, offset;\n    recursive_scan_loop: while (this.token != this.EOF) {\n      switch (this.token) {\n        case \"(\":\n          if (read_only) {\n            // @fixme : add more informations & test\n            return result;\n          } else {\n            result = this.node(\"call\")(result, this.read_argument_list());\n          }\n          break;\n        case \"[\":\n        case \"{\": {\n          const backet = this.token;\n          const isSquareBracket = backet === \"[\";\n          node = this.node(\"offsetlookup\");\n          this.next();\n          offset = false;\n          if (encapsed) {\n            offset = this.read_encaps_var_offset();\n            this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n          } else {\n            const isCallableVariable = isSquareBracket\n              ? this.token !== \"]\"\n              : this.token !== \"}\";\n            // callable_variable : https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1122\n            if (isCallableVariable) {\n              offset = this.read_expr();\n              this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n            } else {\n              this.next();\n            }\n          }\n          result = node(result, offset);\n          break;\n        }\n        case this.tok.T_DOUBLE_COLON:\n          // @see https://github.com/glayzzle/php-parser/issues/107#issuecomment-354104574\n          if (\n            result.kind === \"staticlookup\" &&\n            result.offset.kind === \"identifier\"\n          ) {\n            this.error();\n          }\n\n          node = this.node(\"staticlookup\");\n          result = node(result, this.read_what(true));\n\n          // fix 185\n          // static lookup dereferencables are limited to staticlookup over functions\n          /*if (dereferencable && this.token !== \"(\") {\n            this.error(\"(\");\n          }*/\n          break;\n        case this.tok.T_OBJECT_OPERATOR: {\n          node = this.node(\"propertylookup\");\n          result = node(result, this.read_what());\n          break;\n        }\n        case this.tok.T_NULLSAFE_OBJECT_OPERATOR: {\n          node = this.node(\"nullsafepropertylookup\");\n          result = node(result, this.read_what());\n          break;\n        }\n        default:\n          break recursive_scan_loop;\n      }\n    }\n    return result;\n  },\n  /*\n   * https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1231\n   */\n  read_encaps_var_offset: function () {\n    let offset = this.node();\n    if (this.token === this.tok.T_STRING) {\n      const text = this.text();\n      this.next();\n      offset = offset(\"identifier\", text);\n    } else if (this.token === this.tok.T_NUM_STRING) {\n      const num = this.text();\n      this.next();\n      offset = offset(\"number\", num, null);\n    } else if (this.token === \"-\") {\n      this.next();\n      const num = -1 * this.text();\n      this.expect(this.tok.T_NUM_STRING) && this.next();\n      offset = offset(\"number\", num, null);\n    } else if (this.token === this.tok.T_VARIABLE) {\n      const name = this.text().substring(1);\n      this.next();\n      offset = offset(\"variable\", name, false);\n    } else {\n      this.expect([\n        this.tok.T_STRING,\n        this.tok.T_NUM_STRING,\n        \"-\",\n        this.tok.T_VARIABLE,\n      ]);\n      // fallback : consider as identifier\n      const text = this.text();\n      this.next();\n      offset = offset(\"identifier\", text);\n    }\n    return offset;\n  },\n  /*\n   * ```ebnf\n   *  reference_variable ::=  simple_variable ('[' OFFSET ']')* | '{' EXPR '}'\n   * ```\n   * <code>\n   *  $foo[123];      // foo is an array ==> gets its entry\n   *  $foo{1};        // foo is a string ==> get the 2nd char offset\n   *  ${'foo'}[123];  // get the dynamic var $foo\n   *  $foo[123]{1};   // gets the 2nd char from the 123 array entry\n   * </code>\n   */\n  read_reference_variable: function (encapsed) {\n    let result = this.read_simple_variable();\n    let offset;\n    while (this.token != this.EOF) {\n      const node = this.node();\n      if (this.token == \"{\" && !encapsed) {\n        // @fixme check coverage, not sure thats working\n        offset = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        result = node(\"offsetlookup\", result, offset);\n      } else {\n        node.destroy();\n        break;\n      }\n    }\n    return result;\n  },\n  /*\n   * ```ebnf\n   *  simple_variable ::= T_VARIABLE | '$' '{' expr '}' | '$' simple_variable\n   * ```\n   */\n  read_simple_variable: function () {\n    let result = this.node(\"variable\");\n    let name;\n    if (\n      this.expect([this.tok.T_VARIABLE, \"$\"]) &&\n      this.token === this.tok.T_VARIABLE\n    ) {\n      // plain variable name\n      name = this.text().substring(1);\n      this.next();\n      result = result(name, false);\n    } else {\n      if (this.token === \"$\") this.next();\n      // dynamic variable name\n      switch (this.token) {\n        case \"{\": {\n          const expr = this.next().read_expr();\n          this.expect(\"}\") && this.next();\n          result = result(expr, true);\n          break;\n        }\n        case \"$\": // $$$var\n          result = result(this.read_simple_variable(), false);\n          break;\n        case this.tok.T_VARIABLE: {\n          // $$var\n          name = this.text().substring(1);\n          const node = this.node(\"variable\");\n          this.next();\n          result = result(node(name, false), false);\n          break;\n        }\n        default:\n          this.error([\"{\", \"$\", this.tok.T_VARIABLE]);\n          // graceful mode\n          name = this.text();\n          this.next();\n          result = result(name, false);\n      }\n    }\n    return result;\n  },\n};\n\n/**\n * @private\n */\nfunction isNumber(n) {\n  return n != \".\" && n != \",\" && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * The PHP Parser class that build the AST tree from the lexer\n *\n * @constructor Parser\n * @memberOf module:php-parser\n * @tutorial Parser\n * @property {Lexer} lexer - current lexer instance\n * @property {AST} ast - the AST factory instance\n * @property {number|string} token - current token\n * @property {boolean} extractDoc - should extract documentation as AST node\n * @property {boolean} extractTokens - should extract each token\n * @property {boolean} suppressErrors - should ignore parsing errors and continue\n * @property {boolean} debug - should output debug informations\n */\nconst Parser = function (lexer, ast) {\n  this.lexer = lexer;\n  this.ast = ast;\n  this.tok = lexer.tok;\n  this.EOF = lexer.EOF;\n  this.token = null;\n  this.prev = null;\n  this.debug = false;\n  this.version = 801;\n  this.extractDoc = false;\n  this.extractTokens = false;\n  this.suppressErrors = false;\n  const mapIt = function (item) {\n    return [item, null];\n  };\n  this.entries = {\n    // reserved_non_modifiers\n    IDENTIFIER: new Map(\n      [\n        this.tok.T_ABSTRACT,\n        this.tok.T_ARRAY,\n        this.tok.T_AS,\n        this.tok.T_BREAK,\n        this.tok.T_CALLABLE,\n        this.tok.T_CASE,\n        this.tok.T_CATCH,\n        this.tok.T_CLASS,\n        this.tok.T_CLASS_C,\n        this.tok.T_CLONE,\n        this.tok.T_CONST,\n        this.tok.T_CONTINUE,\n        this.tok.T_DECLARE,\n        this.tok.T_DEFAULT,\n        this.tok.T_DIR,\n        this.tok.T_DO,\n        this.tok.T_ECHO,\n        this.tok.T_ELSE,\n        this.tok.T_ELSEIF,\n        this.tok.T_EMPTY,\n        this.tok.T_ENDDECLARE,\n        this.tok.T_ENDFOR,\n        this.tok.T_ENDFOREACH,\n        this.tok.T_ENDIF,\n        this.tok.T_ENDSWITCH,\n        this.tok.T_ENDWHILE,\n        this.tok.T_ENUM,\n        this.tok.T_EVAL,\n        this.tok.T_EXIT,\n        this.tok.T_EXTENDS,\n        this.tok.T_FILE,\n        this.tok.T_FINAL,\n        this.tok.T_FINALLY,\n        this.tok.T_FN,\n        this.tok.T_FOR,\n        this.tok.T_FOREACH,\n        this.tok.T_FUNC_C,\n        this.tok.T_FUNCTION,\n        this.tok.T_GLOBAL,\n        this.tok.T_GOTO,\n        this.tok.T_IF,\n        this.tok.T_IMPLEMENTS,\n        this.tok.T_INCLUDE,\n        this.tok.T_INCLUDE_ONCE,\n        this.tok.T_INSTANCEOF,\n        this.tok.T_INSTEADOF,\n        this.tok.T_INTERFACE,\n        this.tok.T_ISSET,\n        this.tok.T_LINE,\n        this.tok.T_LIST,\n        this.tok.T_LOGICAL_AND,\n        this.tok.T_LOGICAL_OR,\n        this.tok.T_LOGICAL_XOR,\n        this.tok.T_MATCH,\n        this.tok.T_METHOD_C,\n        this.tok.T_NAMESPACE,\n        this.tok.T_NEW,\n        this.tok.T_NS_C,\n        this.tok.T_PRINT,\n        this.tok.T_PRIVATE,\n        this.tok.T_PROTECTED,\n        this.tok.T_PUBLIC,\n        this.tok.T_READ_ONLY,\n        this.tok.T_REQUIRE,\n        this.tok.T_REQUIRE_ONCE,\n        this.tok.T_RETURN,\n        this.tok.T_STATIC,\n        this.tok.T_SWITCH,\n        this.tok.T_THROW,\n        this.tok.T_TRAIT,\n        this.tok.T_TRY,\n        this.tok.T_UNSET,\n        this.tok.T_USE,\n        this.tok.T_VAR,\n        this.tok.T_WHILE,\n        this.tok.T_YIELD,\n      ].map(mapIt)\n    ),\n    VARIABLE: new Map(\n      [\n        this.tok.T_VARIABLE,\n        \"$\",\n        \"&\",\n        this.tok.T_STRING,\n        this.tok.T_NAME_RELATIVE,\n        this.tok.T_NAME_QUALIFIED,\n        this.tok.T_NAME_FULLY_QUALIFIED,\n        this.tok.T_NAMESPACE,\n        this.tok.T_STATIC,\n      ].map(mapIt)\n    ),\n    SCALAR: new Map(\n      [\n        this.tok.T_CONSTANT_ENCAPSED_STRING,\n        this.tok.T_START_HEREDOC,\n        this.tok.T_LNUMBER,\n        this.tok.T_DNUMBER,\n        this.tok.T_ARRAY,\n        \"[\",\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n        '\"',\n        'b\"',\n        'B\"',\n        \"-\",\n        this.tok.T_NS_SEPARATOR,\n      ].map(mapIt)\n    ),\n    T_MAGIC_CONST: new Map(\n      [\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n      ].map(mapIt)\n    ),\n    T_MEMBER_FLAGS: new Map(\n      [\n        this.tok.T_PUBLIC,\n        this.tok.T_PRIVATE,\n        this.tok.T_PROTECTED,\n        this.tok.T_STATIC,\n        this.tok.T_ABSTRACT,\n        this.tok.T_FINAL,\n      ].map(mapIt)\n    ),\n    EOS: new Map([\";\", this.EOF, this.tok.T_INLINE_HTML].map(mapIt)),\n    EXPR: new Map(\n      [\n        \"@\",\n        \"-\",\n        \"+\",\n        \"!\",\n        \"~\",\n        \"(\",\n        \"`\",\n        this.tok.T_LIST,\n        this.tok.T_CLONE,\n        this.tok.T_INC,\n        this.tok.T_DEC,\n        this.tok.T_NEW,\n        this.tok.T_ISSET,\n        this.tok.T_EMPTY,\n        this.tok.T_MATCH,\n        this.tok.T_INCLUDE,\n        this.tok.T_INCLUDE_ONCE,\n        this.tok.T_REQUIRE,\n        this.tok.T_REQUIRE_ONCE,\n        this.tok.T_EVAL,\n        this.tok.T_INT_CAST,\n        this.tok.T_DOUBLE_CAST,\n        this.tok.T_STRING_CAST,\n        this.tok.T_ARRAY_CAST,\n        this.tok.T_OBJECT_CAST,\n        this.tok.T_BOOL_CAST,\n        this.tok.T_UNSET_CAST,\n        this.tok.T_EXIT,\n        this.tok.T_PRINT,\n        this.tok.T_YIELD,\n        this.tok.T_STATIC,\n        this.tok.T_FUNCTION,\n        this.tok.T_FN,\n        // using VARIABLES :\n        this.tok.T_VARIABLE,\n        \"$\",\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        this.tok.T_NAME_RELATIVE,\n        this.tok.T_NAME_QUALIFIED,\n        this.tok.T_NAME_FULLY_QUALIFIED,\n        // using SCALAR :\n        this.tok.T_STRING, // @see variable.js line 45 > conflict with variable = shift/reduce :)\n        this.tok.T_CONSTANT_ENCAPSED_STRING,\n        this.tok.T_START_HEREDOC,\n        this.tok.T_LNUMBER,\n        this.tok.T_DNUMBER,\n        this.tok.T_ARRAY,\n        \"[\",\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n        '\"',\n        'b\"',\n        'B\"',\n        \"-\",\n        this.tok.T_NS_SEPARATOR,\n      ].map(mapIt)\n    ),\n  };\n};\n\n/**\n * helper : gets a token name\n * @function Parser#getTokenName\n * @memberOf module:php-parser\n */\nParser.prototype.getTokenName = function (token) {\n  if (!isNumber(token)) {\n    return \"'\" + token + \"'\";\n  } else {\n    if (token == this.EOF) return \"the end of file (EOF)\";\n    return this.lexer.engine.tokens.values[token];\n  }\n};\n\n/**\n * main entry point : converts a source code to AST\n * @function Parser#parse\n * @memberOf module:php-parser\n */\nParser.prototype.parse = function (code, filename) {\n  this._errors = [];\n  this.filename = filename || \"eval\";\n  this.currentNamespace = [\"\"];\n  if (this.extractDoc) {\n    this._docs = [];\n  } else {\n    this._docs = null;\n  }\n  if (this.extractTokens) {\n    this._tokens = [];\n  } else {\n    this._tokens = null;\n  }\n  this._docIndex = 0;\n  this._lastNode = null;\n  this.lexer.setInput(code);\n  this.lexer.all_tokens = this.extractTokens;\n  this.lexer.comment_tokens = this.extractDoc;\n  this.length = this.lexer._input.length;\n  this.innerList = false;\n  this.innerListForm = false;\n  const program = this.node(\"program\");\n  const childs = [];\n  this.next();\n  while (this.token != this.EOF) {\n    childs.push(this.read_start());\n  }\n  // append last comment\n  if (\n    childs.length === 0 &&\n    this.extractDoc &&\n    this._docs.length > this._docIndex\n  ) {\n    childs.push(this.node(\"noop\")());\n  }\n  // #176 : register latest position\n  this.prev = [\n    this.lexer.yylloc.last_line,\n    this.lexer.yylloc.last_column,\n    this.lexer.offset,\n  ];\n  const result = program(childs, this._errors, this._docs, this._tokens);\n  if (this.debug) {\n    const errors = this.ast.checkNodes();\n    /* istanbul ignore next */\n    if (errors.length > 0) {\n      errors.forEach(function (error) {\n        if (error.position) {\n          // eslint-disable-next-line no-console\n          console.log(\n            \"Node at line \" +\n              error.position.line +\n              \", column \" +\n              error.position.column\n          );\n        }\n        // eslint-disable-next-line no-console\n        console.log(error.stack.join(\"\\n\"));\n      });\n      throw new Error(\"Some nodes are not closed\");\n    }\n  }\n  return result;\n};\n\n/**\n * Raise an error\n * @function Parser#raiseError\n * @memberOf module:php-parser\n */\nParser.prototype.raiseError = function (message, msgExpect, expect, token) {\n  message += \" on line \" + this.lexer.yylloc.first_line;\n  if (!this.suppressErrors) {\n    const err = new SyntaxError(\n      message,\n      this.filename,\n      this.lexer.yylloc.first_line\n    );\n    err.lineNumber = this.lexer.yylloc.first_line;\n    err.fileName = this.filename;\n    err.columnNumber = this.lexer.yylloc.first_column;\n    throw err;\n  }\n  // Error node :\n  const node = this.ast.prepare(\"error\", null, this)(\n    message,\n    token,\n    this.lexer.yylloc.first_line,\n    expect\n  );\n  this._errors.push(node);\n  return node;\n};\n\n/**\n * handling errors\n * @function Parser#error\n * @memberOf module:php-parser\n */\nParser.prototype.error = function (expect) {\n  let msg = \"Parse Error : syntax error\";\n  let token = this.getTokenName(this.token);\n  let msgExpect = \"\";\n\n  if (this.token !== this.EOF) {\n    if (isNumber(this.token)) {\n      let symbol = this.text();\n      /* istanbul ignore next */\n      if (symbol.length > 10) {\n        symbol = symbol.substring(0, 7) + \"...\";\n      }\n      token = \"'\" + symbol + \"' (\" + token + \")\";\n    }\n    msg += \", unexpected \" + token;\n  }\n  if (expect && !Array.isArray(expect)) {\n    if (isNumber(expect) || expect.length === 1) {\n      msgExpect = \", expecting \" + this.getTokenName(expect);\n    }\n    msg += msgExpect;\n  }\n  return this.raiseError(msg, msgExpect, expect, token);\n};\n\n/**\n * Create a position node from the lexers position\n *\n * @function Parser#position\n * @memberOf module:php-parser\n * @return {Position}\n */\nParser.prototype.position = function () {\n  return new position(\n    this.lexer.yylloc.first_line,\n    this.lexer.yylloc.first_column,\n    this.lexer.yylloc.first_offset\n  );\n};\n\n/**\n * Creates a new AST node\n * @function Parser#node\n * @memberOf module:php-parser\n */\nParser.prototype.node = function (name) {\n  if (this.extractDoc) {\n    let docs = null;\n    if (this._docIndex < this._docs.length) {\n      docs = this._docs.slice(this._docIndex);\n      this._docIndex = this._docs.length;\n      /* istanbul ignore next */\n      if (this.debug) {\n        // eslint-disable-next-line no-console\n        console.log(new Error(\"Append docs on \" + name));\n        // eslint-disable-next-line no-console\n        console.log(docs);\n      }\n    }\n    const node = this.ast.prepare(name, docs, this);\n    /*\n     * TOKENS :\n     * node1 commentA token commmentB node2 commentC token commentD node3 commentE token\n     *\n     * AST :\n     * structure:S1 [\n     *    left: node1 ( trail: commentA ),\n     *    right: structure:S2 [\n     *       node2 (lead: commentB, trail: commentC),\n     *       node3 (lead: commentD)\n     *    ],\n     *    trail: commentE\n     * ]\n     *\n     * Algorithm :\n     *\n     * Attach the last comments on parent of current node\n     * If a new node is started and the parent has a trailing comment\n     * the move it on previous node\n     *\n     * start S2\n     * start node1\n     * consume node1 & set commentA as trailingComment on S2\n     * start S2\n     * S1 has a trailingComment, attach it on node1\n     * ...\n     * NOTE : As the trailingComment Behavior depends on AST, it will be build on\n     * the AST layer - last child node will keep it's trailingComment nodes\n     */\n    node.postBuild = function (self) {\n      if (this._docIndex < this._docs.length) {\n        if (this._lastNode) {\n          const offset = this.prev[2];\n          let max = this._docIndex;\n          for (; max < this._docs.length; max++) {\n            if (this._docs[max].offset > offset) {\n              break;\n            }\n          }\n          if (max > this._docIndex) {\n            // inject trailing comment on child node\n            this._lastNode.setTrailingComments(\n              this._docs.slice(this._docIndex, max)\n            );\n            this._docIndex = max;\n          }\n        } else if (this.token === this.EOF) {\n          // end of content\n          self.setTrailingComments(this._docs.slice(this._docIndex));\n          this._docIndex = this._docs.length;\n        }\n      }\n      this._lastNode = self;\n    }.bind(this);\n    return node;\n  }\n  return this.ast.prepare(name, null, this);\n};\n\n/**\n * expects an end of statement or end of file\n * @function Parser#expectEndOfStatement\n * @memberOf module:php-parser\n * @return {boolean}\n */\nParser.prototype.expectEndOfStatement = function (node) {\n  if (this.token === \";\") {\n    // include only real ';' statements\n    // https://github.com/glayzzle/php-parser/issues/164\n    if (node && this.lexer.yytext === \";\") {\n      node.includeToken(this);\n    }\n  } else if (this.token !== this.tok.T_INLINE_HTML && this.token !== this.EOF) {\n    this.error(\";\");\n    return false;\n  }\n  this.next();\n  return true;\n};\n\nconst ignoreStack = [\"parser.next\", \"parser.node\", \"parser.showlog\"];\n/**\n * outputs some debug information on current token\n * @private\n * @function Parser#showlog\n * @memberOf module:php-parser\n */\nParser.prototype.showlog = function () {\n  const stack = new Error().stack.split(\"\\n\");\n  let line;\n  for (let offset = 2; offset < stack.length; offset++) {\n    line = stack[offset].trim();\n    let found = false;\n    for (let i = 0; i < ignoreStack.length; i++) {\n      /* istanbul ignore next */\n      if (line.substring(3, 3 + ignoreStack[i].length) === ignoreStack[i]) {\n        found = true;\n        break;\n      }\n    }\n    /* istanbul ignore next */\n    if (!found) {\n      break;\n    }\n  }\n  // eslint-disable-next-line no-console\n  console.log(\n    \"Line \" +\n      this.lexer.yylloc.first_line +\n      \" : \" +\n      this.getTokenName(this.token) +\n      \">\" +\n      this.lexer.yytext +\n      \"<\" +\n      \" @-->\" +\n      line\n  );\n  return this;\n};\n\n/**\n * Force the parser to check the current token.\n *\n * If the current token does not match to expected token,\n * the an error will be raised.\n *\n * If the suppressError mode is activated, then the error will\n * be added to the program error stack and this function will return `false`.\n *\n * @function Parser#expect\n * @memberOf module:php-parser\n * @param {String|Number} token\n * @return {boolean}\n * @throws Error\n */\nParser.prototype.expect = function (token) {\n  if (Array.isArray(token)) {\n    if (token.indexOf(this.token) === -1) {\n      this.error(token);\n      return false;\n    }\n  } else if (this.token != token) {\n    this.error(token);\n    return false;\n  }\n  return true;\n};\n\n/**\n * Returns the current token contents\n * @function Parser#text\n * @memberOf module:php-parser\n * @return {String}\n */\nParser.prototype.text = function () {\n  return this.lexer.yytext;\n};\n\n/**\n * consume the next token\n * @function Parser#next\n * @memberOf module:php-parser\n */\nParser.prototype.next = function () {\n  // prepare the back command\n  if (this.token !== \";\" || this.lexer.yytext === \";\") {\n    // ignore '?>' from automated resolution\n    // https://github.com/glayzzle/php-parser/issues/168\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n  }\n\n  // eating the token\n  this.lex();\n\n  // showing the debug\n  if (this.debug) {\n    this.showlog();\n  }\n\n  // handling comments\n  if (this.extractDoc) {\n    while (\n      this.token === this.tok.T_COMMENT ||\n      this.token === this.tok.T_DOC_COMMENT\n    ) {\n      // APPEND COMMENTS\n      if (this.token === this.tok.T_COMMENT) {\n        this._docs.push(this.read_comment());\n      } else {\n        this._docs.push(this.read_doc_comment());\n      }\n    }\n  }\n\n  return this;\n};\n\n/**\n * Peek at the next token.\n * @function Parser#peek\n * @memberOf module:php-parser\n * @returns {string|number} Next Token\n */\nParser.prototype.peek = function () {\n  const lexerState = this.lexer.getState();\n  const nextToken = this.lexer.lex();\n  this.lexer.setState(lexerState);\n  return nextToken;\n};\n\n/**\n * Eating a token\n * @function Parser#lex\n * @memberOf module:php-parser\n */\nParser.prototype.lex = function () {\n  // append on token stack\n  if (this.extractTokens) {\n    do {\n      // the token\n      this.token = this.lexer.lex() || /* istanbul ignore next */ this.EOF;\n      if (this.token === this.EOF) return this;\n      let entry = this.lexer.yytext;\n      if (\n        Object.prototype.hasOwnProperty.call(\n          this.lexer.engine.tokens.values,\n          this.token\n        )\n      ) {\n        entry = [\n          this.lexer.engine.tokens.values[this.token],\n          entry,\n          this.lexer.yylloc.first_line,\n          this.lexer.yylloc.first_offset,\n          this.lexer.offset,\n        ];\n      } else {\n        entry = [\n          null,\n          entry,\n          this.lexer.yylloc.first_line,\n          this.lexer.yylloc.first_offset,\n          this.lexer.offset,\n        ];\n      }\n      this._tokens.push(entry);\n      if (this.token === this.tok.T_CLOSE_TAG) {\n        // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n        this.token = \";\";\n        return this;\n      } else if (this.token === this.tok.T_OPEN_TAG_WITH_ECHO) {\n        this.token = this.tok.T_ECHO;\n        return this;\n      }\n    } while (\n      this.token === this.tok.T_WHITESPACE || // ignore white space\n      (!this.extractDoc &&\n        (this.token === this.tok.T_COMMENT || // ignore single lines comments\n          this.token === this.tok.T_DOC_COMMENT)) || // ignore doc comments\n      // ignore open tags\n      this.token === this.tok.T_OPEN_TAG\n    );\n  } else {\n    this.token = this.lexer.lex() || /* istanbul ignore next */ this.EOF;\n  }\n  return this;\n};\n\n/**\n * Check if token is of specified type\n * @function Parser#is\n * @memberOf module:php-parser\n */\nParser.prototype.is = function (type) {\n  if (Array.isArray(type)) {\n    return type.indexOf(this.token) !== -1;\n  }\n  return this.entries[type].has(this.token);\n};\n\n// extends the parser with syntax files\n[\n  array,\n  _class,\n  comment,\n  expr,\n  _enum,\n  _function,\n  _if,\n  loops,\n  main,\n  namespace,\n  scalar,\n  statement,\n  _switch,\n  _try,\n  utils$1,\n  variable,\n].forEach(function (ext) {\n  for (const k in ext) {\n    /* istanbul ignore next */\n    if (Object.prototype.hasOwnProperty.call(Parser.prototype, k)) {\n      // @see https://github.com/glayzzle/php-parser/issues/234\n      throw new Error(\"Function \" + k + \" is already defined - collision\");\n    }\n    Parser.prototype[k] = ext[k];\n  }\n});\n\nvar parser = Parser;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * @readonly\n * @memberOf module:php-parser\n *\n * @enum {number}\n **/\nconst TokenNames = {\n  T_HALT_COMPILER: 101,\n  T_USE: 102,\n  T_ENCAPSED_AND_WHITESPACE: 103,\n  T_OBJECT_OPERATOR: 104,\n  T_STRING: 105,\n  T_DOLLAR_OPEN_CURLY_BRACES: 106,\n  T_STRING_VARNAME: 107,\n  T_CURLY_OPEN: 108,\n  T_NUM_STRING: 109,\n  T_ISSET: 110,\n  T_EMPTY: 111,\n  T_INCLUDE: 112,\n  T_INCLUDE_ONCE: 113,\n  T_EVAL: 114,\n  T_REQUIRE: 115,\n  T_REQUIRE_ONCE: 116,\n  T_NAMESPACE: 117,\n  T_NS_SEPARATOR: 118,\n  T_AS: 119,\n  T_IF: 120,\n  T_ENDIF: 121,\n  T_WHILE: 122,\n  T_DO: 123,\n  T_FOR: 124,\n  T_SWITCH: 125,\n  T_BREAK: 126,\n  T_CONTINUE: 127,\n  T_RETURN: 128,\n  T_GLOBAL: 129,\n  T_STATIC: 130,\n  T_ECHO: 131,\n  T_INLINE_HTML: 132,\n  T_UNSET: 133,\n  T_FOREACH: 134,\n  T_DECLARE: 135,\n  T_TRY: 136,\n  T_THROW: 137,\n  T_GOTO: 138,\n  T_FINALLY: 139,\n  T_CATCH: 140,\n  T_ENDDECLARE: 141,\n  T_LIST: 142,\n  T_CLONE: 143,\n  T_PLUS_EQUAL: 144,\n  T_MINUS_EQUAL: 145,\n  T_MUL_EQUAL: 146,\n  T_DIV_EQUAL: 147,\n  T_CONCAT_EQUAL: 148,\n  T_MOD_EQUAL: 149,\n  T_AND_EQUAL: 150,\n  T_OR_EQUAL: 151,\n  T_XOR_EQUAL: 152,\n  T_SL_EQUAL: 153,\n  T_SR_EQUAL: 154,\n  T_INC: 155,\n  T_DEC: 156,\n  T_BOOLEAN_OR: 157,\n  T_BOOLEAN_AND: 158,\n  T_LOGICAL_OR: 159,\n  T_LOGICAL_AND: 160,\n  T_LOGICAL_XOR: 161,\n  T_SL: 162,\n  T_SR: 163,\n  T_IS_IDENTICAL: 164,\n  T_IS_NOT_IDENTICAL: 165,\n  T_IS_EQUAL: 166,\n  T_IS_NOT_EQUAL: 167,\n  T_IS_SMALLER_OR_EQUAL: 168,\n  T_IS_GREATER_OR_EQUAL: 169,\n  T_INSTANCEOF: 170,\n  T_INT_CAST: 171,\n  T_DOUBLE_CAST: 172,\n  T_STRING_CAST: 173,\n  T_ARRAY_CAST: 174,\n  T_OBJECT_CAST: 175,\n  T_BOOL_CAST: 176,\n  T_UNSET_CAST: 177,\n  T_EXIT: 178,\n  T_PRINT: 179,\n  T_YIELD: 180,\n  T_YIELD_FROM: 181,\n  T_FUNCTION: 182,\n  T_DOUBLE_ARROW: 183,\n  T_DOUBLE_COLON: 184,\n  T_ARRAY: 185,\n  T_CALLABLE: 186,\n  T_CLASS: 187,\n  T_ABSTRACT: 188,\n  T_TRAIT: 189,\n  T_FINAL: 190,\n  T_EXTENDS: 191,\n  T_INTERFACE: 192,\n  T_IMPLEMENTS: 193,\n  T_VAR: 194,\n  T_PUBLIC: 195,\n  T_PROTECTED: 196,\n  T_PRIVATE: 197,\n  T_CONST: 198,\n  T_NEW: 199,\n  T_INSTEADOF: 200,\n  T_ELSEIF: 201,\n  T_ELSE: 202,\n  T_ENDSWITCH: 203,\n  T_CASE: 204,\n  T_DEFAULT: 205,\n  T_ENDFOR: 206,\n  T_ENDFOREACH: 207,\n  T_ENDWHILE: 208,\n  T_CONSTANT_ENCAPSED_STRING: 209,\n  T_LNUMBER: 210,\n  T_DNUMBER: 211,\n  T_LINE: 212,\n  T_FILE: 213,\n  T_DIR: 214,\n  T_TRAIT_C: 215,\n  T_METHOD_C: 216,\n  T_FUNC_C: 217,\n  T_NS_C: 218,\n  T_START_HEREDOC: 219,\n  T_END_HEREDOC: 220,\n  T_CLASS_C: 221,\n  T_VARIABLE: 222,\n  T_OPEN_TAG: 223,\n  T_OPEN_TAG_WITH_ECHO: 224,\n  T_CLOSE_TAG: 225,\n  T_WHITESPACE: 226,\n  T_COMMENT: 227,\n  T_DOC_COMMENT: 228,\n  T_ELLIPSIS: 229,\n  T_COALESCE: 230,\n  T_POW: 231,\n  T_POW_EQUAL: 232,\n  T_SPACESHIP: 233,\n  T_COALESCE_EQUAL: 234,\n  T_FN: 235,\n  T_NULLSAFE_OBJECT_OPERATOR: 236,\n  T_MATCH: 237,\n  T_ATTRIBUTE: 238,\n  T_ENUM: 239,\n  T_READ_ONLY: 240,\n  T_NAME_RELATIVE: 241,\n  T_NAME_QUALIFIED: 242,\n  T_NAME_FULLY_QUALIFIED: 243,\n};\n\n/**\n * PHP AST Tokens\n * @readonly\n * @memberOf module:php-parser\n *\n * @type {object}\n * @property {Object.<number, string>} values\n * @property {TokenNames} names\n */\nconst tokens$2 = {\n  values: Object.entries(TokenNames).reduce(\n    (result, [key, value]) => ({ ...result, [value]: key }),\n    {}\n  ),\n  names: TokenNames,\n};\n\nvar tokens_1 = Object.freeze(tokens$2);\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * Defines the location of the node (with it's source contents as string)\n * @constructor Location\n * @memberOf module:php-parser\n * @property {string|null} source\n * @property {Position} start\n * @property {Position} end\n */\nconst Location = function (source, start, end) {\n  this.source = source;\n  this.start = start;\n  this.end = end;\n};\n\nvar location_1 = Location;\n\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * A generic AST node\n * @constructor Node\n * @memberOf module:php-parser\n * @property {Location|null} loc\n * @property {CommentBlock[]|Comment[]|null} leadingComments\n * @property {CommentBlock[]|Comment[]|null} trailingComments\n * @property {string} kind\n */\nconst Node = function Node(kind, docs, location) {\n  this.kind = kind;\n  if (docs) {\n    this.leadingComments = docs;\n  }\n  if (location) {\n    this.loc = location;\n  }\n};\n\n/**\n * Attach comments to current node\n * @function Node#setTrailingComments\n * @memberOf module:php-parser\n * @param {*} docs\n */\nNode.prototype.setTrailingComments = function (docs) {\n  this.trailingComments = docs;\n};\n\n/**\n * Destroying an unused node\n * @function Node#destroy\n * @memberOf module:php-parser\n */\nNode.prototype.destroy = function (node) {\n  if (!node) {\n    /* istanbul ignore next */\n    throw new Error(\n      \"Node already initialized, you must swap with another node\"\n    );\n  }\n  if (this.leadingComments) {\n    if (node.leadingComments) {\n      node.leadingComments = Array.concat(\n        this.leadingComments,\n        node.leadingComments\n      );\n    } else {\n      node.leadingComments = this.leadingComments;\n    }\n  }\n  if (this.trailingComments) {\n    if (node.trailingComments) {\n      node.trailingComments = Array.concat(\n        this.trailingComments,\n        node.trailingComments\n      );\n    } else {\n      node.trailingComments = this.trailingComments;\n    }\n  }\n  return node;\n};\n\n/**\n * Includes current token position of the parser\n * @function Node#includeToken\n * @memberOf module:php-parser\n * @param {*} parser\n */\nNode.prototype.includeToken = function (parser) {\n  if (this.loc) {\n    if (this.loc.end) {\n      this.loc.end.line = parser.lexer.yylloc.last_line;\n      this.loc.end.column = parser.lexer.yylloc.last_column;\n      this.loc.end.offset = parser.lexer.offset;\n    }\n    if (parser.ast.withSource) {\n      this.loc.source = parser.lexer._input.substring(\n        this.loc.start.offset,\n        parser.lexer.offset\n      );\n    }\n  }\n  return this;\n};\n\n/**\n * Helper for extending the Node class\n * @function Node.extends\n * @memberOf module:php-parser\n * @param {string} type\n * @param {Function} constructor\n * @return {Function}\n */\nNode.extends = function (type, constructor) {\n  constructor.prototype = Object.create(this.prototype);\n  constructor.extends = this.extends;\n  constructor.prototype.constructor = constructor;\n  constructor.kind = type;\n  return constructor;\n};\n\nvar node = Node;\n\nconst KIND = \"expression\";\n\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Expression\n * @memberOf module:php-parser\n * @extends {Node}\n */\nvar expression = node.extends(KIND, function Expression(kind, docs, location) {\n  node.apply(this, [kind || KIND, docs, location]);\n});\n\nconst KIND$1 = \"array\";\n\n/**\n * Defines an array structure\n * @constructor Array\n * @memberOf module:php-parser\n * @example\n * // PHP code :\n * [1, 'foo' => 'bar', 3]\n *\n * // AST structure :\n * {\n *  \"kind\": \"array\",\n *  \"shortForm\": true\n *  \"items\": [\n *    {\"kind\": \"number\", \"value\": \"1\"},\n *    {\n *      \"kind\": \"entry\",\n *      \"key\": {\"kind\": \"string\", \"value\": \"foo\", \"isDoubleQuote\": false},\n *      \"value\": {\"kind\": \"string\", \"value\": \"bar\", \"isDoubleQuote\": false}\n *    },\n *    {\"kind\": \"number\", \"value\": \"3\"}\n *  ]\n * }\n * @extends {Expression}\n * @property {Array<Entry|Expression|Variable>} items List of array items\n * @property {boolean} shortForm Indicate if the short array syntax is used, ex `[]` instead `array()`\n */\nvar array$1 = expression.extends(\n  KIND$1,\n  function Array(shortForm, items, docs, location) {\n    expression.apply(this, [KIND$1, docs, location]);\n    this.items = items;\n    this.shortForm = shortForm;\n  }\n);\n\nconst KIND$2 = \"arrowfunc\";\n\n/**\n * Defines an arrow function (it's like a closure)\n * @constructor ArrowFunc\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {Expression} body\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {boolean} isStatic\n */\nvar arrowfunc = expression.extends(\n  KIND$2,\n  function Closure(\n    args,\n    byref,\n    body,\n    type,\n    nullable,\n    isStatic,\n    docs,\n    location\n  ) {\n    expression.apply(this, [KIND$2, docs, location]);\n    this.arguments = args;\n    this.byref = byref;\n    this.body = body;\n    this.type = type;\n    this.nullable = nullable;\n    this.isStatic = isStatic || false;\n  }\n);\n\nconst KIND$3 = \"assign\";\n\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\nvar assign = expression.extends(\n  KIND$3,\n  function Assign(left, right, operator, docs, location) {\n    expression.apply(this, [KIND$3, docs, location]);\n    this.left = left;\n    this.right = right;\n    this.operator = operator;\n  }\n);\n\nconst KIND$4 = \"assignref\";\n\n/**\n * Assigns a value to the specified target\n * @constructor AssignRef\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\nvar assignref = expression.extends(\n  KIND$4,\n  function AssignRef(left, right, docs, location) {\n    expression.apply(this, [KIND$4, docs, location]);\n    this.left = left;\n    this.right = right;\n  }\n);\n\nconst KIND$5 = \"attribute\";\n\n/**\n * Attribute Value\n * @memberOf module:php-parser\n * @constructor Attribute\n * @extends {Node}\n * @property {String} name\n * @property {Parameter[]} args\n */\nvar attribute$1 = node.extends(\n  KIND$5,\n  function Attribute(name, args, docs, location) {\n    node.apply(this, [KIND$5, docs, location]);\n    this.name = name;\n    this.args = args;\n  }\n);\n\nconst KIND$6 = \"attrgroup\";\n\n/**\n * Attribute group\n * @memberOf module:php-parser\n * @constructor AttrGroup\n * @extends {Node}\n * @property {Attribute[]} attrs\n */\nvar attrgroup = node.extends(KIND$6, function AttrGroup(attrs, docs, location) {\n  node.apply(this, [KIND$6, docs, location]);\n  this.attrs = attrs || [];\n});\n\nconst KIND$7 = \"operation\";\n\n/**\n * Defines binary operations\n * @constructor Operation\n * @memberOf module:php-parser\n * @extends {Expression}\n */\nvar operation = expression.extends(KIND$7, function Operation(kind, docs, location) {\n  expression.apply(this, [kind || KIND$7, docs, location]);\n});\n\nconst KIND$8 = \"bin\";\n/**\n * Binary operations\n * @constructor Bin\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} left\n * @property {Expression} right\n */\nvar bin = operation.extends(\n  KIND$8,\n  function Bin(type, left, right, docs, location) {\n    operation.apply(this, [KIND$8, docs, location]);\n    this.type = type;\n    this.left = left;\n    this.right = right;\n  }\n);\n\nconst KIND$9 = \"statement\";\n\n/**\n * Any statement.\n * @constructor Statement\n * @memberOf module:php-parser\n * @extends {Node}\n */\nvar statement$1 = node.extends(KIND$9, function Statement(kind, docs, location) {\n  node.apply(this, [kind || KIND$9, docs, location]);\n});\n\nconst KIND$a = \"block\";\n\n/**\n * A block statement, i.e., a sequence of statements surrounded by braces.\n * @constructor Block\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Node[]} children\n */\nvar block = statement$1.extends(\n  KIND$a,\n  function Block(kind, children, docs, location) {\n    statement$1.apply(this, [kind || KIND$a, docs, location]);\n    this.children = children.filter(Boolean);\n  }\n);\n\nconst KIND$b = \"literal\";\n\n/**\n * Defines an array structure\n * @constructor Literal\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {string} raw\n * @property {EncapsedPart[]|Node|string|number|boolean|null} value\n */\nvar literal = expression.extends(\n  KIND$b,\n  function Literal(kind, value, raw, docs, location) {\n    expression.apply(this, [kind || KIND$b, docs, location]);\n    this.value = value;\n    if (raw) {\n      this.raw = raw;\n    }\n  }\n);\n\nconst KIND$c = \"boolean\";\n\n/**\n * Defines a boolean value (true/false)\n * @constructor Boolean\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {boolean} value\n */\nvar boolean_1 = literal.extends(\n  KIND$c,\n  function Boolean(value, raw, docs, location) {\n    literal.apply(this, [KIND$c, value, raw, docs, location]);\n  }\n);\n\nconst KIND$d = \"break\";\n\n/**\n * A break statement\n * @constructor Break\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Number|Null} level\n */\nvar _break = statement$1.extends(KIND$d, function Break(level, docs, location) {\n  statement$1.apply(this, [KIND$d, docs, location]);\n  this.level = level;\n});\n\nconst KIND$e = \"byref\";\n\n/**\n * Passing by Reference - so the function can modify the variable\n * @constructor ByRef\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {ExpressionStatement} what\n */\nvar byref = expression.extends(KIND$e, function ByRef(what, docs, location) {\n  expression.apply(this, [KIND$e, docs, location]);\n  this.what = what;\n});\n\nconst KIND$f = \"call\";\n\n/**\n * Executes a call statement\n * @constructor Call\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Identifier|Variable} what\n * @property {Expression[]} arguments\n */\nvar call = expression.extends(\n  KIND$f,\n  function Call(what, args, docs, location) {\n    expression.apply(this, [KIND$f, docs, location]);\n    this.what = what;\n    this.arguments = args;\n  }\n);\n\nconst KIND$g = \"case\";\n\n/**\n * A switch case statement\n * @constructor Case\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression|null} test - if null, means that the default case\n * @property {Block|null} body\n */\nvar _case = statement$1.extends(\n  KIND$g,\n  function Case(test, body, docs, location) {\n    statement$1.apply(this, [KIND$g, docs, location]);\n    this.test = test;\n    this.body = body;\n  }\n);\n\nconst KIND$h = \"cast\";\n\n/**\n * Binary operations\n * @constructor Cast\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {String} type\n * @property {String} raw\n * @property {Expression} expr\n */\nvar cast = operation.extends(\n  KIND$h,\n  function Cast(type, raw, expr, docs, location) {\n    operation.apply(this, [KIND$h, docs, location]);\n    this.type = type;\n    this.raw = raw;\n    this.expr = expr;\n  }\n);\n\nconst KIND$i = \"catch\";\n\n/**\n * Defines a catch statement\n * @constructor Catch\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Name[]} what\n * @property {Variable} variable\n * @property {Block} body\n * @see http://php.net/manual/en/language.exceptions.php\n */\nvar _catch = statement$1.extends(\n  KIND$i,\n  function Catch(body, what, variable, docs, location) {\n    statement$1.apply(this, [KIND$i, docs, location]);\n    this.body = body;\n    this.what = what;\n    this.variable = variable;\n  }\n);\n\nconst KIND$j = \"declaration\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * A declaration statement (function, class, interface...)\n * @constructor Declaration\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Identifier|string} name\n */\nconst Declaration = statement$1.extends(\n  KIND$j,\n  function Declaration(kind, name, docs, location) {\n    statement$1.apply(this, [kind || KIND$j, docs, location]);\n    this.name = name;\n  }\n);\n\n/**\n * Generic flags parser\n * @function\n * @name Declaration#parseFlags\n * @memberOf module:php-parser\n * @param {Array<number|null>} flags\n * @return {void}\n */\nDeclaration.prototype.parseFlags = function (flags) {\n  this.isAbstract = flags[2] === 1;\n  this.isFinal = flags[2] === 2;\n  this.isReadonly = flags[3] === 1;\n  if (this.kind !== \"class\") {\n    if (flags[0] === -1) {\n      this.visibility = IS_UNDEFINED;\n    } else if (flags[0] === null) {\n      /* istanbul ignore next */\n      this.visibility = null;\n    } else if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE;\n    }\n    this.isStatic = flags[1] === 1;\n  }\n};\n\nvar declaration = Declaration;\n\nconst KIND$k = \"class\";\n\n/**\n * A class definition\n * @constructor Class\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Identifier|null} extends\n * @property {Identifier[]|null} implements\n * @property {Declaration[]} body\n * @property {boolean} isAnonymous\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n * @property {boolean} isReadonly\n * @property {AttrGroup[]} attrGroups\n */\nvar _class$1 = declaration.extends(\n  KIND$k,\n  function Class(name, ext, impl, body, flags, docs, location) {\n    declaration.apply(this, [KIND$k, name, docs, location]);\n    this.isAnonymous = name ? false : true;\n    this.extends = ext;\n    this.implements = impl;\n    this.body = body;\n    this.attrGroups = [];\n    this.parseFlags(flags);\n  }\n);\n\nconst KIND$l = \"constantstatement\";\n\n/**\n * Declares a constants into the current scope\n * @constructor ConstantStatement\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Constant[]} constants\n */\nvar constantstatement = statement$1.extends(\n  KIND$l,\n  function ConstantStatement(kind, constants, docs, location) {\n    statement$1.apply(this, [kind || KIND$l, docs, location]);\n    this.constants = constants;\n  }\n);\n\nconst KIND$m = \"classconstant\";\n\nconst IS_UNDEFINED$1 = \"\";\nconst IS_PUBLIC$1 = \"public\";\nconst IS_PROTECTED$1 = \"protected\";\nconst IS_PRIVATE$1 = \"private\";\n\n/**\n * Defines a class/interface/trait constant\n * @constructor ClassConstant\n * @memberOf module:php-parser\n * @extends {ConstantStatement}\n * @property {string} visibility\n * @property {bool} final\n * @property {AttrGroup[]} attrGroups\n */\nconst ClassConstant = constantstatement.extends(\n  KIND$m,\n  function ClassConstant(kind, constants, flags, attrGroups, docs, location) {\n    constantstatement.apply(this, [kind || KIND$m, constants, docs, location]);\n    this.parseFlags(flags);\n    this.attrGroups = attrGroups;\n  }\n);\n\n/**\n * Generic flags parser\n * @function\n * @name ClassConstant#parseFlags\n * @memberOf module:php-parser\n * @param {Array<number|null>} flags\n * @return {void}\n */\nClassConstant.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED$1;\n  } else if (flags[0] === null) {\n    /* istanbul ignore next */\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC$1;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED$1;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE$1;\n  }\n  this.final = flags[2] === 2;\n};\n\nvar classconstant = ClassConstant;\n\nconst KIND$n = \"clone\";\n\n/**\n * Defines a clone call\n * @constructor Clone\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} what\n */\nvar clone = expression.extends(KIND$n, function Clone(what, docs, location) {\n  expression.apply(this, [KIND$n, docs, location]);\n  this.what = what;\n});\n\nconst KIND$o = \"closure\";\n\n/**\n * Defines a closure\n * @constructor Closure\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Variable[]} uses\n * @property {Identifier} type\n * @property {Boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n * @property {boolean} isStatic\n * @property {AttrGroup[]} attrGroups\n */\nvar closure = expression.extends(\n  KIND$o,\n  function Closure(\n    args,\n    byref,\n    uses,\n    type,\n    nullable,\n    isStatic,\n    docs,\n    location\n  ) {\n    expression.apply(this, [KIND$o, docs, location]);\n    this.uses = uses;\n    this.arguments = args;\n    this.byref = byref;\n    this.type = type;\n    this.nullable = nullable;\n    this.isStatic = isStatic || false;\n    this.body = null;\n    this.attrGroups = [];\n  }\n);\n\n/**\n * Abstract documentation node (ComentLine or CommentBlock)\n * @constructor Comment\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {String} value\n */\nvar comment$1 = node.extends(\n  \"comment\",\n  function Comment(kind, value, docs, location) {\n    node.apply(this, [kind, docs, location]);\n    this.value = value;\n  }\n);\n\nconst KIND$p = \"commentblock\";\n\n/**\n * A comment block (multiline)\n * @constructor CommentBlock\n * @memberOf module:php-parser\n * @extends {Comment}\n */\nvar commentblock = comment$1.extends(\n  KIND$p,\n  function CommentBlock(value, docs, location) {\n    comment$1.apply(this, [KIND$p, value, docs, location]);\n  }\n);\n\nconst KIND$q = \"commentline\";\n\n/**\n * A single line comment\n * @constructor CommentLine\n * @memberOf module:php-parser\n * @extends {Comment}\n */\nvar commentline = comment$1.extends(\n  KIND$q,\n  function CommentLine(value, docs, location) {\n    comment$1.apply(this, [KIND$q, value, docs, location]);\n  }\n);\n\nconst KIND$r = \"constant\";\n\n/**\n * Defines a constant\n * @constructor Constant\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {string} name\n * @property {Node|string|number|boolean|null} value\n */\nvar constant = node.extends(\n  KIND$r,\n  function Constant(name, value, docs, location) {\n    node.apply(this, [KIND$r, docs, location]);\n    this.name = name;\n    this.value = value;\n  }\n);\n\nconst KIND$s = \"continue\";\n\n/**\n * A continue statement\n * @constructor Continue\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {number|null} level\n */\nvar _continue = statement$1.extends(\n  KIND$s,\n  function Continue(level, docs, location) {\n    statement$1.apply(this, [KIND$s, docs, location]);\n    this.level = level;\n  }\n);\n\nconst KIND$t = \"declare\";\n\n/**\n * The declare construct is used to set execution directives for a block of code\n * @constructor Declare\n * @memberOf module:php-parser\n * @extends {Block}\n * @property {DeclareDirective[]} directives\n * @property {string} mode\n * @see http://php.net/manual/en/control-structures.declare.php\n */\nconst Declare = block.extends(\n  KIND$t,\n  function Declare(directives, body, mode, docs, location) {\n    block.apply(this, [KIND$t, body, docs, location]);\n    this.directives = directives;\n    this.mode = mode;\n  }\n);\n\n/**\n * The node is declared as a short tag syntax :\n * ```php\n * <?php\n * declare(ticks=1):\n * // some statements\n * enddeclare;\n * ```\n * @constant {String} Declare#MODE_SHORT\n * @memberOf module:php-parser\n */\nDeclare.MODE_SHORT = \"short\";\n\n/**\n * The node is declared bracket enclosed code :\n * ```php\n * <?php\n * declare(ticks=1) {\n * // some statements\n * }\n * ```\n * @constant {String} Declare#MODE_BLOCK\n * @memberOf module:php-parser\n */\nDeclare.MODE_BLOCK = \"block\";\n\n/**\n * The node is declared as a simple statement. In order to make things simpler\n * children of the node are automatically collected until the next\n * declare statement.\n * ```php\n * <?php\n * declare(ticks=1);\n * // some statements\n * declare(ticks=2);\n * // some statements\n * ```\n * @constant {String} Declare#MODE_NONE\n * @memberOf module:php-parser\n */\nDeclare.MODE_NONE = \"none\";\n\nvar declare = Declare;\n\nconst KIND$u = \"declaredirective\";\n\n/**\n * Defines a constant\n * @constructor DeclareDirective\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Identifier} key\n * @property {Node|string|number|boolean|null} value\n */\nvar declaredirective = node.extends(\n  KIND$u,\n  function DeclareDirective(key, value, docs, location) {\n    node.apply(this, [KIND$u, docs, location]);\n    this.key = key;\n    this.value = value;\n  }\n);\n\nconst KIND$v = \"do\";\n\n/**\n * Defines a do/while statement\n * @constructor Do\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block | null} body\n */\nvar _do = statement$1.extends(\n  KIND$v,\n  function Do(test, body, docs, location) {\n    statement$1.apply(this, [KIND$v, docs, location]);\n    this.test = test;\n    this.body = body;\n  }\n);\n\nconst KIND$w = \"echo\";\n\n/**\n * Defines system based call\n * @constructor Echo\n * @memberOf module:php-parser\n * @property {boolean} shortForm\n * @property {Expression[]} expressions\n * @extends {Statement}\n */\nvar echo = statement$1.extends(\n  KIND$w,\n  function Echo(expressions, shortForm, docs, location) {\n    statement$1.apply(this, [KIND$w, docs, location]);\n    this.shortForm = shortForm;\n    this.expressions = expressions;\n  }\n);\n\nconst KIND$x = \"empty\";\n\n/**\n * Defines an empty check call\n * @constructor Empty\n * @memberOf module:php-parser\n * @extends {Expression}\n */\nvar empty = expression.extends(\n  KIND$x,\n  function Empty(expression$1, docs, location) {\n    expression.apply(this, [KIND$x, docs, location]);\n    this.expression = expression$1;\n  }\n);\n\nconst KIND$y = \"encapsed\";\n\n/**\n * Defines an encapsed string (contains expressions)\n * @constructor Encapsed\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {String} type - Defines the type of encapsed string (shell, heredoc, string)\n * @property {String|Null} label - The heredoc label, defined only when the type is heredoc\n * @property {EncapsedPart[]} value\n */\nconst Encapsed = literal.extends(\n  KIND$y,\n  function Encapsed(value, raw, type, docs, location) {\n    literal.apply(this, [KIND$y, value, raw, docs, location]);\n    this.type = type;\n  }\n);\n\n/**\n * The node is a double quote string :\n * ```php\n * <?php\n * echo \"hello $world\";\n * ```\n * @constant {String} Encapsed#TYPE_STRING - `string`\n * @memberOf module:php-parser\n */\nEncapsed.TYPE_STRING = \"string\";\n\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo `ls -larth $path`;\n * ```\n * @constant {String} Encapsed#TYPE_SHELL - `shell`\n * @memberOf module:php-parser\n */\nEncapsed.TYPE_SHELL = \"shell\";\n\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo <<<STR\n *  Hello $world\n * STR\n * ;\n * ```\n * @constant {String} Encapsed#TYPE_HEREDOC - `heredoc`\n * @memberOf module:php-parser\n */\nEncapsed.TYPE_HEREDOC = \"heredoc\";\n\n/**\n * The node contains a list of constref / variables / expr :\n * ```php\n * <?php\n * echo $foo->bar_$baz;\n * ```\n * @constant {String} Encapsed#TYPE_OFFSET - `offset`\n * @memberOf module:php-parser\n */\nEncapsed.TYPE_OFFSET = \"offset\";\n\nvar encapsed = Encapsed;\n\nconst KIND$z = \"encapsedpart\";\n\n/**\n * Part of `Encapsed` node\n * @constructor EncapsedPart\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} expression\n * @property {String} syntax\n * @property {Boolean} curly\n */\nvar encapsedpart = expression.extends(\n  KIND$z,\n  function EncapsedPart(expression$1, syntax, curly, docs, location) {\n    expression.apply(this, [KIND$z, docs, location]);\n    this.expression = expression$1;\n    this.syntax = syntax;\n    this.curly = curly;\n  }\n);\n\nconst KIND$A = \"entry\";\n\n/**\n * An array entry - see [Array](#array)\n * @memberOf module:php-parser\n * @constructor Entry\n * @extends {Expression}\n * @property {Node|null} key The entry key/offset\n * @property {Node} value The entry value\n * @property {Boolean} byRef By reference\n * @property {Boolean} unpack Argument unpacking\n */\nvar entry = expression.extends(\n  KIND$A,\n  function Entry(key, value, byRef, unpack, docs, location) {\n    expression.apply(this, [KIND$A, docs, location]);\n    this.key = key;\n    this.value = value;\n    this.byRef = byRef;\n    this.unpack = unpack;\n  }\n);\n\nconst KIND$B = \"enum\";\n\n/**\n * A enum definition\n * @constructor Enum\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Identifier|null} valueType\n * @property {Identifier[]} implements\n * @property {Declaration[]} body\n * @property {AttrGroup[]} attrGroups\n */\nvar _enum$1 = declaration.extends(\n  KIND$B,\n  function Enum(name, valueType, impl, body, docs, location) {\n    declaration.apply(this, [KIND$B, name, docs, location]);\n    this.valueType = valueType;\n    this.implements = impl;\n    this.body = body;\n    this.attrGroups = [];\n  }\n);\n\nconst KIND$C = \"enumcase\";\n\n/**\n * Declares a cases into the current scope\n * @constructor EnumCase\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {string} name\n * @property {string|number|null} value\n */\nvar enumcase = node.extends(\n  KIND$C,\n  function EnumCase(name, value, docs, location) {\n    node.apply(this, [KIND$C, docs, location]);\n    this.name = name;\n    this.value = value;\n  }\n);\n\nconst KIND$D = \"error\";\n\n/**\n * Defines an error node (used only on silentMode)\n * @constructor Error\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {string} message\n * @property {number} line\n * @property {number|string} token\n * @property {string|array} expected\n */\nvar error = node.extends(\n  KIND$D,\n  function Error(message, token, line, expected, docs, location) {\n    node.apply(this, [KIND$D, docs, location]);\n    this.message = message;\n    this.token = token;\n    this.line = line;\n    this.expected = expected;\n  }\n);\n\nconst KIND$E = \"eval\";\n\n/**\n * Defines an eval statement\n * @constructor Eval\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Node} source\n */\nvar _eval = expression.extends(\n  KIND$E,\n  function Eval(source, docs, location) {\n    expression.apply(this, [KIND$E, docs, location]);\n    this.source = source;\n  }\n);\n\nconst KIND$F = \"exit\";\n\n/**\n * Defines an exit / die call\n * @constructor Exit\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Node|null} expression\n * @property {boolean} useDie\n */\nvar exit = expression.extends(\n  KIND$F,\n  function Exit(expression$1, useDie, docs, location) {\n    expression.apply(this, [KIND$F, docs, location]);\n    this.expression = expression$1;\n    this.useDie = useDie;\n  }\n);\n\nconst KIND$G = \"expressionstatement\";\n\n/**\n * Defines an expression based statement\n * @constructor ExpressionStatement\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} expression\n */\nvar expressionstatement = statement$1.extends(\n  KIND$G,\n  function ExpressionStatement(expr, docs, location) {\n    statement$1.apply(this, [KIND$G, docs, location]);\n    this.expression = expr;\n  }\n);\n\nconst KIND$H = \"for\";\n\n/**\n * Defines a for iterator\n * @constructor For\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression[]} init\n * @property {Expression[]} test\n * @property {Expression[]} increment\n * @property {Block | null} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.for.php\n */\nvar _for = statement$1.extends(\n  KIND$H,\n  function For(init, test, increment, body, shortForm, docs, location) {\n    statement$1.apply(this, [KIND$H, docs, location]);\n    this.init = init;\n    this.test = test;\n    this.increment = increment;\n    this.shortForm = shortForm;\n    this.body = body;\n  }\n);\n\nconst KIND$I = \"foreach\";\n\n/**\n * Defines a foreach iterator\n * @constructor Foreach\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} source\n * @property {Expression|null} key\n * @property {Expression} value\n * @property {Block | null} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.foreach.php\n */\nvar foreach = statement$1.extends(\n  KIND$I,\n  function Foreach(source, key, value, body, shortForm, docs, location) {\n    statement$1.apply(this, [KIND$I, docs, location]);\n    this.source = source;\n    this.key = key;\n    this.value = value;\n    this.shortForm = shortForm;\n    this.body = body;\n  }\n);\n\nconst KIND$J = \"function\";\n\n/**\n * Defines a classic function\n * @constructor Function\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n * @property {AttrGroup[]} attrGroups\n */\nvar _function$1 = declaration.extends(\n  KIND$J,\n  function _Function(name, args, byref, type, nullable, docs, location) {\n    declaration.apply(this, [KIND$J, name, docs, location]);\n    this.arguments = args;\n    this.byref = byref;\n    this.type = type;\n    this.nullable = nullable;\n    this.body = null;\n    this.attrGroups = [];\n  }\n);\n\nconst KIND$K = \"global\";\n\n/**\n * Imports a variable from the global scope\n * @constructor Global\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Variable[]} items\n */\nvar global = statement$1.extends(\n  KIND$K,\n  function Global(items, docs, location) {\n    statement$1.apply(this, [KIND$K, docs, location]);\n    this.items = items;\n  }\n);\n\nconst KIND$L = \"goto\";\n\n/**\n * Defines goto statement\n * @constructor Goto\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {string} label\n * @see {Label}\n */\nvar goto_1 = statement$1.extends(KIND$L, function Goto(label, docs, location) {\n  statement$1.apply(this, [KIND$L, docs, location]);\n  this.label = label;\n});\n\nconst KIND$M = \"halt\";\n\n/**\n * Halts the compiler execution\n * @constructor Halt\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {String} after - String after the halt statement\n * @see http://php.net/manual/en/function.halt-compiler.php\n */\nvar halt = statement$1.extends(KIND$M, function Halt(after, docs, location) {\n  statement$1.apply(this, [KIND$M, docs, location]);\n  this.after = after;\n});\n\nconst KIND$N = \"identifier\";\n\n/**\n * Defines an identifier node\n * @constructor Identifier\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {string} name\n */\nconst Identifier = node.extends(\n  KIND$N,\n  function Identifier(name, docs, location) {\n    node.apply(this, [KIND$N, docs, location]);\n    this.name = name;\n  }\n);\n\nvar identifier = Identifier;\n\nconst KIND$O = \"if\";\n\n/**\n * Defines a if statement\n * @constructor If\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {Block|If|null} alternate\n * @property {boolean} shortForm\n */\nvar _if$1 = statement$1.extends(\n  KIND$O,\n  function If(test, body, alternate, shortForm, docs, location) {\n    statement$1.apply(this, [KIND$O, docs, location]);\n    this.test = test;\n    this.body = body;\n    this.alternate = alternate;\n    this.shortForm = shortForm;\n  }\n);\n\nconst KIND$P = \"include\";\n\n/**\n * Defines system include call\n * @constructor Include\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Node} target\n * @property {boolean} once\n * @property {boolean} require\n */\nvar include = expression.extends(\n  KIND$P,\n  function Include(once, require, target, docs, location) {\n    expression.apply(this, [KIND$P, docs, location]);\n    this.once = once;\n    this.require = require;\n    this.target = target;\n  }\n);\n\nconst KIND$Q = \"inline\";\n\n/**\n * Defines inline html output (treated as echo output)\n * @constructor Inline\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {string} value\n */\nvar inline = literal.extends(\n  KIND$Q,\n  function Inline(value, raw, docs, location) {\n    literal.apply(this, [KIND$Q, value, raw, docs, location]);\n  }\n);\n\nconst KIND$R = \"interface\";\n\n/**\n * An interface definition\n * @constructor Interface\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Identifier[]} extends\n * @property {Declaration[]} body\n * @property {AttrGroup[]} attrGroups\n */\nvar _interface = declaration.extends(\n  KIND$R,\n  function Interface(name, ext, body, attrGroups, docs, location) {\n    declaration.apply(this, [KIND$R, name, docs, location]);\n    this.extends = ext;\n    this.body = body;\n    this.attrGroups = attrGroups;\n  }\n);\n\nconst KIND$S = \"intersectiontype\";\n\n/**\n * A union of types\n * @memberOf module:php-parser\n * @constructor IntersectionType\n * @extends {Declaration}\n * @property {TypeReference[]} types\n */\nvar intersectiontype = declaration.extends(\n  KIND$S,\n  function IntersectionType(types, docs, location) {\n    declaration.apply(this, [KIND$S, null, docs, location]);\n    this.types = types;\n  }\n);\n\nconst KIND$T = \"isset\";\n\n/**\n * Defines an isset call\n * @constructor Isset\n * @memberOf module:php-parser\n * @extends {Expression}\n */\nvar isset = expression.extends(\n  KIND$T,\n  function Isset(variables, docs, location) {\n    expression.apply(this, [KIND$T, docs, location]);\n    this.variables = variables;\n  }\n);\n\nconst KIND$U = \"label\";\n\n/**\n * A label statement (referenced by goto)\n * @constructor Label\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {String} name\n */\nvar label = statement$1.extends(KIND$U, function Label(name, docs, location) {\n  statement$1.apply(this, [KIND$U, docs, location]);\n  this.name = name;\n});\n\nconst KIND$V = \"list\";\n\n/**\n * Defines list assignment\n * @constructor List\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {boolean} shortForm\n * @property {Entry[]} items\n */\nvar list = expression.extends(\n  KIND$V,\n  function List(items, shortForm, docs, location) {\n    expression.apply(this, [KIND$V, docs, location]);\n    this.items = items;\n    this.shortForm = shortForm;\n  }\n);\n\nconst KIND$W = \"lookup\";\n\n/**\n * Lookup on an offset in the specified object\n * @constructor Lookup\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} what\n * @property {Expression} offset\n */\nvar lookup = expression.extends(\n  KIND$W,\n  function Lookup(kind, what, offset, docs, location) {\n    expression.apply(this, [kind || KIND$W, docs, location]);\n    this.what = what;\n    this.offset = offset;\n  }\n);\n\nconst KIND$X = \"magic\";\n\n/**\n * Defines magic constant\n * @constructor Magic\n * @memberOf module:php-parser\n * @extends {Literal}\n */\nvar magic = literal.extends(\n  KIND$X,\n  function Magic(value, raw, docs, location) {\n    literal.apply(this, [KIND$X, value, raw, docs, location]);\n  }\n);\n\nconst KIND$Y = \"match\";\n\n/**\n * Defines a match expression\n * @memberOf module:php-parser\n * @constructor Match\n * @extends {Expression}\n * @property {Expression} cond Condition expression to match against\n * @property {MatchArm[]} arms Arms for comparison\n */\nvar match = expression.extends(\n  KIND$Y,\n  function Match(cond, arms, docs, location) {\n    expression.apply(this, [KIND$Y, docs, location]);\n    this.cond = cond;\n    this.arms = arms;\n  }\n);\n\nconst KIND$Z = \"matcharm\";\n\n/**\n * An array entry - see [Array](#array)\n * @memberOf module:php-parser\n * @constructor MatchArm\n * @extends {Expression}\n * @property {Expression[]|null} conds The match condition expression list - null indicates default arm\n * @property {Expression} body The return value expression\n */\nvar matcharm = expression.extends(\n  KIND$Z,\n  function MatchArm(conds, body, docs, location) {\n    expression.apply(this, [KIND$Z, docs, location]);\n    this.conds = conds;\n    this.body = body;\n  }\n);\n\nconst KIND$_ = \"method\";\n\n/**\n * Defines a class/interface/trait method\n * @constructor Method\n * @memberOf module:php-parser\n * @extends {Function}\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n * @property {boolean} isStatic\n * @property {string} visibility\n */\nvar method = _function$1.extends(KIND$_, function Method() {\n  _function$1.apply(this, arguments);\n  this.kind = KIND$_;\n});\n\nconst KIND$$ = \"reference\";\n\n/**\n * Defines a reference node\n * @constructor Reference\n * @memberOf module:php-parser\n * @extends {Node}\n */\nconst Reference = node.extends(KIND$$, function Reference(kind, docs, location) {\n  node.apply(this, [kind || KIND$$, docs, location]);\n});\n\nvar reference = Reference;\n\nconst KIND$10 = \"name\";\n\n/**\n * Defines a class reference node\n * @constructor Name\n * @memberOf module:php-parser\n * @extends {Reference}\n * @property {string} name\n * @property {string} resolution\n */\nconst Name = reference.extends(\n  KIND$10,\n  function Name(name, resolution, docs, location) {\n    reference.apply(this, [KIND$10, docs, location]);\n    this.name = name.replace(/\\\\$/, \"\");\n    this.resolution = resolution;\n  }\n);\n\n/**\n * This is an identifier without a namespace separator, such as Foo\n * @constant {String} Name#UNQUALIFIED_NAME\n * @memberOf module:php-parser\n */\nName.UNQUALIFIED_NAME = \"uqn\";\n/**\n * This is an identifier with a namespace separator, such as Foo\\Bar\n * @constant {String} Name#QUALIFIED_NAME\n * @memberOf module:php-parser\n */\nName.QUALIFIED_NAME = \"qn\";\n/**\n * This is an identifier with a namespace separator that begins with\n * a namespace separator, such as \\Foo\\Bar. The namespace \\Foo is also\n * a fully qualified name.\n * @constant {String} Name#FULL_QUALIFIED_NAME\n * @memberOf module:php-parser\n */\nName.FULL_QUALIFIED_NAME = \"fqn\";\n/**\n * This is an identifier starting with namespace, such as namespace\\Foo\\Bar.\n * @constant {String} Name#RELATIVE_NAME\n * @memberOf module:php-parser\n */\nName.RELATIVE_NAME = \"rn\";\n\nvar name = Name;\n\nconst KIND$11 = \"namespace\";\n\n/**\n * The main program node\n * @constructor Namespace\n * @memberOf module:php-parser\n * @extends {Block}\n * @property {string} name\n * @property {boolean} withBrackets\n */\nvar namespace$1 = block.extends(\n  KIND$11,\n  function Namespace(name, children, withBrackets, docs, location) {\n    block.apply(this, [KIND$11, children, docs, location]);\n    this.name = name;\n    this.withBrackets = withBrackets || false;\n  }\n);\n\nconst KIND$12 = \"namedargument\";\n\n/**\n * Named arguments.\n * @memberOf module:php-parser\n * @constructor namedargument\n * @extends {Expression}\n * @property {String} name\n * @property {Expression} value\n * @see https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments\n */\nvar namedargument = expression.extends(\n  KIND$12,\n  function namedargument(name, value, docs, location) {\n    expression.apply(this, [KIND$12, docs, location]);\n    this.name = name;\n    this.value = value;\n  }\n);\n\nconst KIND$13 = \"new\";\n\n/**\n * Creates a new instance of the specified class\n * @constructor New\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Identifier|Variable|Class} what\n * @property {Variable[]} arguments\n */\nvar _new = expression.extends(\n  KIND$13,\n  function New(what, args, docs, location) {\n    expression.apply(this, [KIND$13, docs, location]);\n    this.what = what;\n    this.arguments = args;\n  }\n);\n\nconst KIND$14 = \"noop\";\n\n/**\n * Ignore this node, it implies a no operation block, for example :\n * [$foo, $bar, /* here a noop node * /]\n * @constructor Noop\n * @memberOf module:php-parser\n * @extends {Node}\n */\nvar noop = node.extends(KIND$14, function Noop(docs, location) {\n  node.apply(this, [KIND$14, docs, location]);\n});\n\nconst KIND$15 = \"nowdoc\";\n\n/**\n * Defines a nowdoc string\n * @constructor NowDoc\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {string} label\n * @property {string} raw\n * @property {string} value\n */\nvar nowdoc = literal.extends(\n  KIND$15,\n  function Nowdoc(value, raw, label, docs, location) {\n    literal.apply(this, [KIND$15, value, raw, docs, location]);\n    this.label = label;\n  }\n);\n\nconst KIND$16 = \"nullkeyword\";\n\n/**\n * Represents the null keyword\n * @constructor NullKeyword\n * @memberOf module:php-parser\n * @extends {Node}\n */\nvar nullkeyword = node.extends(KIND$16, function NullKeyword(raw, docs, location) {\n  node.apply(this, [KIND$16, docs, location]);\n  this.raw = raw;\n});\n\nconst KIND$17 = \"nullsafepropertylookup\";\n\n/**\n * Lookup to an object property\n * @memberOf module:php-parser\n * @constructor NullSafePropertyLookup\n * @extends {Lookup}\n */\nvar nullsafepropertylookup = lookup.extends(\n  KIND$17,\n  function NullSafePropertyLookup(what, offset, docs, location) {\n    lookup.apply(this, [KIND$17, what, offset, docs, location]);\n  }\n);\n\nconst KIND$18 = \"number\";\n\n/**\n * Defines a numeric value\n * @constructor Number\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {number} value\n */\nvar number = literal.extends(\n  KIND$18,\n  function Number(value, raw, docs, location) {\n    literal.apply(this, [KIND$18, value, raw, docs, location]);\n  }\n);\n\nconst KIND$19 = \"offsetlookup\";\n\n/**\n * Lookup on an offset in an array\n * @constructor OffsetLookup\n * @memberOf module:php-parser\n * @extends {Lookup}\n */\nvar offsetlookup = lookup.extends(\n  KIND$19,\n  function OffsetLookup(what, offset, docs, location) {\n    lookup.apply(this, [KIND$19, what, offset, docs, location]);\n  }\n);\n\nconst KIND$1a = \"parameter\";\n\n/**\n * @memberOf module:php-parser\n * @typedef {1} MODIFIER_PUBLIC\n **/\n/**\n * @memberOf module:php-parser\n * @typedef {2} MODIFIER_PROTECTED\n **/\n/**\n * @memberOf module:php-parser\n * @typedef {4} MODIFIER_PRIVATE\n **/\n/**\n * Defines a function parameter\n * @constructor Parameter\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Identifier|null} type\n * @property {Node|null} value\n * @property {boolean} byref\n * @property {boolean} variadic\n * @property {boolean} readonly\n * @property {boolean} nullable\n * @property {AttrGroup[]} attrGroups\n * @property {MODIFIER_PUBLIC|MODIFIER_PROTECTED|MODIFIER_PRIVATE} flags\n */\nvar parameter = declaration.extends(\n  KIND$1a,\n  function Parameter(\n    name,\n    type,\n    value,\n    isRef,\n    isVariadic,\n    readonly,\n    nullable,\n    flags,\n    docs,\n    location\n  ) {\n    declaration.apply(this, [KIND$1a, name, docs, location]);\n    this.value = value;\n    this.type = type;\n    this.byref = isRef;\n    this.variadic = isVariadic;\n    this.readonly = readonly;\n    this.nullable = nullable;\n    this.flags = flags || 0;\n    this.attrGroups = [];\n  }\n);\n\nconst KIND$1b = \"parentreference\";\n\n/**\n * Defines a class reference node\n * @constructor ParentReference\n * @memberOf module:php-parser\n * @extends {Reference}\n */\nconst ParentReference = reference.extends(\n  KIND$1b,\n  function ParentReference(raw, docs, location) {\n    reference.apply(this, [KIND$1b, docs, location]);\n    this.raw = raw;\n  }\n);\nvar parentreference = ParentReference;\n\nconst KIND$1c = \"post\";\n\n/**\n * Defines a post operation `$i++` or `$i--`\n * @constructor Post\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\nvar post = operation.extends(\n  KIND$1c,\n  function Post(type, what, docs, location) {\n    operation.apply(this, [KIND$1c, docs, location]);\n    this.type = type;\n    this.what = what;\n  }\n);\n\nconst KIND$1d = \"pre\";\n\n/**\n * Defines a pre operation `++$i` or `--$i`\n * @constructor Pre\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\nvar pre = operation.extends(\n  KIND$1d,\n  function Pre(type, what, docs, location) {\n    operation.apply(this, [KIND$1d, docs, location]);\n    this.type = type;\n    this.what = what;\n  }\n);\n\nconst KIND$1e = \"print\";\n\n/**\n * Outputs\n * @constructor Print\n * @memberOf module:php-parser\n * @extends {Expression}\n */\nvar print = expression.extends(\n  KIND$1e,\n  function Print(expression$1, docs, location) {\n    expression.apply(this, [KIND$1e, docs, location]);\n    this.expression = expression$1;\n  }\n);\n\nconst KIND$1f = \"program\";\n\n/**\n * The main program node\n * @constructor Program\n * @memberOf module:php-parser\n * @extends {Block}\n * @property {Error[]} errors\n * @property {Comment[]|null} comments\n * @property {String[]|null} tokens\n */\nvar program = block.extends(\n  KIND$1f,\n  function Program(children, errors, comments, tokens, docs, location) {\n    block.apply(this, [KIND$1f, children, docs, location]);\n    this.errors = errors;\n    if (comments) {\n      this.comments = comments;\n    }\n    if (tokens) {\n      this.tokens = tokens;\n    }\n  }\n);\n\nconst KIND$1g = \"property\";\n\n/**\n * Defines a class property\n * @constructor Property\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {string} name\n * @property {Node|null} value\n * @property {boolean} readonly\n * @property {boolean} nullable\n * @property {Identifier|Array<Identifier>|null} type\n * @property {AttrGroup[]} attrGroups\n */\nvar property$1 = statement$1.extends(\n  KIND$1g,\n  function Property(\n    name,\n    value,\n    readonly,\n    nullable,\n    type,\n    attrGroups,\n    docs,\n    location\n  ) {\n    statement$1.apply(this, [KIND$1g, docs, location]);\n    this.name = name;\n    this.value = value;\n    this.readonly = readonly;\n    this.nullable = nullable;\n    this.type = type;\n    this.attrGroups = attrGroups;\n  }\n);\n\nconst KIND$1h = \"propertylookup\";\n\n/**\n * Lookup to an object property\n * @memberOf module:php-parser\n * @constructor PropertyLookup\n * @extends {Lookup}\n */\nvar propertylookup = lookup.extends(\n  KIND$1h,\n  function PropertyLookup(what, offset, docs, location) {\n    lookup.apply(this, [KIND$1h, what, offset, docs, location]);\n  }\n);\n\nconst KIND$1i = \"propertystatement\";\n\nconst IS_UNDEFINED$2 = \"\";\nconst IS_PUBLIC$2 = \"public\";\nconst IS_PROTECTED$2 = \"protected\";\nconst IS_PRIVATE$2 = \"private\";\n\n/**\n * Declares a properties into the current scope\n * @constructor PropertyStatement\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Property[]} properties\n * @property {string|null} visibility\n * @property {boolean} isStatic\n */\nconst PropertyStatement = statement$1.extends(\n  KIND$1i,\n  function PropertyStatement(kind, properties, flags, docs, location) {\n    statement$1.apply(this, [KIND$1i, docs, location]);\n    this.properties = properties;\n    this.parseFlags(flags);\n  }\n);\n\n/**\n * Generic flags parser\n * @function PropertyStatement#parseFlags\n * @memberOf module:php-parser\n * @param {Array<number|null>} flags\n * @return {void}\n */\nPropertyStatement.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED$2;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC$2;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED$2;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE$2;\n  }\n\n  this.isStatic = flags[1] === 1;\n};\n\nvar propertystatement = PropertyStatement;\n\nconst KIND$1j = \"retif\";\n\n/**\n * Defines a short if statement that returns a value\n * @constructor RetIf\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} test\n * @property {Expression} trueExpr\n * @property {Expression} falseExpr\n */\nvar retif = expression.extends(\n  KIND$1j,\n  function RetIf(test, trueExpr, falseExpr, docs, location) {\n    expression.apply(this, [KIND$1j, docs, location]);\n    this.test = test;\n    this.trueExpr = trueExpr;\n    this.falseExpr = falseExpr;\n  }\n);\n\nconst KIND$1k = \"return\";\n\n/**\n * A continue statement\n * @constructor Return\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression|null} expr\n */\nvar _return = statement$1.extends(KIND$1k, function Return(expr, docs, location) {\n  statement$1.apply(this, [KIND$1k, docs, location]);\n  this.expr = expr;\n});\n\nconst KIND$1l = \"selfreference\";\n\n/**\n * Defines a class reference node\n * @constructor SelfReference\n * @memberOf module:php-parser\n * @extends {Reference}\n */\nconst SelfReference = reference.extends(\n  KIND$1l,\n  function SelfReference(raw, docs, location) {\n    reference.apply(this, [KIND$1l, docs, location]);\n    this.raw = raw;\n  }\n);\nvar selfreference = SelfReference;\n\nconst KIND$1m = \"silent\";\n\n/**\n * Avoids to show/log warnings & notices from the inner expression\n * @constructor Silent\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} expr\n */\nvar silent = expression.extends(\n  KIND$1m,\n  function Silent(expr, docs, location) {\n    expression.apply(this, [KIND$1m, docs, location]);\n    this.expr = expr;\n  }\n);\n\nconst KIND$1n = \"static\";\n\n/**\n * Declares a static variable into the current scope\n * @constructor Static\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {StaticVariable[]} variables\n */\nvar _static = statement$1.extends(\n  KIND$1n,\n  function Static(variables, docs, location) {\n    statement$1.apply(this, [KIND$1n, docs, location]);\n    this.variables = variables;\n  }\n);\n\nconst KIND$1o = \"staticvariable\";\n\n/**\n * Defines a constant\n * @constructor StaticVariable\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Variable} variable\n * @property {Node|string|number|boolean|null} defaultValue\n */\nvar staticvariable = node.extends(\n  KIND$1o,\n  function StaticVariable(variable, defaultValue, docs, location) {\n    node.apply(this, [KIND$1o, docs, location]);\n    this.variable = variable;\n    this.defaultValue = defaultValue;\n  }\n);\n\nconst KIND$1p = \"staticlookup\";\n\n/**\n * Lookup to a static property\n * @constructor StaticLookup\n * @memberOf module:php-parser\n * @extends {Lookup}\n */\nvar staticlookup = lookup.extends(\n  KIND$1p,\n  function StaticLookup(what, offset, docs, location) {\n    lookup.apply(this, [KIND$1p, what, offset, docs, location]);\n  }\n);\n\nconst KIND$1q = \"staticreference\";\n\n/**\n * Defines a class reference node\n * @constructor StaticReference\n * @memberOf module:php-parser\n * @extends {Reference}\n */\nconst StaticReference = reference.extends(\n  KIND$1q,\n  function StaticReference(raw, docs, location) {\n    reference.apply(this, [KIND$1q, docs, location]);\n    this.raw = raw;\n  }\n);\nvar staticreference = StaticReference;\n\nconst KIND$1r = \"string\";\n\n/**\n * Defines a string (simple or double quoted) - chars are already escaped\n * @constructor String\n * @memberOf module:php-parser\n * @extends {Literal}\n * @property {boolean} unicode\n * @property {boolean} isDoubleQuote\n * @see {Encapsed}\n * @property {string} value\n */\nvar string = literal.extends(\n  KIND$1r,\n  function String(isDoubleQuote, value, unicode, raw, docs, location) {\n    literal.apply(this, [KIND$1r, value, raw, docs, location]);\n    this.unicode = unicode;\n    this.isDoubleQuote = isDoubleQuote;\n  }\n);\n\nconst KIND$1s = \"switch\";\n\n/**\n * Defines a switch statement\n * @constructor Switch\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {boolean} shortForm\n */\nvar _switch$1 = statement$1.extends(\n  KIND$1s,\n  function Switch(test, body, shortForm, docs, location) {\n    statement$1.apply(this, [KIND$1s, docs, location]);\n    this.test = test;\n    this.body = body;\n    this.shortForm = shortForm;\n  }\n);\n\nconst KIND$1t = \"throw\";\n\n/**\n * Defines a throw statement\n * @constructor Throw\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} what\n */\nvar _throw = statement$1.extends(KIND$1t, function Throw(what, docs, location) {\n  statement$1.apply(this, [KIND$1t, docs, location]);\n  this.what = what;\n});\n\nconst KIND$1u = \"trait\";\n\n/**\n * A trait definition\n * @constructor Trait\n * @memberOf module:php-parser\n * @extends {Declaration}\n * @property {Declaration[]} body\n */\nvar trait = declaration.extends(\n  KIND$1u,\n  function Trait(name, body, docs, location) {\n    declaration.apply(this, [KIND$1u, name, docs, location]);\n    this.body = body;\n  }\n);\n\nconst KIND$1v = \"traitalias\";\n\nconst IS_UNDEFINED$3 = \"\";\nconst IS_PUBLIC$3 = \"public\";\nconst IS_PROTECTED$3 = \"protected\";\nconst IS_PRIVATE$3 = \"private\";\n\n/**\n * Defines a trait alias\n * @constructor TraitAlias\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier|null} as\n * @property {string|null} visibility\n */\nvar traitalias = node.extends(\n  KIND$1v,\n  function TraitAlias(trait, method, as, flags, docs, location) {\n    node.apply(this, [KIND$1v, docs, location]);\n    this.trait = trait;\n    this.method = method;\n    this.as = as;\n    this.visibility = IS_UNDEFINED$3;\n    if (flags) {\n      if (flags[0] === 0) {\n        this.visibility = IS_PUBLIC$3;\n      } else if (flags[0] === 1) {\n        this.visibility = IS_PROTECTED$3;\n      } else if (flags[0] === 2) {\n        this.visibility = IS_PRIVATE$3;\n      }\n    }\n  }\n);\n\nconst KIND$1w = \"traitprecedence\";\n\n/**\n * Defines a trait alias\n * @constructor TraitPrecedence\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier[]} instead\n */\nvar traitprecedence = node.extends(\n  KIND$1w,\n  function TraitPrecedence(trait, method, instead, docs, location) {\n    node.apply(this, [KIND$1w, docs, location]);\n    this.trait = trait;\n    this.method = method;\n    this.instead = instead;\n  }\n);\n\nconst KIND$1x = \"traituse\";\n\n/**\n * Defines a trait usage\n * @constructor TraitUse\n * @memberOf module:php-parser\n * @extends {Node}\n * @property {Identifier[]} traits\n * @property {Node[]|null} adaptations\n */\nvar traituse = node.extends(\n  KIND$1x,\n  function TraitUse(traits, adaptations, docs, location) {\n    node.apply(this, [KIND$1x, docs, location]);\n    this.traits = traits;\n    this.adaptations = adaptations;\n  }\n);\n\nconst KIND$1y = \"try\";\n\n/**\n * Defines a try statement\n * @constructor Try\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Block} body\n * @property {Catch[]} catches\n * @property {Block} always\n */\nvar _try$1 = statement$1.extends(\n  KIND$1y,\n  function Try(body, catches, always, docs, location) {\n    statement$1.apply(this, [KIND$1y, docs, location]);\n    this.body = body;\n    this.catches = catches;\n    this.always = always;\n  }\n);\n\nconst KIND$1z = \"typereference\";\n\n/**\n * Defines a class reference node\n * @constructor TypeReference\n * @memberOf module:php-parser\n * @extends {Reference}\n * @property {string} name\n */\nconst TypeReference = reference.extends(\n  KIND$1z,\n  function TypeReference(name, raw, docs, location) {\n    reference.apply(this, [KIND$1z, docs, location]);\n    this.name = name;\n    this.raw = raw;\n  }\n);\n\nTypeReference.types = [\n  \"int\",\n  \"float\",\n  \"string\",\n  \"bool\",\n  \"object\",\n  \"array\",\n  \"callable\",\n  \"iterable\",\n  \"void\",\n  \"static\",\n];\n\nvar typereference = TypeReference;\n\nconst KIND$1A = \"unary\";\n\n/**\n * Unary operations\n * @constructor Unary\n * @memberOf module:php-parser\n * @extends {Operation}\n * @property {string} type\n * @property {Expression} what\n */\nvar unary = operation.extends(\n  KIND$1A,\n  function Unary(type, what, docs, location) {\n    operation.apply(this, [KIND$1A, docs, location]);\n    this.type = type;\n    this.what = what;\n  }\n);\n\nconst KIND$1B = \"uniontype\";\n\n/**\n * A union of types\n * @memberOf module:php-parser\n * @constructor UnionType\n * @extends {Declaration}\n * @property {TypeReference[]} types\n */\nvar uniontype = declaration.extends(\n  KIND$1B,\n  function UnionType(types, docs, location) {\n    declaration.apply(this, [KIND$1B, null, docs, location]);\n    this.types = types;\n  }\n);\n\nconst KIND$1C = \"unset\";\n\n/**\n * Deletes references to a list of variables\n * @constructor Unset\n * @memberOf module:php-parser\n * @extends {Statement}\n */\nvar unset = statement$1.extends(\n  KIND$1C,\n  function Unset(variables, docs, location) {\n    statement$1.apply(this, [KIND$1C, docs, location]);\n    this.variables = variables;\n  }\n);\n\nconst KIND$1D = \"usegroup\";\n\n/**\n * Defines a use statement (with a list of use items)\n * @constructor UseGroup\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {string|null} name\n * @property {string|null} type - Possible value : function, const\n * @property {UseItem[]} item\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nvar usegroup = statement$1.extends(\n  KIND$1D,\n  function UseGroup(name, type, items, docs, location) {\n    statement$1.apply(this, [KIND$1D, docs, location]);\n    this.name = name;\n    this.type = type;\n    this.items = items;\n  }\n);\n\nconst KIND$1E = \"useitem\";\n\n/**\n * Defines a use statement (from namespace)\n * @constructor UseItem\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {string} name\n * @property {string|null} type - Possible value : function, const\n * @property {Identifier|null} alias\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nconst UseItem = statement$1.extends(\n  KIND$1E,\n  function UseItem(name, alias, type, docs, location) {\n    statement$1.apply(this, [KIND$1E, docs, location]);\n    this.name = name;\n    this.alias = alias;\n    this.type = type;\n  }\n);\n\n/**\n * Importing a constant\n * @constant {string} UseItem#TYPE_CONST\n * @memberOf module:php-parser\n */\nUseItem.TYPE_CONST = \"const\";\n/**\n * Importing a function\n * @constant {string} UseItem#TYPE_FUNC\n * @memberOf module:php-parser\n */\nUseItem.TYPE_FUNCTION = \"function\";\n\nvar useitem = UseItem;\n\nconst KIND$1F = \"variable\";\n\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Variable\n * @memberOf module:php-parser\n * @extends {Expression}\n * @example\n * // PHP code :\n * $foo\n * // AST output\n * {\n *  \"kind\": \"variable\",\n *  \"name\": \"foo\",\n *  \"curly\": false\n * }\n * @property {string|Node} name The variable name (can be a complex expression when the name is resolved dynamically)\n * @property {boolean} curly Indicate if the name is defined between curlies, ex `${foo}`\n */\nvar variable$1 = expression.extends(\n  KIND$1F,\n  function Variable(name, curly, docs, location) {\n    expression.apply(this, [KIND$1F, docs, location]);\n    this.name = name;\n    this.curly = curly || false;\n  }\n);\n\nconst KIND$1G = \"variadic\";\n\n/**\n * Introduce a list of items into the arguments of the call\n * @constructor Variadic\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Array|Expression} what\n * @see https://wiki.php.net/rfc/argument_unpacking\n */\nvar variadic = expression.extends(\n  KIND$1G,\n  function variadic(what, docs, location) {\n    expression.apply(this, [KIND$1G, docs, location]);\n    this.what = what;\n  }\n);\n\nconst KIND$1H = \"variadicplaceholder\";\n\n/**\n * Defines a variadic placeholder (the ellipsis in PHP 8.1+'s first-class callable syntax)\n * @constructor VariadicPlaceholder\n * @memberOf module:php-parser\n * @extends {Node}\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nvar variadicplaceholder = node.extends(\n  KIND$1H,\n  function VariadicPlaceholder(docs, location) {\n    node.apply(this, [KIND$1H, docs, location]);\n  }\n);\n\nconst KIND$1I = \"while\";\n\n/**\n * Defines a while statement\n * @constructor While\n * @memberOf module:php-parser\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block | null} body\n * @property {boolean} shortForm\n */\nvar _while = statement$1.extends(\n  KIND$1I,\n  function While(test, body, shortForm, docs, location) {\n    statement$1.apply(this, [KIND$1I, docs, location]);\n    this.test = test;\n    this.body = body;\n    this.shortForm = shortForm;\n  }\n);\n\nconst KIND$1J = \"yield\";\n\n/**\n * Defines a yield generator statement\n * @constructor Yield\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression|null} value\n * @property {Expression|null} key\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\nvar _yield = expression.extends(\n  KIND$1J,\n  function Yield(value, key, docs, location) {\n    expression.apply(this, [KIND$1J, docs, location]);\n    this.value = value;\n    this.key = key;\n  }\n);\n\nconst KIND$1K = \"yieldfrom\";\n\n/**\n * Defines a yield from generator statement\n * @constructor YieldFrom\n * @memberOf module:php-parser\n * @extends {Expression}\n * @property {Expression} value\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\nvar yieldfrom = expression.extends(\n  KIND$1K,\n  function YieldFrom(value, docs, location) {\n    expression.apply(this, [KIND$1K, docs, location]);\n    this.value = value;\n  }\n);\n\n/**\n * ## Class hierarchy\n *\n * - [Location](#location)\n * - [Position](#position)\n * - [Node](#node)\n *   - [Noop](#noop)\n *   - [NullKeyword](#nullkeyword)\n *   - [StaticVariable](#staticvariable)\n *   - [EncapsedPart](#encapsedpart)\n *   - [Constant](#constant)\n *   - [Identifier](#identifier)\n *   - [Reference](#reference)\n *     - [TypeReference](#typereference)\n *     - [ParentReference](#parentreference)\n *     - [StaticReference](#staticreference)\n *     - [SelfReference](#selfreference)\n *     - [Name](#name)\n *   - [TraitUse](#traituse)\n *   - [TraitAlias](#traitalias)\n *   - [TraitPrecedence](#traitprecedence)\n *   - [Comment](#comment)\n *     - [CommentLine](#commentline)\n *     - [CommentBlock](#commentblock)\n *   - [Error](#error)\n *   - [Expression](#expression)\n *     - [Entry](#entry)\n *     - [ArrowFunc](#arrowfunc)\n *     - [Closure](#closure)\n *     - [ByRef](#byref)\n *     - [Silent](#silent)\n *     - [RetIf](#retif)\n *     - [New](#new)\n *     - [Include](#include)\n *     - [Call](#call)\n *     - [Eval](#eval)\n *     - [Exit](#exit)\n *     - [Clone](#clone)\n *     - [Assign](#assign)\n *     - [AssignRef](#assignref)\n *     - [Array](#array)\n *     - [List](#list)\n *     - [Variable](#variable)\n *     - [Variadic](#variadic)\n *     - [Yield](#yield)\n *     - [YieldFrom](#yieldfrom)\n *     - [Print](#print)\n *     - [Isset](#isset)\n *     - [Empty](#empty)\n *     - [Lookup](#lookup)\n *       - [PropertyLookup](#propertylookup)\n *       - [StaticLookup](#staticlookup)\n *       - [OffsetLookup](#offsetlookup)\n *     - [Operation](#operation)\n *       - [Pre](#pre)\n *       - [Post](#post)\n *       - [Bin](#bin)\n *       - [Unary](#unary)\n *       - [Cast](#cast)\n *     - [Literal](#literal)\n *       - [Boolean](#boolean)\n *       - [String](#string)\n *       - [Number](#number)\n *       - [Inline](#inline)\n *       - [Magic](#magic)\n *       - [Nowdoc](#nowdoc)\n *       - [Encapsed](#encapsed)\n *   - [Statement](#statement)\n *     - [ConstantStatement](#constantstatement)\n *       - [ClassConstant](#classconstant)\n *     - [Return](#return)\n *     - [Label](#label)\n *     - [Continue](#continue)\n *     - [Case](#case)\n *     - [Break](#break)\n *     - [Echo](#echo)\n *     - [Unset](#unset)\n *     - [Halt](#halt)\n *     - [Declare](#declare)\n *     - [Global](#global)\n *     - [Static](#static)\n *     - [If](#if)\n *     - [Do](#do)\n *     - [While](#while)\n *     - [For](#for)\n *     - [Foreach](#foreach)\n *     - [Switch](#switch)\n *     - [Goto](#goto)\n *     - [Try](#try)\n *     - [Catch](#catch)\n *     - [Throw](#throw)\n *     - [UseGroup](#usegroup)\n *     - [UseItem](#useitem)\n *     - [Block](#block)\n *       - [Program](#program)\n *       - [Namespace](#namespace)\n *     - [PropertyStatement](#propertystatement)\n *     - [Property](#property)\n *     - [Declaration](#declaration)\n *       - [Class](#class)\n *       - [Interface](#interface)\n *       - [Trait](#trait)\n *       - [Function](#function)\n *         - [Method](#method)\n *       - [Parameter](#parameter)\n * ---\n */\n\n/**\n * The AST builder class\n * @constructor AST\n * @memberOf module:php-parser\n * @tutorial AST\n * @property {Boolean} withPositions - Should locate any node (by default false)\n * @property {Boolean} withSource - Should extract the node original code (by default false)\n */\nconst AST = function (withPositions, withSource) {\n  this.withPositions = withPositions;\n  this.withSource = withSource;\n};\n\n// operators in ascending order of precedence\nAST.precedence = {};\n[\n  [\"or\"],\n  [\"xor\"],\n  [\"and\"],\n  [\"=\"],\n  [\"?\"],\n  [\"??\"],\n  [\"||\"],\n  [\"&&\"],\n  [\"|\"],\n  [\"^\"],\n  [\"&\"],\n  [\"==\", \"!=\", \"===\", \"!==\", /* '<>', */ \"<=>\"],\n  [\"<\", \"<=\", \">\", \">=\"],\n  [\"<<\", \">>\"],\n  [\"+\", \"-\", \".\"],\n  [\"*\", \"/\", \"%\"],\n  [\"!\"],\n  [\"instanceof\"],\n  [\"cast\", \"silent\"],\n  [\"**\"],\n  // TODO: [ (array)\n  // TODO: clone, new\n].forEach(function (list, index) {\n  list.forEach(function (operator) {\n    AST.precedence[operator] = index + 1;\n  });\n});\n\n/**\n * @private\n * @function AST#isRightAssociative\n * @memberOf module:php-parser\n * @param operator\n * @return {boolean}\n */\nAST.prototype.isRightAssociative = function (operator) {\n  return operator === \"**\" || operator === \"??\";\n};\n\n/**\n * Change parent node informations after swapping childs\n * @private\n * @function AST#swapLocations\n * @memberOf module:php-parser\n */\nAST.prototype.swapLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    target.loc.start = first.loc.start;\n    target.loc.end = last.loc.end;\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(\n        target.loc.start.offset,\n        target.loc.end.offset\n      );\n    }\n  }\n};\n\n/**\n * Includes locations from first & last into the target\n * @private\n * @function AST#resolveLocations\n * @memberOf module:php-parser\n */\nAST.prototype.resolveLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    if (target.loc.start.offset > first.loc.start.offset) {\n      target.loc.start = first.loc.start;\n    }\n    /* istanbul ignore next */\n    if (target.loc.end.offset < last.loc.end.offset) {\n      target.loc.end = last.loc.end;\n    }\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(\n        target.loc.start.offset,\n        target.loc.end.offset\n      );\n    }\n  }\n};\n\n/**\n * Check and fix precence, by default using right\n * @private\n * @function AST#resolvePrecedence\n * @memberOf module:php-parser\n */\nAST.prototype.resolvePrecedence = function (result, parser) {\n  let buffer, lLevel, rLevel;\n  // handling precendence\n  if (result.kind === \"call\") {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result, parser);\n  } else if (\n    result.kind === \"propertylookup\" ||\n    result.kind === \"staticlookup\" ||\n    (result.kind === \"offsetlookup\" && result.offset)\n  ) {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result.offset, parser);\n  } else if (result.kind === \"bin\") {\n    if (result.right && !result.right.parenthesizedExpression) {\n      if (result.right.kind === \"bin\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[result.right.type];\n        if (\n          lLevel &&\n          rLevel &&\n          rLevel <= lLevel &&\n          (result.type !== result.right.type ||\n            !this.isRightAssociative(result.type))\n        ) {\n          // https://github.com/glayzzle/php-parser/issues/79\n          // shift precedence\n          buffer = result.right;\n          result.right = result.right.left;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.left = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.left, buffer.right, parser);\n          result = buffer;\n        }\n      } else if (result.right.kind === \"retif\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[\"?\"];\n        if (lLevel && rLevel && rLevel <= lLevel) {\n          buffer = result.right;\n          result.right = result.right.test;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.test = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n          result = buffer;\n        }\n      }\n    }\n  } else if (\n    (result.kind === \"silent\" || result.kind === \"cast\") &&\n    result.expr &&\n    !result.expr.parenthesizedExpression\n  ) {\n    // https://github.com/glayzzle/php-parser/issues/172\n    if (result.expr.kind === \"bin\") {\n      buffer = result.expr;\n      result.expr = result.expr.left;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.left = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.left, buffer.right, parser);\n      result = buffer;\n    } else if (result.expr.kind === \"retif\") {\n      buffer = result.expr;\n      result.expr = result.expr.test;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"unary\") {\n    // https://github.com/glayzzle/php-parser/issues/75\n    if (result.what && !result.what.parenthesizedExpression) {\n      // unary precedence is always lower\n      if (result.what.kind === \"bin\") {\n        buffer = result.what;\n        result.what = result.what.left;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.left = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.left, buffer.right, parser);\n        result = buffer;\n      } else if (result.what.kind === \"retif\") {\n        buffer = result.what;\n        result.what = result.what.test;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.test = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"retif\") {\n    // https://github.com/glayzzle/php-parser/issues/77\n    if (\n      result.falseExpr &&\n      result.falseExpr.kind === \"retif\" &&\n      !result.falseExpr.parenthesizedExpression\n    ) {\n      buffer = result.falseExpr;\n      result.falseExpr = buffer.test;\n      this.swapLocations(result, result.test, result.falseExpr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"assign\") {\n    // https://github.com/glayzzle/php-parser/issues/81\n    if (\n      result.right &&\n      result.right.kind === \"bin\" &&\n      !result.right.parenthesizedExpression\n    ) {\n      lLevel = AST.precedence[\"=\"];\n      rLevel = AST.precedence[result.right.type];\n      // only shifts with and, xor, or\n      if (lLevel && rLevel && rLevel < lLevel) {\n        buffer = result.right;\n        result.right = result.right.left;\n        buffer.left = result;\n        this.swapLocations(buffer, buffer.left, result.right, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"expressionstatement\") {\n    this.swapLocations(result, result.expression, result, parser);\n  }\n  return result;\n};\n\n/**\n * Prepares an AST node\n * @private\n * @function AST#prepare\n * @memberOf module:php-parser\n * @param {String|null} kind - Defines the node type\n * @param {*} docs - (if null, the kind must be passed at the function call)\n * @param {Parser} parser - The parser instance (use for extracting locations)\n * @return {Function}\n */\nAST.prototype.prepare = function (kind, docs, parser) {\n  let start = null;\n  if (this.withPositions || this.withSource) {\n    start = parser.position();\n  }\n  const self = this;\n  // returns the node\n  const result = function () {\n    let location = null;\n    const args = Array.prototype.slice.call(arguments);\n    args.push(docs);\n    if (self.withPositions || self.withSource) {\n      let src = null;\n      if (self.withSource) {\n        src = parser.lexer._input.substring(start.offset, parser.prev[2]);\n      }\n      // if with source, need location on swapLocations function\n      location = new location_1(\n        src,\n        start,\n        new position(parser.prev[0], parser.prev[1], parser.prev[2])\n      );\n      // last argument is always the location\n      args.push(location);\n    }\n    // handle lazy kind definitions\n    if (!kind) {\n      kind = args.shift();\n    }\n    // build the object\n    const node = self[kind];\n    if (typeof node !== \"function\") {\n      throw new Error('Undefined node \"' + kind + '\"');\n    }\n    const astNode = Object.create(node.prototype);\n    node.apply(astNode, args);\n    result.instance = astNode;\n    /* istanbul ignore next */\n    if (result.trailingComments) {\n      // buffer of trailingComments\n      astNode.trailingComments = result.trailingComments;\n    }\n    if (typeof result.postBuild === \"function\") {\n      result.postBuild(astNode);\n    }\n    if (parser.debug) {\n      delete self.stack[result.stackUid];\n    }\n    return self.resolvePrecedence(astNode, parser);\n  };\n  if (parser.debug) {\n    if (!this.stack) {\n      this.stack = {};\n      this.stackUid = 1;\n    }\n    this.stack[++this.stackUid] = {\n      position: start,\n      stack: new Error().stack.split(\"\\n\").slice(3, 5),\n    };\n    result.stackUid = this.stackUid;\n  }\n\n  /**\n   * Sets a list of trailing comments\n   * @private\n   * @param {*} docs\n   */\n  result.setTrailingComments = function (docs) {\n    if (result.instance) {\n      // already created\n      result.instance.setTrailingComments(docs);\n    } else {\n      result.trailingComments = docs;\n    }\n  };\n\n  /**\n   * Release a node without using it on the AST\n   * @private\n   * @param {*} target\n   */\n  result.destroy = function (target) {\n    if (docs) {\n      // release current docs stack\n      if (target) {\n        if (!target.leadingComments) {\n          target.leadingComments = docs;\n        } else {\n          target.leadingComments = docs.concat(target.leadingComments);\n        }\n      } else {\n        parser._docIndex = parser._docs.length - docs.length;\n      }\n    }\n    if (parser.debug) {\n      delete self.stack[result.stackUid];\n    }\n  };\n  return result;\n};\n\nAST.prototype.checkNodes = function () {\n  const errors = [];\n  for (const k in this.stack) {\n    if (Object.prototype.hasOwnProperty.call(this.stack, k)) {\n      this.stack[k].key = k;\n      errors.push(this.stack[k]);\n    }\n  }\n  this.stack = {};\n  return errors;\n};\n\n// Define all AST nodes\n[\n  array$1,\n  arrowfunc,\n  assign,\n  assignref,\n  attribute$1,\n  attrgroup,\n  bin,\n  block,\n  boolean_1,\n  _break,\n  byref,\n  call,\n  _case,\n  cast,\n  _catch,\n  _class$1,\n  classconstant,\n  clone,\n  closure,\n  comment$1,\n  commentblock,\n  commentline,\n  constant,\n  constantstatement,\n  _continue,\n  declaration,\n  declare,\n  declaredirective,\n  _do,\n  echo,\n  empty,\n  encapsed,\n  encapsedpart,\n  entry,\n  _enum$1,\n  enumcase,\n  error,\n  _eval,\n  exit,\n  expression,\n  expressionstatement,\n  _for,\n  foreach,\n  _function$1,\n  global,\n  goto_1,\n  halt,\n  identifier,\n  _if$1,\n  include,\n  inline,\n  _interface,\n  intersectiontype,\n  isset,\n  label,\n  list,\n  literal,\n  lookup,\n  magic,\n  match,\n  matcharm,\n  method,\n  name,\n  namespace$1,\n  namedargument,\n  _new,\n  node,\n  noop,\n  nowdoc,\n  nullkeyword,\n  nullsafepropertylookup,\n  number,\n  offsetlookup,\n  operation,\n  parameter,\n  parentreference,\n  post,\n  pre,\n  print,\n  program,\n  property$1,\n  propertylookup,\n  propertystatement,\n  reference,\n  retif,\n  _return,\n  selfreference,\n  silent,\n  statement$1,\n  _static,\n  staticvariable,\n  staticlookup,\n  staticreference,\n  string,\n  _switch$1,\n  _throw,\n  trait,\n  traitalias,\n  traitprecedence,\n  traituse,\n  _try$1,\n  typereference,\n  unary,\n  uniontype,\n  unset,\n  usegroup,\n  useitem,\n  variable$1,\n  variadic,\n  variadicplaceholder,\n  _while,\n  _yield,\n  yieldfrom,\n].forEach(function (ctor) {\n  AST.prototype[ctor.kind] = ctor;\n});\n\nvar ast = AST;\n\n/**\n * @private\n */\nfunction combine(src, to) {\n  const keys = Object.keys(src);\n  let i = keys.length;\n  while (i--) {\n    const k = keys[i];\n    const val = src[k];\n    if (val === null) {\n      delete to[k];\n    } else if (typeof val === \"function\") {\n      to[k] = val.bind(to);\n    } else if (Array.isArray(val)) {\n      to[k] = Array.isArray(to[k]) ? to[k].concat(val) : val;\n    } else if (typeof val === \"object\") {\n      to[k] = typeof to[k] === \"object\" ? combine(val, to[k]) : val;\n    } else {\n      to[k] = val;\n    }\n  }\n  return to;\n}\n\n/**\n * Initialise a new parser instance with the specified options\n *\n * @class\n * @memberOf module:php-parser\n * @tutorial Engine\n * @example\n * var parser = require('php-parser');\n * var instance = new parser({\n *   parser: {\n *     extractDoc: true,\n *     suppressErrors: true,\n *     version: 704 // or '7.4'\n *   },\n *   ast: {\n *     withPositions: true\n *   },\n *   lexer: {\n *     short_tags: true,\n *     asp_tags: true\n *   }\n * });\n *\n * var evalAST = instance.parseEval('some php code');\n * var codeAST = instance.parseCode('<?php some php code', 'foo.php');\n * var tokens = instance.tokenGetAll('<?php some php code');\n *\n * @param {Object} options - List of options\n * @property {Lexer} lexer\n * @property {Parser} parser\n * @property {AST} ast\n * @property {Object} tokens\n */\nconst Engine = function (options) {\n  if (typeof this === \"function\") {\n    return new this(options);\n  }\n  this.tokens = tokens_1;\n  this.lexer = new lexer(this);\n  this.ast = new ast();\n  this.parser = new parser(this.lexer, this.ast);\n  if (options && typeof options === \"object\") {\n    // disable php7 from lexer if already disabled from parser\n    if (options.parser) {\n      if (!options.lexer) {\n        options.lexer = {};\n      }\n      if (options.parser.version) {\n        if (typeof options.parser.version === \"string\") {\n          let version = options.parser.version.split(\".\");\n          version = parseInt(version[0]) * 100 + parseInt(version[1]);\n          if (isNaN(version)) {\n            throw new Error(\"Bad version number : \" + options.parser.version);\n          } else {\n            options.parser.version = version;\n          }\n        } else if (typeof options.parser.version !== \"number\") {\n          throw new Error(\"Expecting a number for version\");\n        }\n        if (options.parser.version < 500 || options.parser.version > 900) {\n          throw new Error(\"Can only handle versions between 5.x to 8.x\");\n        }\n      }\n    }\n    combine(options, this);\n\n    // same version flags based on parser options\n    this.lexer.version = this.parser.version;\n  }\n};\n\n/**\n * Check if the inpyt is a buffer or a string\n * @private\n * @param  {Buffer|String} buffer Input value that can be either a buffer or a string\n * @return {String}   Returns the string from input\n */\nconst getStringBuffer = function (buffer) {\n  return typeof buffer.write === \"function\" ? buffer.toString() : buffer;\n};\n\n/**\n * Creates a new instance (Helper)\n * @param {Object} options\n * @return {Engine}\n * @private\n */\nEngine.create = function (options) {\n  return new Engine(options);\n};\n\n/**\n * Evaluate the buffer\n * @private\n */\nEngine.parseEval = function (buffer, options) {\n  const self = new Engine(options);\n  return self.parseEval(buffer);\n};\n\n/**\n * Parse an evaluating mode string (no need to open php tags)\n * @param {String} buffer\n * @return {Program}\n */\nEngine.prototype.parseEval = function (buffer) {\n  this.lexer.mode_eval = true;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, \"eval\");\n};\n\n/**\n * Static function that parse a php code with open/close tags\n * @private\n */\nEngine.parseCode = function (buffer, filename, options) {\n  if (typeof filename === \"object\" && !options) {\n    // retro-compatibility\n    options = filename;\n    filename = \"unknown\";\n  }\n  const self = new Engine(options);\n  return self.parseCode(buffer, filename);\n};\n\n/**\n * Function that parse a php code with open/close tags\n *\n * Sample code :\n * ```php\n * <?php $x = 1;\n * ```\n *\n * Usage :\n * ```js\n * var parser = require('php-parser');\n * var phpParser = new parser({\n *   // some options\n * });\n * var ast = phpParser.parseCode('...php code...', 'foo.php');\n * ```\n * @param {String} buffer - The code to be parsed\n * @param {String} filename - Filename\n * @return {Program}\n */\nEngine.prototype.parseCode = function (buffer, filename) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, filename);\n};\n\n/**\n * Split the buffer into tokens\n * @private\n */\nEngine.tokenGetAll = function (buffer, options) {\n  const self = new Engine(options);\n  return self.tokenGetAll(buffer);\n};\n\n/**\n * Extract tokens from the specified buffer.\n * > Note that the output tokens are *STRICLY* similar to PHP function `token_get_all`\n * @param {string} buffer\n * @return {Array<string|string[]>} - Each item can be a string or an array with following informations [token_name, text, line_number]\n */\nEngine.prototype.tokenGetAll = function (buffer) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = true;\n  buffer = getStringBuffer(buffer);\n  const EOF = this.lexer.EOF;\n  const names = this.tokens.values;\n  this.lexer.setInput(buffer);\n  let token = this.lexer.lex() || EOF;\n  const result = [];\n  while (token != EOF) {\n    let entry = this.lexer.yytext;\n    if (Object.prototype.hasOwnProperty.call(names, token)) {\n      entry = [names[token], entry, this.lexer.yylloc.first_line];\n    }\n    result.push(entry);\n    token = this.lexer.lex() || EOF;\n  }\n  return result;\n};\n\n/** @module php-parser */\n\n// exports the function\nvar src = Engine;\n\n// makes libraries public\nvar tokens_1$1 = tokens_1;\nvar lexer_1 = lexer;\nvar AST_1 = ast;\nvar parser_1 = parser;\nvar combine_1 = combine;\nvar Engine_1 = Engine;\n\n// allow the default export in index.d.ts\nvar default_1 = Engine;\nsrc.tokens = tokens_1$1;\nsrc.lexer = lexer_1;\nsrc.AST = AST_1;\nsrc.parser = parser_1;\nsrc.combine = combine_1;\nsrc.Engine = Engine_1;\nsrc.default = default_1;\n\nvar laravel2jsClb = function laravel2jsClb(str, cb) {\n  if (typeof str !== 'string') {\n    var err = new Error('The first parameter was not a string');\n    if (!cb) throw err;\n    return cb(err);\n  }\n  var parser = new src({\n    parser: {\n      extractDoc: false,\n      php7: true\n    },\n    ast: {\n      withPositions: false\n    }\n  });\n  try {\n    var result = {};\n    var ast = parser.parseCode(str);\n    if (ast && ast.children && ast.children.length > 0) {\n      var returnElem = ast.children.find(function (ele) {\n        return ele.kind === 'return';\n      });\n      if (returnElem && returnElem.expr && returnElem.expr.kind === 'array' && returnElem.expr.items) {\n        ;\n        (function parseArr(items, parent) {\n          items.forEach(function (item) {\n            if (item && item.kind === 'entry' && item.key && item.key.kind === 'string' && item.key.value && item.value) {\n              if (item.value.kind === 'string') {\n                parent[item.key.value] = item.value.value || '';\n              }\n              if (item.value.kind === 'array' && item.value.items) {\n                parent[item.key.value] = {};\n                parseArr(item.value.items, parent[item.key.value]);\n              }\n            }\n          });\n        })(returnElem.expr.items, result);\n      }\n    }\n    if (cb) return cb(null, result);\n    return result;\n  } catch (e) {\n    if (cb) return cb(e);\n    throw e;\n  }\n};\nfunction laravel2js(str, cb) {\n  if (!cb) {\n    return new Promise(function (resolve, reject) {\n      return laravel2jsClb(str, function (err, ret) {\n        return err ? reject(err) : resolve(ret);\n      });\n    });\n  }\n  return laravel2jsClb(str, cb);\n}\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar js2laravelClb = function js2laravelClb(resources, cb) {\n  var result = \"<?php\\n  return [\";\n  var end = '  ];';\n  (function stringifyJs(obj, level) {\n    if (obj) {\n      var keys = Object.keys(obj);\n      keys.forEach(function (key, index) {\n        var value = obj[key] || '';\n        if (typeof value === 'string') {\n          value = value.replace(/'/g, '\\\\\\'');\n          result += \"\\n  \".concat('  '.repeat(level), \"'\").concat(key, \"' => '\").concat(value, \"'\");\n        }\n        if (_typeof(value) === 'object') {\n          result += \"\\n  \".concat('  '.repeat(level), \"'\").concat(key, \"' => [\");\n          stringifyJs(value, level + 1);\n          result += \"\\n  \".concat('  '.repeat(level), \"]\");\n        }\n        if (index + 1 < keys.length) {\n          result += ',';\n        }\n      });\n    }\n  })(resources, 1);\n  result += \"\\n\".concat(end);\n  if (cb) return cb(null, result);\n  return result;\n};\nfunction js2laravel(resources, cb) {\n  if (!cb) {\n    return new Promise(function (resolve, reject) {\n      return js2laravelClb(resources, function (err, ret) {\n        return err ? reject(err) : resolve(ret);\n      });\n    });\n  }\n  return js2laravelClb(resources, cb);\n}\n\nvar index = {\n  laravel2js: laravel2js,\n  js2laravel: js2laravel\n};\n\nexport default index;\nexport { js2laravel, laravel2js };\n"],"names":["attribute","attributeIndex","attributeListDepth","matchST_ATTRIBUTE","ch","this","input","is_WHITESPACE","unput","popState","consume_TOKEN","ST_DOUBLE_QUOTES","T_CONSTANT_ENCAPSED_STRING","_input","offset","T_COMMENT","T_DOC_COMMENT","is_LABEL_START","size","is_LABEL","T_STRING","is_NUM","consume_NUM","Error","yylineno","MAX_LENGTH_OF_LONG","long_min_digits","process","arch","numbers","yytext","hasPoint","is_HEX","consume_HNUM","consume_BNUM","is_OCTAL","consume_ONUM","prev","undo","is_NUM_START","consume_LNUM","tok","T_DNUMBER","length","T_LNUMBER","property","matchST_LOOKING_FOR_PROPERTY","T_OBJECT_OPERATOR","T_WHITESPACE","consume_LABEL","matchST_LOOKING_FOR_VARNAME","begin","T_STRING_VARNAME","matchST_VAR_OFFSET","T_NUM_STRING","T_VARIABLE","T_ENCAPSED_AND_WHITESPACE","is_TOKEN","scripting","matchST_IN_SCRIPTING","version","T_ATTRIBUTE","aspTagMode","tryMatch","nextCH","conditionStack","T_CLOSE_TAG","newline","valid_after_heredoc","valid_after_heredoc_73","concat","strings","is_HEREDOC","revert","is_TABSPACE","tChar","yyoffset","yylabel","substring","includes","heredoc_label","label","finished","consume","prematch_ENDOFDOC","T_START_HEREDOC","prefix","appendToken","isDOC_MATCH","consumeLeadingSpaces","prev_ch","indentation_uses_spaces","indentation_uses_tabs","indentation","leading_ch","first_encaps_node","matchST_NOWDOC","T_END_HEREDOC","matchST_HEREDOC","T_DOLLAR_OPEN_CURLY_BRACES","next","consume_VARIABLE","T_CURLY_OPEN","matchST_BACKQUOTE","matchST_DOUBLE_QUOTES","utils","charCodeAt","indexOf","consume_TABSPACE","Lexer","engine","tokens","names","EOF","debug","all_tokens","comment_tokens","mode_eval","asp_tags","short_tags","yyprevcol","keywords","__class__","T_CLASS_C","__trait__","T_TRAIT_C","__function__","T_FUNC_C","__method__","T_METHOD_C","__line__","T_LINE","__file__","T_FILE","__dir__","T_DIR","__namespace__","T_NS_C","exit","T_EXIT","die","function","T_FUNCTION","const","T_CONST","return","T_RETURN","try","T_TRY","catch","T_CATCH","finally","T_FINALLY","throw","T_THROW","if","T_IF","elseif","T_ELSEIF","endif","T_ENDIF","else","T_ELSE","while","T_WHILE","endwhile","T_ENDWHILE","do","T_DO","for","T_FOR","endfor","T_ENDFOR","foreach","T_FOREACH","endforeach","T_ENDFOREACH","declare","T_DECLARE","enddeclare","T_ENDDECLARE","instanceof","T_INSTANCEOF","as","T_AS","switch","T_SWITCH","endswitch","T_ENDSWITCH","case","T_CASE","default","T_DEFAULT","break","T_BREAK","continue","T_CONTINUE","goto","T_GOTO","echo","T_ECHO","print","T_PRINT","class","T_CLASS","interface","T_INTERFACE","trait","T_TRAIT","enum","T_ENUM","extends","T_EXTENDS","implements","T_IMPLEMENTS","new","T_NEW","clone","T_CLONE","var","T_VAR","eval","T_EVAL","include","T_INCLUDE","include_once","T_INCLUDE_ONCE","require","T_REQUIRE","require_once","T_REQUIRE_ONCE","namespace","T_NAMESPACE","use","T_USE","insteadof","T_INSTEADOF","global","T_GLOBAL","isset","T_ISSET","empty","T_EMPTY","__halt_compiler","T_HALT_COMPILER","static","T_STATIC","abstract","T_ABSTRACT","final","T_FINAL","private","T_PRIVATE","protected","T_PROTECTED","public","T_PUBLIC","unset","T_UNSET","list","T_LIST","array","T_ARRAY","callable","T_CALLABLE","or","T_LOGICAL_OR","and","T_LOGICAL_AND","xor","T_LOGICAL_XOR","match","T_MATCH","readonly","T_READ_ONLY","castKeywords","int","T_INT_CAST","integer","real","T_DOUBLE_CAST","double","float","string","T_STRING_CAST","binary","T_ARRAY_CAST","object","T_OBJECT_CAST","bool","T_BOOL_CAST","boolean","T_UNSET_CAST","prototype","setInput","yylloc","first_offset","first_line","first_column","prev_offset","prev_line","prev_column","last_line","last_column","fn","T_FN","done","toString","i","c","text","ahead","tryMatchCaseless","toLowerCase","getState","setState","state","value","push","lex","token","T_OPEN_TAG","T_OPEN_TAG_WITH_ECHO","condition","curCondition","stateCb","pop","shift","apply","tName","values","e","console","error","stack","nextINITIAL","matchINITIAL","T_INLINE_HTML","id","T_YIELD_FROM","T_YIELD","initial","isEnum","slice","T_NAME_RELATIVE","T_NAME_QUALIFIED","tokenTerminals","$","nchar","T_DEC","T_MINUS_EQUAL","T_NAME_FULLY_QUALIFIED","T_NS_SEPARATOR","T_DIV_EQUAL","T_DOUBLE_COLON","yylen","castToken","castId","T_DOUBLE_ARROW","T_IS_IDENTICAL","T_IS_EQUAL","T_INC","T_PLUS_EQUAL","T_IS_NOT_IDENTICAL","T_IS_NOT_EQUAL","T_COALESCE_EQUAL","T_COALESCE","T_NULLSAFE_OBJECT_OPERATOR","T_SL_EQUAL","T_SL","T_SPACESHIP","T_IS_SMALLER_OR_EQUAL","T_IS_GREATER_OR_EQUAL","T_SR_EQUAL","T_SR","T_MUL_EQUAL","T_POW_EQUAL","T_POW","T_CONCAT_EQUAL","T_ELLIPSIS","T_MOD_EQUAL","T_AND_EQUAL","T_BOOLEAN_AND","T_OR_EQUAL","T_BOOLEAN_OR","T_XOR_EQUAL","forEach","ext","k","lexer","position","line","column","_class","read_class_declaration_statement","attrs","result","node","flag","read_class_modifiers","expect","propName","name","propExtends","read_extends_from","propImplements","read_implements_list","read_class_body","attrGroups","modifier","read_class_modifier","final_or_abstract","memo","allow_variables","allow_enum_cases","enumcase","read_enum_case","read_attr_list","locStart","flags","read_member_flags","read_function","variables","read_variable_list","constants","read_constant_list","read_trait_use_statement","read_doc_comment","read_comment","properties","read_list","read_optional_type","nullable","type","read_expr","items","constName","is","asInterface","idx","val","read_types","raiseError","variant","read_type","read_interface_declaration_statement","read_interface_extends_list","read_interface_body","method","read_function_declaration","parseFlags","read_trait_declaration_statement","traits","read_namespace_name","adaptations","read_trait_use_alias","methodName","read_name_list","alias","expr","read_expr_item","read_class_name_reference","trueArg","destroy","read_expr_cast","read_isset_variable","read_isset_variables","read_function_list","read_internal_functions_in_yacc","expression","read_optional_expr","stopToken","read_exit_expr","parenthesizedExpression","handleDereferencable","read_encapsed_string","assign","isInner","innerList","assignList","read_array_pair_list","hasItem","kind","read_variable","read_new_expr","read_match_expression","useDie","key","read_inline_function","undefined","backup","isConst","read_assignref","read_scalar","shortForm","convertToList","loc","convertedItems","map","entry","leadingComments","trailingComments","left","right","isRef","is_reference","params","read_parameter_list","returnType","cond","arms","read_match_arms","read_match_arm","read_match_arm_conds","conds","read_attribute","args","read_argument_list","attrGr","newExp","what","body","whatNode","read_new_class_name","offsetNode","read_encaps_var_offset","read_static_getter","recursive_variable_chain_scan","read_dereferencable","_function","is_variadic","closure","read_code_block","end","isStatic","nodeName","nameNode","read_lexical_vars","apply_attrgroup_location","start","source","substr","read_lexical_var_list","read_list_with_dangling_comma","item","read_lexical_var","bind","read_byref","is_class_constructor","wasVariadic","parameter","read_parameter","variadic","types","parameterName","read_promoted","isVariadic","MODE_UNSET","MODE_UNION","MODE_INTERSECTION","mode","nextToken","peek","read_non_empty_argument_list","argument","read_argument","Object","ast","typereference","specialChar","n","r","t","f","String","fromCharCode","v","scalar","resolve_special_chars","doubleQuote","replace","$match","p1","p2","fromCodePoint","parseInt","remove_heredoc_leading_whitespace_chars","check_heredoc_indentation_level","matchedChar","removementRegExp","RegExp","removementFirstEncapsNodeRegExp","textSize","leadingWhitespaceCharCount","inCoutingState","chToCheck","inCheckState","read_dereferencable_scalar","isDoubleQuote","read_array","get_magic_constant","lastCh","raw","err","read_encapsed_string_item","encapsedPart","syntax","curly","varName","read_simple_variable","isBinary","labelStart","encapsed","TYPE_SHELL","TYPE_STRING","TYPE_HEREDOC","toUpperCase","statement","read_top_statements","read_top_statement","Array","isArray","read_enum_declaration_statement","read_use_statement","read_const_list","expectEndOfStatement","read_namespace","read_statement","read_inner_statements","read_inner_statement","read_declare_list","directive","read_if","read_switch","read_for","read_foreach","read_while","read_do","level","current","read_variable_declarations","expressions","prevChar","fixFirstLine","directives","extractDoc","_docs","_docIndex","MODE_SHORT","MODE_BLOCK","MODE_NONE","read_try","labelNameText","labelName","top","variable","read_only","read_reference_variable","literal","read_what","is_static_lookup","recursive_scan_loop","isSquareBracket","num","isNumber","isNaN","parseFloat","isFinite","Parser","extractTokens","suppressErrors","mapIt","entries","IDENTIFIER","Map","VARIABLE","SCALAR","T_MAGIC_CONST","T_MEMBER_FLAGS","EOS","EXPR","getTokenName","parse","code","filename","_errors","currentNamespace","_tokens","_lastNode","innerListForm","program","childs","read_start","errors","checkNodes","log","join","message","msgExpect","SyntaxError","lineNumber","fileName","columnNumber","prepare","msg","symbol","docs","postBuild","self","max","setTrailingComments","includeToken","ignoreStack","showlog","split","trim","found","lexerState","hasOwnProperty","call","has","read_array_pair","byRef","unpack","valueType","read_enum_value_type","caseName","test","read_if_expr","alternate","read_elseif_short","read_else_short","read_short_form","init","increment","read_foreach_variable","isShort","resolveReference","resolution","RELATIVE_NAME","QUALIFIED_NAME","FULL_QUALIFIED_NAME","UNQUALIFIED_NAME","read_use_type","read_use_declaration","read_use_declarations","typed","read_use_alias","aliasName","useitem","TYPE_FUNCTION","TYPE_CONST","read_switch_case_list","read_case_list","always","catches","separator","preserveFirstSeparator","itemResult","cb","byref","swapLocations","parser","TokenNames","tokens$2","reduce","tokens_1","freeze","location_1","Node","location","withSource","constructor","create","KIND","KIND$1","array$1","KIND$2","arrowfunc","arguments","KIND$3","operator","KIND$4","assignref","KIND$5","attribute$1","KIND$6","attrgroup","KIND$7","operation","bin","KIND$9","statement$1","KIND$a","block","children","filter","Boolean","KIND$b","KIND$c","boolean_1","KIND$d","_break","KIND$e","KIND$f","KIND$g","_case","KIND$h","cast","KIND$i","_catch","KIND$j","Declaration","isAbstract","isFinal","isReadonly","visibility","declaration","KIND$k","_class$1","impl","isAnonymous","KIND$l","constantstatement","KIND$m","ClassConstant","classconstant","KIND$n","KIND$o","uses","comment$1","KIND$p","commentblock","KIND$q","commentline","KIND$r","constant","KIND$s","_continue","KIND$t","Declare","KIND$u","declaredirective","_do","KIND$w","KIND$x","expression$1","KIND$y","Encapsed","TYPE_OFFSET","KIND$z","encapsedpart","KIND$A","KIND$B","_enum$1","KIND$C","KIND$D","expected","KIND$E","_eval","KIND$F","KIND$G","expressionstatement","_for","KIND$I","KIND$J","_function$1","KIND$K","KIND$L","goto_1","KIND$M","halt","after","KIND$N","Identifier","identifier","_if$1","KIND$P","once","target","KIND$Q","inline","KIND$R","_interface","KIND$S","intersectiontype","KIND$T","KIND$U","KIND$V","KIND$W","lookup","KIND$X","magic","KIND$Y","KIND$Z","matcharm","KIND$_","KIND$$","reference","KIND$10","Name","KIND$11","namespace$1","withBrackets","KIND$12","namedargument","_new","KIND$14","noop","KIND$15","nowdoc","KIND$16","nullkeyword","KIND$17","nullsafepropertylookup","KIND$18","number","KIND$19","offsetlookup","KIND$1a","KIND$1b","parentreference","KIND$1c","post","pre","KIND$1e","KIND$1f","comments","KIND$1g","property$1","KIND$1h","propertylookup","KIND$1i","PropertyStatement","propertystatement","KIND$1j","retif","trueExpr","falseExpr","KIND$1k","_return","KIND$1l","selfreference","KIND$1m","silent","KIND$1n","_static","KIND$1o","staticvariable","defaultValue","KIND$1p","staticlookup","KIND$1q","staticreference","KIND$1r","unicode","KIND$1s","_switch$1","KIND$1t","_throw","KIND$1u","KIND$1v","traitalias","KIND$1w","traitprecedence","instead","KIND$1x","traituse","_try$1","KIND$1z","TypeReference","KIND$1A","unary","KIND$1B","uniontype","KIND$1C","KIND$1D","usegroup","KIND$1E","UseItem","KIND$1F","variable$1","KIND$1G","KIND$1H","variadicplaceholder","KIND$1I","_while","KIND$1J","_yield","KIND$1K","yieldfrom","AST","withPositions","precedence","index","isRightAssociative","first","last","resolveLocations","resolvePrecedence","buffer","lLevel","rLevel","src","astNode","instance","stackUid","ctor","combine","to","keys","Engine","options","getStringBuffer","write","parseEval","parseCode","tokenGetAll","tokens_1$1","lexer_1","AST_1","parser_1","combine_1","Engine_1","default_1","laravel2jsClb","str","php7","returnElem","find","ele","parseArr","parent","laravel2js","Promise","resolve","reject","ret","_typeof","o","Symbol","iterator","js2laravelClb","resources","stringifyJs","obj","repeat","js2laravel"],"sourceRoot":""}