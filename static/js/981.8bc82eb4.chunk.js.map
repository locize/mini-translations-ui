{"version":3,"file":"static/js/981.8bc82eb4.chunk.js","mappings":"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","sources":["../../file-csv/dist/es/index-d2c067cf.js"],"sourcesContent":["import stream$1 from 'stream';\n\nvar helper = {\n    getQuoteChar : getQuoteChar,\n    dataType : dataType,\n    toCsv : toCsv,\n    putData : putData,\n    allObjsOrArray : allObjsOrArray,\n    getHeaders : getHeaders,\n    getLengthyItem : getLengthyItem,\n    addDataInSchema : addDataInSchema,\n    removeQuote : removeQuote,\n    arrayToCsv : arrayToCsv,\n    objectToCsv : objectToCsv,\n    convertArray : convertArray,\n    csvToArray : csvToArray\n};\n\nfunction getQuoteChar(q){\n  if(typeof(q) === \"string\"){\n    return q;\n  }else if(q === true){\n    return '\"';\n  }\n  return null;\n}\n\nfunction dataType(arg) {\n    if (arg === null) {\n        return 'null';\n    }\n    else if (arg && (arg.nodeType === 1 || arg.nodeType === 9)) {\n        return 'element';\n    }\n    var type = (Object.prototype.toString.call(arg)).match(/\\[object (.*?)\\]/)[1].toLowerCase();\n    if (type === 'number') {\n        if (isNaN(arg)) {\n            return 'nan';\n        }\n        if (!isFinite(arg)) {\n            return 'infinity';\n        }\n    }\n    return type;\n}\n\n\nfunction toCsv(data, table, parent, row, opt){\n    if(dataType(data) === 'undefined'){\n        return putData('', table, parent, row);\n    }else if(dataType(data) === 'null'){\n        return putData('null', table, parent, row);\n    }else if(Array.isArray(data)){\n        return arrayToCsv(data, table, parent, row, opt);\n    }else if(typeof(data) === \"object\"){\n        return objectToCsv(data, table, parent, row, opt);\n    }else {\n        return putData(String(data), table, parent, row);\n    }\n}\n\nfunction putData(data, table, parent, row, opt){\n  if(!table || !table[parent]){\n      table[parent] = [ ];\n  }\n  if(row < table[parent].length){\n    row = table[parent].length;\n  }\n  table[parent][row] = data;\n  return table;\n}\n\n\nfunction allObjsOrArray(array){\n  return array.every(function(item){\n        var datatype = dataType(item);\n        if(!datatype.match(/array|object/)){\n          return true;\n        }\n        return false;\n  });\n}\n\n\nfunction getHeaders(headerType, table, opt){\n  var keyMatchPattern       = /([^\\[\\]\\.]+)$/;\n  var relativeMatchPattern  = /\\[\\]\\.?([^\\[\\]]+)$/;\n  switch(headerType){\n    case \"none\":\n      return null;\n    case \"full\":\n      return Object.keys(table);\n    case \"key\":\n      return Object.keys(table).map(function(header){\n        var head = header.match(keyMatchPattern);\n        if(head && head.length === 2){\n          return head[1];\n        }\n        return header;\n      });\n    case \"relative\":\n      return Object.keys(table).map(function(header){\n        var head = header.match(relativeMatchPattern);\n        if(head && head.length === 2){\n          return head[1];\n        }\n        return header;\n      });\n  }\n}\n\nfunction getLengthyItem(table){\n  var len = 0;\n  Object.keys(table).forEach(function(item){\n      if(Array.isArray(table[item]) && table[item].length > len){\n        len = table[item].length;\n      }\n  });\n  return len;\n}\n\nfunction addDataInSchema(header, item, schema, delimiter, quote){\n    var match = header.match(/\\[*[\\d]\\]\\.(\\w+)|\\.|\\[\\]|\\[(.)\\]|-|\\+/ig);\n    var headerName, currentPoint;\n    if(match){\n        var testMatch = match[0];\n        if(match.indexOf('-') !== -1){\n            return true;\n        }else if(match.indexOf('.') !== -1){\n            var headParts = header.split('.');\n            currentPoint = headParts.shift();\n            schema[currentPoint] = schema[currentPoint] || {};\n            addDataInSchema(headParts.join('.'), item, schema[currentPoint], delimiter, quote);\n        }else if(match.indexOf('[]') !== -1){\n            headerName = header.replace(/\\[\\]/ig,'');\n            if(!schema[headerName]){\n            schema[headerName] = [];\n            }\n            schema[headerName].push(item);\n        }else if(/\\[*[\\d]\\]\\.(\\w+)/.test(testMatch)){\n            headerName = header.split('[').shift();\n            var index = parseInt(testMatch.match(/\\[(.)\\]/).pop(),10);\n            currentPoint = header.split('.').pop();\n            schema[headerName] = schema[headerName] || [];\n            schema[headerName][index] = schema[headerName][index] || {};\n            schema[headerName][index][currentPoint] = item;\n        }else if(/\\[(.)\\]/.test(testMatch)){\n            var delimiter = testMatch.match(/\\[(.)\\]/).pop();\n            headerName = header.replace(/\\[(.)\\]/ig,'');\n            schema[headerName] = convertArray(item, delimiter, quote);\n        }else if(match.indexOf('+') !== -1){\n            headerName = header.replace(/\\+/ig,\"\");\n            schema[headerName] = Number(item);\n        }\n    }else {\n        schema[header] = removeQuote(item);\n    }\n    return schema ;\n}\n\nfunction removeQuote(str){\n    if(str){\n        return String(str).trim().replace(/^[\"|'](.*)[\"|']$/, '$1');\n    }\n    return \"\";\n}\n\nfunction arrayToCsv(data, table, parent, row, opt){\n    if(allObjsOrArray(data)){\n      return putData(data.join(';'), table, parent + opt.arrayDenote, row);\n    }\n    data.forEach(function(item, index){\n        return toCsv(item, table, parent + opt.arrayDenote, index, opt);\n    });\n}\n\nfunction objectToCsv(data, table, parent, row, opt){\n  Object.keys(data).forEach(function(item){\n      return toCsv(data[item], table, parent + opt.objectDenote + item, row, opt);\n  });\n}\n\nfunction convertArray(str, delimiter, quote) {\n    if(quote && str.indexOf(quote) !== -1){\n      return csvToArray(str, delimiter, quote);\n    }\n    var output = [];\n    var arr = str.split(delimiter);\n    arr.forEach(function(val) {\n        var trimmed = val.trim();\n        output.push(trimmed);\n    });\n    return output;\n}\n\nfunction csvToArray(text, delimit, quote) {\n\n    delimit = delimit || \",\";\n    quote   = quote || '\"';\n\n    var value = new RegExp(\"(?!\\\\s*$)\\\\s*(?:\" +  quote + \"([^\" +  quote + \"\\\\\\\\]*(?:\\\\\\\\[\\\\S\\\\s][^\" +  quote + \"\\\\\\\\]*)*)\" +  quote + \"|([^\" +  delimit  +  quote + \"\\\\s\\\\\\\\]*(?:\\\\s+[^\" +  delimit  +  quote + \"\\\\s\\\\\\\\]+)*))\\\\s*(?:\" +  delimit + \"|$)\", \"g\");\n\n    var a = [ ];\n\n    text.replace(value,\n        function(m0, m1, m2) {\n            if(m1 !== undefined){\n                a.push(m1.replace(/\\\\'/g, \"'\"));\n            }else if(m2 !== undefined){\n                a.push(m2);\n            }\n            return '';\n        }\n    );\n\n    if (/,\\s*$/.test(text)){\n        a.push('');\n    }\n    return a;\n}\n\nvar app = {\n    toObject        : toObject,\n    toArray         : toArray,\n    toColumnArray   : toColumnArray,\n    toSchemaObject  : toSchemaObject,\n    toCSV           : toCSV\n};\n\n\nfunction toColumnArray(data, opts){\n\n    opts = opts || { };\n\n    var delimiter   = (opts.delimiter || ',');\n    var quote       = helper.getQuoteChar(opts.quote);\n    var content     = data;\n    var headers     = null;\n\n    if(typeof(content) !== \"string\"){\n        throw new Error(\"Invalid input, input data should be a string\");\n    }\n\n    content     = content.split(/[\\n\\r]+/ig);\n\n    if(typeof(opts.headers) === \"string\"){\n        headers = opts.headers.split(/[\\n\\r]+/ig);\n        headers = quote ?\n                helper.convertArray(headers.shift(), delimiter, quote) :\n                headers.shift().split(delimiter);\n    }else {\n        headers = quote ?\n                helper.convertArray(content.shift(), delimiter, quote) :\n                content.shift().split(delimiter);\n    }\n\n\n    var hashData    = { };\n\n    headers.forEach(function(item){\n        hashData[item] = [];\n    });\n\n    content.forEach(function(item){\n        if(item){\n            item = quote ?\n                  helper.convertArray(item, delimiter, quote) :\n                  item.split(delimiter);\n            item.forEach(function(val, index){\n                hashData[headers[index]].push(helper.removeQuote(val));\n            });\n        }\n    });\n\n    return hashData;\n}\n\nfunction toObject(data, opts){\n\n    opts = opts || { };\n\n    var delimiter   = (opts.delimiter || ',');\n    var quote       = helper.getQuoteChar(opts.quote);\n    var content     = data;\n    var headers     = null;\n\n    if(typeof(content) !== \"string\"){\n        throw new Error(\"Invalid input, input data should be a string\");\n    }\n\n    content = content.split(/[\\n\\r]+/ig);\n\n    if(typeof(opts.headers) === \"string\"){\n        headers = opts.headers.split(/[\\n\\r]+/ig);\n        headers = quote ?\n                helper.convertArray(headers.shift(), delimiter, quote) :\n                headers.shift().split(delimiter);\n    }else {\n        headers = quote ?\n                helper.convertArray(content.shift(), delimiter, quote) :\n                content.shift().split(delimiter);\n    }\n\n    var hashData = [ ];\n    content.forEach(function(item){\n        if(item){\n          item = quote ?\n                helper.convertArray(item, delimiter, quote) :\n                item.split(delimiter);\n          var hashItem = { };\n          headers.forEach(function(headerItem, index){\n              hashItem[headerItem] = helper.removeQuote(item[index]);\n          });\n          hashData.push(hashItem);\n        }\n    });\n    return hashData;\n}\n\nfunction toSchemaObject(data, opts){\n\n    opts = opts || { };\n\n    var delimiter   = (opts.delimiter || ',');\n    var quote       = helper.getQuoteChar(opts.quote);\n    var content     = data;\n    var headers     = null;\n    if(typeof(content) !== \"string\"){\n        throw new Error(\"Invalid input, input should be a string\");\n    }\n\n    content         = content.split(/[\\n\\r]+/ig);\n\n\n    if(typeof(opts.headers) === \"string\"){\n        headers = opts.headers.split(/[\\n\\r]+/ig);\n        headers = quote ?\n                helper.convertArray(headers.shift(), delimiter, quote) :\n                headers.shift().split(delimiter);\n    }else {\n        headers = quote ?\n                helper.convertArray(content.shift(), delimiter, quote) :\n                content.shift().split(delimiter);\n    }\n\n\n    var hashData    = [ ];\n\n    content.forEach(function(item){\n        if(item){\n          item = quote ?\n                helper.convertArray(item, delimiter, quote) :\n                item.split(delimiter);\n            var schemaObject = {};\n            item.forEach(function(val, index){\n                helper.addDataInSchema(headers[index], val, schemaObject , delimiter, quote);\n            });\n            hashData.push(schemaObject);\n        }\n    });\n\n    return hashData;\n}\n\nfunction toArray(data, opts){\n\n    opts = opts || { };\n\n    var delimiter   = (opts.delimiter || ',');\n    var quote       = helper.getQuoteChar(opts.quote);\n    var content     = data;\n\n    if(typeof(content) !== \"string\"){\n        throw new Error(\"Invalid input, input data should be a string\");\n    }\n\n    content = content.split(/[\\n\\r]+/ig);\n    var arrayData = [ ];\n    content.forEach(function(item){\n        if(item){\n            item = quote ?\n                helper.convertArray(item, delimiter, quote) :\n                item.split(delimiter);\n\n            item = item.map(function(cItem){\n                return helper.removeQuote(cItem);\n            });\n            arrayData.push(item);\n        }\n    });\n    return arrayData;\n}\n\nfunction toCSV(data, opts){\n\n    opts                = (opts || { });\n    opts.delimiter      = (opts.delimiter || ',');\n    opts.wrap           = (opts.wrap || '');\n    opts.arrayDenote    = (opts.arrayDenote && String(opts.arrayDenote).trim() ? opts.arrayDenote : '[]');\n    opts.objectDenote   = (opts.objectDenote && String(opts.objectDenote).trim() ? opts.objectDenote : '.');\n    opts.detailedOutput = (typeof(opts.detailedOutput) !== \"boolean\" ? true : opts.detailedOutput);\n    opts.headers        = String(opts.headers).toLowerCase();\n    var csvJSON         = { };\n    var csvData         = \"\";\n\n    if(!opts.headers.match(/none|full|relative|key/)){\n      opts.headers = 'full';\n    }else {\n      opts.headers = opts.headers.match(/none|full|relative|key/)[0];\n    }\n\n    if(opts.wrap === true){\n        opts.wrap = '\"';\n    }\n\n    if(typeof(data) === \"string\"){\n        data = JSON.parse(data);\n    }\n\n    helper.toCsv(data, csvJSON, \"\", 0, opts);\n\n    var headers = helper.getHeaders(opts.headers, csvJSON, opts);\n\n    if(headers){\n      if(opts.wrap){\n        headers = headers.map(function(item){\n          return opts.wrap + item + opts.wrap;\n        });\n      }\n      csvData = headers.join(opts.delimiter);\n    }\n\n    var bigArrayLen = helper.getLengthyItem(csvJSON);\n    var keys        = Object.keys(csvJSON);\n    var row         = [ ];\n\n    var replaceNewLinePattern = /\\n|\\r/g;\n    if(!opts.wrap){\n        replaceNewLinePattern = new RegExp('\\n|\\r|' + opts.delimiter, 'g');\n    }\n\n\n    for(var i = 0; i < bigArrayLen; i++){\n        row = [ ];\n        for(var j = 0; j < keys.length; j++){\n            if(csvJSON[keys[j]][i]){\n                csvJSON[keys[j]][i] = csvJSON[keys[j]][i].replace(replaceNewLinePattern, '\\t');\n                if(opts.wrap){\n                    csvJSON[keys[j]][i] = opts.wrap + csvJSON[keys[j]][i] + opts.wrap;\n                }\n                row[row.length] = csvJSON[keys[j]][i];\n            }else {\n                row[row.length] = \"\";\n            }\n        }\n      csvData += '\\n' + row.join(opts.delimiter);\n    }\n    return csvData;\n}\n\nvar stream = {\n\ttoColumnArray: toColumnArray$1,\n\ttoObject: toObject$1,\n\ttoSchemaObject: toSchemaObject$1,\n\ttoArray: toArray$1,\n\ttransform: transform,\n\tstringify: stringify\n};\n\nfunction chopLines(str) {\n\treturn str.split(/[\\n\\r]/ig);\n}\n\nfunction transform(func) {\n\tvar stream = stream$1;\n\treturn new stream.Transform({\n\t\treadableObjectMode: true,\n\t\twritableObjectMode: true,\n\t\ttransform: func\n\t});\n}\n\nfunction stringify(space) {\n\treturn transform(function (data, encoding, callback) {\n\t\tthis.push(JSON.stringify(data, null, space));\n\t\tcallback();\n\t});\n}\n\nfunction _toColumnArray(data, encoding, callback, trans) {\n\tvar lines = chopLines(data.toString());\n\tif (!trans._head) {\n\t\tvar head = lines.shift();\n\t\ttrans._head = head;\n\t\ttrans._opts.headers = head;\n\t}\n\tthis.push(app.toColumnArray(lines.join('\\n'), trans._opts));\n\tcallback();\n}\n\nfunction toColumnArray$1(opts) {\n\topts = opts || {};\n\tvar trans = transform(function (data, encoding, callback) {\n\t\t_toColumnArray.call(this, data, encoding, callback, trans);\n\t});\n\ttrans._head = opts.headers ? opts.headers : null;\n\ttrans._opts = opts;\n\treturn trans;\n}\n\nfunction _toObject(data, encoding, callback, trans) {\n\tvar lines = chopLines(data.toString());\n\tif (!trans._head) {\n\t\tvar head = lines.shift();\n\t\ttrans._head = head;\n\t\ttrans._opts.headers = head;\n\t}\n\tthis.push(app.toObject(lines.join('\\n'), trans._opts));\n\tcallback();\n}\n\nfunction toObject$1(opts) {\n\topts = opts || {};\n\tvar trans = transform(function (data, encoding, callback) {\n\t\t_toObject.call(this, data, encoding, callback, trans);\n\t});\n\ttrans._head = opts.headers ? opts.headers : null;\n\ttrans._opts = opts;\n\treturn trans;\n}\n\nfunction _toSchemaObject(data, encoding, callback, trans) {\n\tvar lines = chopLines(data.toString());\n\tif (!trans._head) {\n\t\tvar head = lines.shift();\n\t\ttrans._head = head;\n\t\ttrans._opts.headers = head;\n\t}\n\tthis.push(app.toSchemaObject(lines.join('\\n'), trans._opts));\n\tcallback();\n}\n\nfunction toSchemaObject$1(opts) {\n\topts = opts || {};\n\tvar trans = transform(function (data, encoding, callback) {\n\t\t_toSchemaObject.call(this, data, encoding, callback, trans);\n\t});\n\ttrans._head = opts.headers ? opts.headers : null;\n\ttrans._opts = opts;\n\treturn trans;\n}\n\nfunction _toArray(data, encoding, callback, trans) {\n\tvar lines = chopLines(data.toString());\n\tthis.push(app.toArray(lines.join('\\n'), trans._opts));\n\tcallback();\n}\n\nfunction toArray$1(opts) {\n\topts = opts || {};\n\tvar trans = transform(function (data, encoding, callback) {\n\t\t_toArray.call(this, data, encoding, callback, trans);\n\t});\n\ttrans._opts = opts;\n\treturn trans;\n}\n\napp.stream \t\t= stream;\nvar csvjson \t= app;\n\nexport default csvjson;\nexport { csvjson as __moduleExports };\n"],"names":["helper","getQuoteChar","q","dataType","toCsv","putData","allObjsOrArray","getHeaders","headerType","table","opt","keyMatchPattern","relativeMatchPattern","Object","keys","map","header","head","match","length","getLengthyItem","len","forEach","item","Array","isArray","addDataInSchema","schema","delimiter","quote","headerName","currentPoint","testMatch","indexOf","headParts","split","shift","join","replace","push","test","index","parseInt","pop","convertArray","Number","removeQuote","arrayToCsv","objectToCsv","csvToArray","arg","nodeType","type","prototype","toString","call","toLowerCase","isNaN","isFinite","data","parent","row","String","array","every","str","trim","arrayDenote","objectDenote","output","val","trimmed","text","delimit","value","RegExp","a","m0","m1","m2","undefined","app","toObject","opts","content","headers","Error","hashData","hashItem","headerItem","toArray","arrayData","cItem","toColumnArray","toSchemaObject","schemaObject","toCSV","wrap","detailedOutput","csvJSON","csvData","JSON","parse","bigArrayLen","replaceNewLinePattern","i","j","stream","trans","transform","encoding","callback","_toColumnArray","this","_head","_opts","_toObject","_toSchemaObject","_toArray","stringify","space","chopLines","func","stream$1","Transform","readableObjectMode","writableObjectMode","lines","csvjson"],"sourceRoot":""}